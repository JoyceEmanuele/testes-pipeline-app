-- $$ --

CREATE TABLE DUTS_DUO_EVAPORATORS (
  ID MEDIUMINT UNSIGNED NOT NULL AUTO_INCREMENT,
  EVAPORATOR_ID MEDIUMINT UNSIGNED NOT NULL,
  DUT_DUO_ID MEDIUMINT UNSIGNED NOT NULL,
  PRIMARY KEY (ID),
  CONSTRAINT DUT_DUO_EVAPORATORS_fk_EVAPORATOR_ID FOREIGN KEY (EVAPORATOR_ID) REFERENCES EVAPORATORS (ID),
  CONSTRAINT DUT_DUO_EVAPORATORS_fk_DUT_DUO_ID FOREIGN KEY (DUT_DUO_ID) REFERENCES DUTS_DUO (ID),
  CONSTRAINT DUT_DUO_EVAPORATORS_uk_EVAPORATOR_DUT_DUO UNIQUE (EVAPORATOR_ID, DUT_DUO_ID)
) DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

DELIMITER //

CREATE PROCEDURE migrate_evaporator_data()
BEGIN
    DECLARE var_id MEDIUMINT UNSIGNED;
    DECLARE var_evaporator_id MEDIUMINT UNSIGNED;
    DECLARE done INT DEFAULT FALSE;

    DECLARE CURSOR_DUTS_DUO CURSOR FOR
        SELECT ID, EVAPORATOR_ID
        FROM DUTS_DUO
        WHERE EVAPORATOR_ID IS NOT NULL;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    START TRANSACTION;

    OPEN CURSOR_DUTS_DUO;
    migrateData: LOOP
        FETCH CURSOR_DUTS_DUO INTO var_id, var_evaporator_id;
        
        IF done THEN
            LEAVE migrateData;
        END IF;

        -- Inserir dados na tabela DUTS_DUO_EVAPORATORS
        INSERT INTO DUTS_DUO_EVAPORATORS (DUT_DUO_ID, EVAPORATOR_ID)
        VALUES (var_id, var_evaporator_id);
    END LOOP migrateData;
    CLOSE CURSOR_DUTS_DUO;

    COMMIT;
END
//

DELIMITER ;

CALL migrate_evaporator_data();

ALTER TABLE DUTS_DUO DROP FOREIGN KEY DUTS_AUTOMATION_fk_EVAPORATOR_ID;
ALTER TABLE DUTS_DUO DROP COLUMN EVAPORATOR_ID;

CREATE TABLE DUTS_DUO_ASSET_HEAT_EXCHANGERS (
  ID MEDIUMINT UNSIGNED NOT NULL AUTO_INCREMENT,
  ASSET_HEAT_EXCHANGER_ID MEDIUMINT UNSIGNED NOT NULL,
  DUT_DUO_ID MEDIUMINT UNSIGNED NOT NULL,
  PRIMARY KEY (ID),
  CONSTRAINT DUT_DUO_ASSET_HEAT_EXCHANGERS_fk_ASSET_HEAT_EXCHANGER_ID FOREIGN KEY (ASSET_HEAT_EXCHANGER_ID) REFERENCES ASSET_HEAT_EXCHANGERS (ID),
  CONSTRAINT DUT_DUO_ASSET_HEAT_EXCHANGERS_fk_DUT_DUO_ID FOREIGN KEY (DUT_DUO_ID) REFERENCES DUTS_DUO (ID),
  CONSTRAINT DUT_DUO_ASSET_HEAT_EXCHANGERS_uk_ASSET_HEAT_EXCHANGER_ID UNIQUE (ASSET_HEAT_EXCHANGER_ID),
  CONSTRAINT DUT_DUO_ASSET_HEAT_EXCHANGERS_uk_DUT_DUO_ID UNIQUE (DUT_DUO_ID)
) DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;


ALTER TABLE DUTS_DUO_HIST RENAME TO DUTS_DUO_EVAPORATORS_HIST;

CREATE TABLE DUTS_DUO_ASSET_HEAT_EXCHANGERS_HIST (
  ID mediumint unsigned NOT NULL AUTO_INCREMENT,
  DUT_CODE varchar(50) DEFAULT NULL,
  END_DATE datetime DEFAULT NULL,
  ASSET_HEAT_EXCHANGER_ID mediumint unsigned DEFAULT NULL,
  START_DATE datetime NOT NULL,
  PRIMARY KEY (ID)
) DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

DROP TRIGGER IF EXISTS AFTER_INSERT_DUTS_DUO;
DROP TRIGGER IF EXISTS AFTER_UPDATE_DUTS_DUO;
DROP TRIGGER IF EXISTS AFTER_DELETE_DUTS_DUO;

DELIMITER //
CREATE TRIGGER AFTER_INSERT_DUTS_DUO_EVAPORATORS
AFTER INSERT ON DUTS_DUO_EVAPORATORS FOR EACH ROW
BEGIN
    DECLARE _device_code VARCHAR(50) COLLATE utf8mb4_unicode_ci;
    SELECT DEVICE_CODE COLLATE utf8mb4_unicode_ci INTO _device_code
    FROM DEVICES
         INNER JOIN DUTS_DEVICES ON DEVICES.ID = DUTS_DEVICES.DEVICE_ID
         INNER JOIN DUTS_DUO ON DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID
    WHERE DUTS_DUO.ID = NEW.DUT_DUO_ID;
    
    INSERT INTO DUTS_DUO_EVAPORATORS_HIST (DUT_CODE, EVAPORATOR_ID, START_DATE)
    VALUES (_device_code, NEW.EVAPORATOR_ID, CURRENT_TIMESTAMP());
END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER AFTER_UPDATE_DUTS_DUO_EVAPORATORS
AFTER UPDATE ON DUTS_DUO_EVAPORATORS FOR EACH ROW
BEGIN
    DECLARE _old_device_code VARCHAR(50) COLLATE utf8mb4_unicode_ci;
    DECLARE _new_device_code VARCHAR(50) COLLATE utf8mb4_unicode_ci;
    IF (NEW.EVAPORATOR_ID <> OLD.EVAPORATOR_ID OR NEW.DUT_DUO_ID <> OLD.DUT_DUO_ID) THEN
        SELECT DEVICE_CODE COLLATE utf8mb4_unicode_ci INTO _old_device_code
        FROM DEVICES
            INNER JOIN DUTS_DEVICES ON DEVICES.ID = DUTS_DEVICES.DEVICE_ID
            INNER JOIN DUTS_DUO ON DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID
        WHERE DUTS_DUO.ID = OLD.DUT_DUO_ID;
        
        SELECT DEVICE_CODE COLLATE utf8mb4_unicode_ci INTO _new_device_code
        FROM DEVICES
            INNER JOIN DUTS_DEVICES ON DEVICES.ID = DUTS_DEVICES.DEVICE_ID
            INNER JOIN DUTS_DUO ON DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID
        WHERE DUTS_DUO.ID = NEW.DUT_DUO_ID;
        
        UPDATE DUTS_DUO_EVAPORATORS_HIST
        SET END_DATE = CURRENT_TIMESTAMP()
        WHERE EVAPORATOR_ID = OLD.EVAPORATOR_ID AND DUT_CODE = _old_device_code COLLATE utf8mb4_unicode_ci AND END_DATE IS NULL;
        
        INSERT INTO DUTS_DUO_EVAPORATORS_HIST (DUT_CODE, EVAPORATOR_ID, START_DATE)
        VALUES (_new_device_code, NEW.EVAPORATOR_ID, CURRENT_TIMESTAMP());
    END IF;
END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER AFTER_DELETE_DUTS_DUO_EVAPORATORS
AFTER DELETE ON DUTS_DUO_EVAPORATORS FOR EACH ROW
BEGIN
    DECLARE _device_code VARCHAR(50) COLLATE utf8mb4_unicode_ci;
    SELECT DEVICE_CODE COLLATE utf8mb4_unicode_ci INTO _device_code
    FROM DEVICES
        INNER JOIN DUTS_DEVICES ON DEVICES.ID = DUTS_DEVICES.DEVICE_ID
        INNER JOIN DUTS_DUO ON DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID
    WHERE DUTS_DUO.ID = OLD.DUT_DUO_ID;
    
    UPDATE DUTS_DUO_EVAPORATORS_HIST
    SET END_DATE = CURRENT_TIMESTAMP()
    WHERE EVAPORATOR_ID = OLD.EVAPORATOR_ID AND DUT_CODE = _device_code COLLATE utf8mb4_unicode_ci AND END_DATE IS NULL;
END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER AFTER_INSERT_DUTS_DUO_ASSET_HEAT_EXCHANGERS
AFTER INSERT ON DUTS_DUO_ASSET_HEAT_EXCHANGERS FOR EACH ROW
BEGIN
    DECLARE _device_code VARCHAR(50) COLLATE utf8mb4_unicode_ci;
    SELECT DEVICE_CODE COLLATE utf8mb4_unicode_ci INTO _device_code
    FROM DEVICES
        INNER JOIN DUTS_DEVICES ON DEVICES.ID = DUTS_DEVICES.DEVICE_ID
        INNER JOIN DUTS_DUO ON DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID
    WHERE DUTS_DUO.ID = NEW.DUT_DUO_ID;
    
    INSERT INTO DUTS_DUO_ASSET_HEAT_EXCHANGERS_HIST (DUT_CODE, ASSET_HEAT_EXCHANGER_ID, START_DATE)
    VALUES (_device_code, NEW.ASSET_HEAT_EXCHANGER_ID, CURRENT_TIMESTAMP());
END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER AFTER_UPDATE_DUTS_DUO_ASSET_HEAT_EXCHANGERS
AFTER UPDATE ON DUTS_DUO_ASSET_HEAT_EXCHANGERS FOR EACH ROW
BEGIN
    DECLARE _old_device_code VARCHAR(50) COLLATE utf8mb4_unicode_ci;
    DECLARE _new_device_code VARCHAR(50) COLLATE utf8mb4_unicode_ci;
    IF (NEW.ASSET_HEAT_EXCHANGER_ID <> OLD.ASSET_HEAT_EXCHANGER_ID OR NEW.DUT_DUO_ID <> OLD.DUT_DUO_ID) THEN
        SELECT DEVICE_CODE COLLATE utf8mb4_unicode_ci INTO _old_device_code
        FROM DEVICES
             INNER JOIN DUTS_DEVICES ON DEVICES.ID = DUTS_DEVICES.DEVICE_ID
             INNER JOIN DUTS_DUO ON DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID
        WHERE DUTS_DUO.ID = OLD.DUT_DUO_ID;
        
        SELECT DEVICE_CODE COLLATE utf8mb4_unicode_ci INTO _new_device_code
        FROM DEVICES
             INNER JOIN DUTS_DEVICES ON DEVICES.ID = DUTS_DEVICES.DEVICE_ID
             INNER JOIN DUTS_DUO ON DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID
        WHERE DUTS_DUO.ID = NEW.DUT_DUO_ID;
        
        UPDATE DUTS_DUO_ASSET_HEAT_EXCHANGERS_HIST
        SET END_DATE = CURRENT_TIMESTAMP()
        WHERE ASSET_HEAT_EXCHANGER_ID = OLD.ASSET_HEAT_EXCHANGER_ID AND DUT_CODE = _old_device_code COLLATE utf8mb4_unicode_ci AND END_DATE IS NULL;
        
        INSERT INTO DUTS_DUO_ASSET_HEAT_EXCHANGERS_HIST (DUT_CODE, ASSET_HEAT_EXCHANGER_ID, START_DATE)
        VALUES (_new_device_code, NEW.ASSET_HEAT_EXCHANGER_ID, CURRENT_TIMESTAMP());
    END IF;
END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER AFTER_DELETE_DUTS_DUO_ASSET_HEAT_EXCHANGERS
AFTER DELETE ON DUTS_DUO_ASSET_HEAT_EXCHANGERS FOR EACH ROW
BEGIN
    DECLARE _device_code VARCHAR(50) COLLATE utf8mb4_unicode_ci;
    SELECT DEVICE_CODE COLLATE utf8mb4_unicode_ci INTO _device_code
    FROM DEVICES
         INNER JOIN DUTS_DEVICES ON DEVICES.ID = DUTS_DEVICES.DEVICE_ID
         INNER JOIN DUTS_DUO ON DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID
    WHERE DUTS_DUO.ID = OLD.DUT_DUO_ID;
    
    UPDATE DUTS_DUO_ASSET_HEAT_EXCHANGERS_HIST
    SET END_DATE = CURRENT_TIMESTAMP()
    WHERE ASSET_HEAT_EXCHANGER_ID = OLD.ASSET_HEAT_EXCHANGER_ID AND DUT_CODE = _device_code AND END_DATE IS NULL;
END//
DELIMITER ;

-- $$ --

CREATE TABLE DUTS_DUO_CONDENSERS (
  ID MEDIUMINT UNSIGNED NOT NULL AUTO_INCREMENT,
  CONDENSER_ID MEDIUMINT UNSIGNED NOT NULL,
  DUT_DUO_ID MEDIUMINT UNSIGNED NOT NULL,
  PRIMARY KEY (ID),
  CONSTRAINT DUT_DUO_CONDENSERS_fk_CONDENSER_ID FOREIGN KEY (CONDENSER_ID) REFERENCES CONDENSERS (ID),
  CONSTRAINT DUT_DUO_CONDENSERS_fk_DUT_DUO_ID FOREIGN KEY (DUT_DUO_ID) REFERENCES DUTS_DUO (ID),
  CONSTRAINT DUT_DUO_CONDENSERS_uk_CONDENSER_ID UNIQUE (CONDENSER_ID),
  CONSTRAINT DUT_DUO_CONDENSERS_uk_DUT_DUO_ID UNIQUE (DUT_DUO_ID)
) DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE DUTS_DUO_CONDENSERS_HIST (
  ID mediumint unsigned NOT NULL AUTO_INCREMENT,
  DUT_CODE varchar(50) DEFAULT NULL,
  END_DATE datetime DEFAULT NULL,
  CONDENSER_ID mediumint unsigned DEFAULT NULL,
  START_DATE datetime NOT NULL,
  PRIMARY KEY (ID)
) DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

DELIMITER //
CREATE TRIGGER AFTER_INSERT_DUTS_DUO_CONDENSERS
AFTER INSERT ON DUTS_DUO_CONDENSERS FOR EACH ROW
BEGIN
    DECLARE _device_code VARCHAR(50) COLLATE utf8mb4_unicode_ci;
    SELECT DEVICE_CODE COLLATE utf8mb4_unicode_ci INTO _device_code
    FROM DEVICES
        INNER JOIN DUTS_DEVICES ON DEVICES.ID = DUTS_DEVICES.DEVICE_ID
        INNER JOIN DUTS_DUO ON DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID
    WHERE DUTS_DUO.ID = NEW.DUT_DUO_ID;
    
    INSERT INTO DUTS_DUO_CONDENSERS_HIST (DUT_CODE, CONDENSER_ID, START_DATE)
    VALUES (_device_code, NEW.CONDENSER_ID, CURRENT_TIMESTAMP());
END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER AFTER_UPDATE_DUTS_DUO_CONDENSERS
AFTER UPDATE ON DUTS_DUO_CONDENSERS FOR EACH ROW
BEGIN
    DECLARE _old_device_code VARCHAR(50) COLLATE utf8mb4_unicode_ci;
    DECLARE _new_device_code VARCHAR(50) COLLATE utf8mb4_unicode_ci;
    IF (NEW.CONDENSER_ID <> OLD.CONDENSER_ID OR NEW.DUT_DUO_ID <> OLD.DUT_DUO_ID) THEN
        SELECT DEVICE_CODE COLLATE utf8mb4_unicode_ci INTO _old_device_code
        FROM DEVICES
             INNER JOIN DUTS_DEVICES ON DEVICES.ID = DUTS_DEVICES.DEVICE_ID
             INNER JOIN DUTS_DUO ON DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID
        WHERE DUTS_DUO.ID = OLD.DUT_DUO_ID;
        
        SELECT DEVICE_CODE COLLATE utf8mb4_unicode_ci INTO _new_device_code
        FROM DEVICES
             INNER JOIN DUTS_DEVICES ON DEVICES.ID = DUTS_DEVICES.DEVICE_ID
             INNER JOIN DUTS_DUO ON DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID
        WHERE DUTS_DUO.ID = NEW.DUT_DUO_ID;
        
        UPDATE DUTS_DUO_CONDENSERS_HIST
        SET END_DATE = CURRENT_TIMESTAMP()
        WHERE CONDENSER_ID = OLD.CONDENSER_ID AND DUT_CODE = _old_device_code COLLATE utf8mb4_unicode_ci AND END_DATE IS NULL;
        
        INSERT INTO DUTS_DUO_CONDENSERS_HIST (DUT_CODE, CONDENSER_ID, START_DATE)
        VALUES (_new_device_code, NEW.CONDENSER_ID, CURRENT_TIMESTAMP());
    END IF;
END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER AFTER_DELETE_DUTS_DUO_CONDENSERS
AFTER DELETE ON DUTS_DUO_CONDENSERS FOR EACH ROW
BEGIN
    DECLARE _device_code VARCHAR(50) COLLATE utf8mb4_unicode_ci;
    SELECT DEVICE_CODE COLLATE utf8mb4_unicode_ci INTO _device_code
    FROM DEVICES
         INNER JOIN DUTS_DEVICES ON DEVICES.ID = DUTS_DEVICES.DEVICE_ID
         INNER JOIN DUTS_DUO ON DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID
    WHERE DUTS_DUO.ID = OLD.DUT_DUO_ID;
    
    UPDATE DUTS_DUO_CONDENSERS_HIST
    SET END_DATE = CURRENT_TIMESTAMP()
    WHERE CONDENSER_ID = OLD.CONDENSER_ID AND DUT_CODE = _device_code AND END_DATE IS NULL;
END//
DELIMITER ;

CREATE TABLE DUTS_DUO_AIR_CURTAINS (
  ID MEDIUMINT UNSIGNED NOT NULL AUTO_INCREMENT,
  AIR_CURTAIN_ID MEDIUMINT UNSIGNED NOT NULL,
  DUT_DUO_ID MEDIUMINT UNSIGNED NOT NULL,
  PRIMARY KEY (ID),
  CONSTRAINT DUT_DUO_AIR_CURTAINS_fk_AIR_CURTAIN_ID FOREIGN KEY (AIR_CURTAIN_ID) REFERENCES AIR_CURTAINS (ID),
  CONSTRAINT DUT_DUO_AIR_CURTAINS_fk_DUT_DUO_ID FOREIGN KEY (DUT_DUO_ID) REFERENCES DUTS_DUO (ID),
  CONSTRAINT DUT_DUO_AIR_CURTAINS_uk_AIR_CURTAIN_ID UNIQUE (AIR_CURTAIN_ID),
  CONSTRAINT DUT_DUO_AIR_CURTAINS_uk_DUT_DUO_ID UNIQUE (DUT_DUO_ID)
) DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE DUTS_DUO_AIR_CURTAINS_HIST (
  ID mediumint unsigned NOT NULL AUTO_INCREMENT,
  DUT_CODE varchar(50) DEFAULT NULL,
  END_DATE datetime DEFAULT NULL,
  AIR_CURTAIN_ID mediumint unsigned DEFAULT NULL,
  START_DATE datetime NOT NULL,
  PRIMARY KEY (ID)
) DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

DELIMITER //
CREATE TRIGGER AFTER_INSERT_DUTS_DUO_AIR_CURTAINS
AFTER INSERT ON DUTS_DUO_AIR_CURTAINS FOR EACH ROW
BEGIN
    DECLARE _device_code VARCHAR(50) COLLATE utf8mb4_unicode_ci;
    SELECT DEVICE_CODE COLLATE utf8mb4_unicode_ci INTO _device_code
    FROM DEVICES
        INNER JOIN DUTS_DEVICES ON DEVICES.ID = DUTS_DEVICES.DEVICE_ID
        INNER JOIN DUTS_DUO ON DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID
    WHERE DUTS_DUO.ID = NEW.DUT_DUO_ID;
    
    INSERT INTO DUTS_DUO_AIR_CURTAINS_HIST (DUT_CODE, AIR_CURTAIN_ID, START_DATE)
    VALUES (_device_code, NEW.AIR_CURTAIN_ID, CURRENT_TIMESTAMP());
END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER AFTER_UPDATE_DUTS_DUO_AIR_CURTAINS
AFTER UPDATE ON DUTS_DUO_AIR_CURTAINS FOR EACH ROW
BEGIN
    DECLARE _old_device_code VARCHAR(50) COLLATE utf8mb4_unicode_ci;
    DECLARE _new_device_code VARCHAR(50) COLLATE utf8mb4_unicode_ci;
    IF (NEW.AIR_CURTAIN_ID <> OLD.AIR_CURTAIN_ID OR NEW.DUT_DUO_ID <> OLD.DUT_DUO_ID) THEN
        SELECT DEVICE_CODE COLLATE utf8mb4_unicode_ci INTO _old_device_code
        FROM DEVICES
             INNER JOIN DUTS_DEVICES ON DEVICES.ID = DUTS_DEVICES.DEVICE_ID
             INNER JOIN DUTS_DUO ON DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID
        WHERE DUTS_DUO.ID = OLD.DUT_DUO_ID;
        
        SELECT DEVICE_CODE COLLATE utf8mb4_unicode_ci INTO _new_device_code
        FROM DEVICES
             INNER JOIN DUTS_DEVICES ON DEVICES.ID = DUTS_DEVICES.DEVICE_ID
             INNER JOIN DUTS_DUO ON DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID
        WHERE DUTS_DUO.ID = NEW.DUT_DUO_ID;
        
        UPDATE DUTS_DUO_AIR_CURTAINS_HIST
        SET END_DATE = CURRENT_TIMESTAMP()
        WHERE AIR_CURTAIN_ID = OLD.AIR_CURTAIN_ID AND DUT_CODE = _old_device_code COLLATE utf8mb4_unicode_ci AND END_DATE IS NULL;
        
        INSERT INTO DUTS_DUO_AIR_CURTAINS_HIST (DUT_CODE, AIR_CURTAIN_ID, START_DATE)
        VALUES (_new_device_code, NEW.AIR_CURTAIN_ID, CURRENT_TIMESTAMP());
    END IF;
END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER AFTER_DELETE_DUTS_DUO_AIR_CURTAINS
AFTER DELETE ON DUTS_DUO_AIR_CURTAINS FOR EACH ROW
BEGIN
    DECLARE _device_code VARCHAR(50) COLLATE utf8mb4_unicode_ci;
    SELECT DEVICE_CODE COLLATE utf8mb4_unicode_ci INTO _device_code
    FROM DEVICES
         INNER JOIN DUTS_DEVICES ON DEVICES.ID = DUTS_DEVICES.DEVICE_ID
         INNER JOIN DUTS_DUO ON DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID
    WHERE DUTS_DUO.ID = OLD.DUT_DUO_ID;
    
    UPDATE DUTS_DUO_AIR_CURTAINS_HIST
    SET END_DATE = CURRENT_TIMESTAMP()
    WHERE AIR_CURTAIN_ID = OLD.AIR_CURTAIN_ID AND DUT_CODE = _device_code AND END_DATE IS NULL;
END//
DELIMITER ;

-- $$ --

CREATE TEMPORARY TABLE TEMP_DEVS_UNITS_HISTORY (
    ID MEDIUMINT AUTO_INCREMENT PRIMARY KEY,
    LAAGER_ID varchar(50) DEFAULT NULL,
    UNIT_ID mediumint unsigned DEFAULT NULL,
    START_DATE datetime NOT NULL DEFAULT current_timestamp(),
    END_DATE datetime DEFAULT NULL,
    TOTAL_CAPACITY int unsigned DEFAULT NULL,
	QUANTITY_OF_RESERVOIRS int unsigned DEFAULT NULL,
    HYDROMETER_MODEL_ID mediumint unsigned DEFAULT NULL
);

INSERT INTO TEMP_DEVS_UNITS_HISTORY (LAAGER_ID, UNIT_ID, START_DATE, END_DATE, TOTAL_CAPACITY, QUANTITY_OF_RESERVOIRS, HYDROMETER_MODEL_ID) VALUES ('0232618791', 347, '2022-02-15 00:00:00',	'2023-07-14 10:18:41', 31500, 1, NULL);
INSERT INTO TEMP_DEVS_UNITS_HISTORY (LAAGER_ID, UNIT_ID, START_DATE, END_DATE, TOTAL_CAPACITY, QUANTITY_OF_RESERVOIRS, HYDROMETER_MODEL_ID) VALUES ('0232718996', 342, '2022-10-24 00:00:00',	'2023-07-27 12:38:09',	5000, 2, NULL);	
INSERT INTO TEMP_DEVS_UNITS_HISTORY (LAAGER_ID, UNIT_ID, START_DATE, END_DATE, TOTAL_CAPACITY, QUANTITY_OF_RESERVOIRS, HYDROMETER_MODEL_ID) VALUES ('0240780456', 376, '2023-05-25 17:12:10',	'2023-07-27 15:00:08', NULL, NULL, NULL);			
INSERT INTO TEMP_DEVS_UNITS_HISTORY (LAAGER_ID, UNIT_ID, START_DATE, END_DATE, TOTAL_CAPACITY, QUANTITY_OF_RESERVOIRS, HYDROMETER_MODEL_ID) VALUES ('0240783463', 235, '2021-11-10 00:00:00',	'2023-07-14 12:08:40', 1000, 1, NULL);
INSERT INTO TEMP_DEVS_UNITS_HISTORY (LAAGER_ID, UNIT_ID, START_DATE, END_DATE, TOTAL_CAPACITY, QUANTITY_OF_RESERVOIRS, HYDROMETER_MODEL_ID) VALUES ('0240783670', 327, '2022-03-25 00:00:00',	'2023-07-14 12:03:39', 2000, 2, NULL);	
INSERT INTO TEMP_DEVS_UNITS_HISTORY (LAAGER_ID, UNIT_ID, START_DATE, END_DATE, TOTAL_CAPACITY, QUANTITY_OF_RESERVOIRS, HYDROMETER_MODEL_ID) VALUES ('0240783673', 362, '2022-05-27 00:00:00',	'2023-07-27 17:01:58', NULL, NULL, NULL);					
INSERT INTO TEMP_DEVS_UNITS_HISTORY (LAAGER_ID, UNIT_ID, START_DATE, END_DATE, TOTAL_CAPACITY, QUANTITY_OF_RESERVOIRS, HYDROMETER_MODEL_ID) VALUES ('0240784681', 376, '2022-01-18 00:00:00',	'2023-05-25 14:11:24', 15000, 2, NULL);	
INSERT INTO TEMP_DEVS_UNITS_HISTORY (LAAGER_ID, UNIT_ID, START_DATE, END_DATE, TOTAL_CAPACITY, QUANTITY_OF_RESERVOIRS, HYDROMETER_MODEL_ID) VALUES ('0240797178', 380, '2022-08-17 00:00:00',	'2023-07-14 11:03:47', 4000, 3, NULL);	
INSERT INTO TEMP_DEVS_UNITS_HISTORY (LAAGER_ID, UNIT_ID, START_DATE, END_DATE, TOTAL_CAPACITY, QUANTITY_OF_RESERVOIRS, HYDROMETER_MODEL_ID) VALUES ('0280016237', 339, '2022-02-01 00:00:00',	'2023-08-14 12:41:57', 2500, 3, NULL);	
INSERT INTO TEMP_DEVS_UNITS_HISTORY (LAAGER_ID, UNIT_ID, START_DATE, END_DATE, TOTAL_CAPACITY, QUANTITY_OF_RESERVOIRS, HYDROMETER_MODEL_ID) VALUES ('0280019838', 309, '2022-07-08 00:00:00',	'2023-07-14 10:21:20', 2000, 2, NULL);	
INSERT INTO TEMP_DEVS_UNITS_HISTORY (LAAGER_ID, UNIT_ID, START_DATE, END_DATE, TOTAL_CAPACITY, QUANTITY_OF_RESERVOIRS, HYDROMETER_MODEL_ID) VALUES ('0280019839', 333, '2022-06-27 00:00:00',	'2023-07-28 11:34:59', 2000, 2, 2);
INSERT INTO TEMP_DEVS_UNITS_HISTORY (LAAGER_ID, UNIT_ID, START_DATE, END_DATE, TOTAL_CAPACITY, QUANTITY_OF_RESERVOIRS, HYDROMETER_MODEL_ID) VALUES ('0280019851', 332, '2022-05-17 00:00:00',	'2023-07-14 12:07:27', 26000, 8, NULL);	
INSERT INTO TEMP_DEVS_UNITS_HISTORY (LAAGER_ID, UNIT_ID, START_DATE, END_DATE, TOTAL_CAPACITY, QUANTITY_OF_RESERVOIRS, HYDROMETER_MODEL_ID) VALUES ('0280019859', 209, '2022-03-08 00:00:00',	'2023-07-14 10:13:01', 10000, 4, NULL);	
INSERT INTO TEMP_DEVS_UNITS_HISTORY (LAAGER_ID, UNIT_ID, START_DATE, END_DATE, TOTAL_CAPACITY, QUANTITY_OF_RESERVOIRS, HYDROMETER_MODEL_ID) VALUES ('0280019860', 287, '2021-12-02 00:00:00',	'2023-07-14 11:30:40', 2000, 2, NULL);	

DELIMITER //
CREATE PROCEDURE migrate_laager_hist_fix()
	BEGIN
		DECLARE	var_laager_id varchar(10);
        DECLARE var_unit_id mediumint unsigned;	
        DECLARE var_start_date datetime;
        DECLARE var_end_date datetime;
        DECLARE	var_total_capacity int unsigned DEFAULT NULL;
		DECLARE var_quantity_of_reservoirs int unsigned DEFAULT NULL;
		DECLARE var_hydrometer_model_id mediumint unsigned;
		DECLARE var_water_id mediumint unsigned;		

		DECLARE done_laager_hist_fix INT DEFAULT FALSE;

		DECLARE CURSOR_LAAGER_HIST_FIX CURSOR FOR
		SELECT DISTINCT            
		TEMP_DEVS_UNITS_HISTORY.LAAGER_ID,
        TEMP_DEVS_UNITS_HISTORY.UNIT_ID,
        TEMP_DEVS_UNITS_HISTORY.START_DATE,
        TEMP_DEVS_UNITS_HISTORY.END_DATE,       
        TEMP_DEVS_UNITS_HISTORY.TOTAL_CAPACITY,
        TEMP_DEVS_UNITS_HISTORY.QUANTITY_OF_RESERVOIRS,
        TEMP_DEVS_UNITS_HISTORY.HYDROMETER_MODEL_ID,
        WATERS.ID
                
		FROM TEMP_DEVS_UNITS_HISTORY
            LEFT JOIN WATERS ON (WATERS.UNIT_ID = TEMP_DEVS_UNITS_HISTORY.UNIT_ID);

		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done_laager_hist_fix = TRUE;
            
		START TRANSACTION;

			OPEN CURSOR_LAAGER_HIST_FIX;
			executeQueryMigrateLaagerHistFix: LOOP
			  FETCH CURSOR_LAAGER_HIST_FIX INTO              
				var_laager_id, 
                var_unit_id, 
                var_start_date, 
                var_end_date, 
                var_total_capacity, 
                var_quantity_of_reservoirs, 
                var_hydrometer_model_id, 
                var_water_id;
                
			IF done_laager_hist_fix THEN
			  LEAVE executeQueryMigrateLaagerHistFix;
			END IF;
    
      IF var_water_id IS NULL THEN		
        -- WATERS        
        INSERT INTO WATERS
          (
            HYDROMETER_MODELS_ID,
            UNIT_ID,
            TOTAL_CAPACITY,
            QUANTITY_OF_RESERVOIRS
          )
          VALUES
          (
            var_hydrometer_model_id,
            var_unit_id,
            var_total_capacity,
            var_quantity_of_reservoirs
          );
        SET var_water_id  = LAST_INSERT_ID(); 
        END IF;

        -- LAAGER_HIST
        INSERT INTO LAAGER_HIST
        (            
            LAAGER_CODE,
            WATER_ID,
            START_DATE,
            END_DATE
        )
        VALUES
        (            
            var_laager_id,
            var_water_id,
            var_start_date,
            var_end_date
        );        
         
      END LOOP executeQueryMigrateLaagerHistFix;
      CLOSE CURSOR_LAAGER_HIST_FIX;

	  COMMIT;
    END
//
DELIMITER ; 

CALL migrate_laager_hist_fix();
DROP PROCEDURE IF EXISTS migrate_laager_hist_fix;
DROP TEMPORARY TABLE IF EXISTS TEMP_DEVS_UNITS_HISTORY;

-- $$ --

CREATE INDEX IDX_END_DATE ON DAMS_AUTOMATIONS_HIST (END_DATE);
CREATE INDEX IDX_DAM_CODE ON DAMS_AUTOMATIONS_HIST (DAM_CODE(50));

CREATE INDEX IDX_END_DATE ON DACS_AUTOMATIONS_HIST (END_DATE);
CREATE INDEX IDX_DAM_CODE ON DACS_AUTOMATIONS_HIST (DAC_CODE(50));

CREATE INDEX IDX_END_DATE ON DUTS_AUTOMATION_HIST (END_DATE);
CREATE INDEX IDX_DAM_CODE ON DUTS_AUTOMATION_HIST (DUT_CODE(50));

CREATE INDEX IDX_END_DATE ON DRIS_AUTOMATIONS_HIST (END_DATE);
CREATE INDEX IDX_DAM_CODE ON DRIS_AUTOMATIONS_HIST (DRI_CODE(50));

-- $$ --

DELETE duplicate_rows FROM LAAGER AS duplicate_rows, LAAGER as l WHERE duplicate_rows.LAAGER_CODE = l.LAAGER_CODE AND duplicate_rows.ID > l.ID;

ALTER TABLE LAAGER ADD CONSTRAINT LAAGER_uk_LAAGER_CODE UNIQUE KEY (LAAGER_CODE);

-- $$ --

DROP TRIGGER AFTER_INSERT_DUTS_DUO_ASSET_HEAT_EXCHANGERS;
DELIMITER //
CREATE TRIGGER AFTER_INSERT_DUTS_DUO_ASSET_HEAT_EXCHANGERS
AFTER INSERT ON DUTS_DUO_ASSET_HEAT_EXCHANGERS FOR EACH ROW
BEGIN
    DECLARE _device_code VARCHAR(50);
    SELECT DEVICE_CODE COLLATE utf8mb4_unicode_ci INTO _device_code
    FROM DEVICES
        INNER JOIN DUTS_DEVICES ON DEVICES.ID = DUTS_DEVICES.DEVICE_ID
        INNER JOIN DUTS_DUO ON DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID
    WHERE DUTS_DUO.ID = NEW.DUT_DUO_ID COLLATE utf8mb4_unicode_ci;
    
    INSERT INTO DUTS_DUO_ASSET_HEAT_EXCHANGERS_HIST (DUT_CODE, ASSET_HEAT_EXCHANGER_ID, START_DATE)
    VALUES (_device_code, NEW.ASSET_HEAT_EXCHANGER_ID, CURRENT_TIMESTAMP());
END//
DELIMITER ;

DROP TRIGGER AFTER_UPDATE_DUTS_DUO_ASSET_HEAT_EXCHANGERS;
DELIMITER //
CREATE TRIGGER AFTER_UPDATE_DUTS_DUO_ASSET_HEAT_EXCHANGERS
AFTER UPDATE ON DUTS_DUO_ASSET_HEAT_EXCHANGERS FOR EACH ROW
BEGIN
    DECLARE _old_device_code VARCHAR(50);
    DECLARE _new_device_code VARCHAR(50);
    IF (NEW.ASSET_HEAT_EXCHANGER_ID <> OLD.ASSET_HEAT_EXCHANGER_ID OR NEW.DUT_DUO_ID <> OLD.DUT_DUO_ID) THEN
        SELECT DEVICE_CODE COLLATE utf8mb4_unicode_ci INTO _old_device_code
        FROM DEVICES
          INNER JOIN DUTS_DEVICES ON DEVICES.ID = DUTS_DEVICES.DEVICE_ID
          INNER JOIN DUTS_DUO ON DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID
        WHERE DUTS_DUO.ID = OLD.DUT_DUO_ID COLLATE utf8mb4_unicode_ci;
        
        SELECT DEVICE_CODE COLLATE utf8mb4_unicode_ci INTO _new_device_code
        FROM DEVICES
          INNER JOIN DUTS_DEVICES ON DEVICES.ID = DUTS_DEVICES.DEVICE_ID
          INNER JOIN DUTS_DUO ON DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID
        WHERE DUTS_DUO.ID = NEW.DUT_DUO_ID COLLATE utf8mb4_unicode_ci;
        
        UPDATE DUTS_DUO_ASSET_HEAT_EXCHANGERS_HIST
        SET END_DATE = CURRENT_TIMESTAMP()
        WHERE ASSET_HEAT_EXCHANGER_ID = OLD.ASSET_HEAT_EXCHANGER_ID COLLATE utf8mb4_unicode_ci AND DUT_CODE = _old_device_code COLLATE utf8mb4_unicode_ci AND END_DATE IS NULL;
        
        INSERT INTO DUTS_DUO_ASSET_HEAT_EXCHANGERS_HIST (DUT_CODE, ASSET_HEAT_EXCHANGER_ID, START_DATE)
        VALUES (_new_device_code, NEW.ASSET_HEAT_EXCHANGER_ID, CURRENT_TIMESTAMP());
    END IF;
END//
DELIMITER ;

DROP TRIGGER AFTER_DELETE_DUTS_DUO_ASSET_HEAT_EXCHANGERS;
DELIMITER //
CREATE TRIGGER AFTER_DELETE_DUTS_DUO_ASSET_HEAT_EXCHANGERS
AFTER DELETE ON DUTS_DUO_ASSET_HEAT_EXCHANGERS FOR EACH ROW
BEGIN
    DECLARE _device_code VARCHAR(50);
    SELECT DEVICE_CODE COLLATE utf8mb4_unicode_ci INTO _device_code
    FROM DEVICES
      INNER JOIN DUTS_DEVICES ON DEVICES.ID = DUTS_DEVICES.DEVICE_ID
      INNER JOIN DUTS_DUO ON DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID
    WHERE DUTS_DUO.ID = OLD.DUT_DUO_ID COLLATE utf8mb4_unicode_ci;
    
    UPDATE DUTS_DUO_ASSET_HEAT_EXCHANGERS_HIST
    SET END_DATE = CURRENT_TIMESTAMP()
    WHERE ASSET_HEAT_EXCHANGER_ID = OLD.ASSET_HEAT_EXCHANGER_ID COLLATE utf8mb4_unicode_ci AND DUT_CODE = _device_code COLLATE utf8mb4_unicode_ci AND END_DATE IS NULL;
END//
DELIMITER ;

DROP TRIGGER AFTER_INSERT_DUTS_DUO_EVAPORATORS;
DELIMITER //
CREATE TRIGGER AFTER_INSERT_DUTS_DUO_EVAPORATORS
AFTER INSERT ON DUTS_DUO_EVAPORATORS FOR EACH ROW
BEGIN
    DECLARE _device_code VARCHAR(50);
    SELECT DEVICE_CODE COLLATE utf8mb4_unicode_ci INTO _device_code
    FROM DEVICES
         INNER JOIN DUTS_DEVICES ON DEVICES.ID = DUTS_DEVICES.DEVICE_ID
         INNER JOIN DUTS_DUO ON DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID
    WHERE DUTS_DUO.ID = NEW.DUT_DUO_ID COLLATE utf8mb4_unicode_ci ;
    
    INSERT INTO DUTS_DUO_EVAPORATORS_HIST (DUT_CODE, EVAPORATOR_ID, START_DATE)
    VALUES (_device_code, NEW.EVAPORATOR_ID, CURRENT_TIMESTAMP());
END//
DELIMITER ;

DROP TRIGGER AFTER_UPDATE_DUTS_DUO_EVAPORATORS;
DELIMITER //
CREATE TRIGGER AFTER_UPDATE_DUTS_DUO_EVAPORATORS
AFTER UPDATE ON DUTS_DUO_EVAPORATORS FOR EACH ROW
BEGIN
    DECLARE _old_device_code VARCHAR(50);
    DECLARE _new_device_code VARCHAR(50);
    IF (NEW.EVAPORATOR_ID <> OLD.EVAPORATOR_ID OR NEW.DUT_DUO_ID <> OLD.DUT_DUO_ID) THEN
        SELECT DEVICE_CODE COLLATE utf8mb4_unicode_ci INTO _old_device_code
        FROM DEVICES
            INNER JOIN DUTS_DEVICES ON DEVICES.ID = DUTS_DEVICES.DEVICE_ID
            INNER JOIN DUTS_DUO ON DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID
        WHERE DUTS_DUO.ID = OLD.DUT_DUO_ID COLLATE utf8mb4_unicode_ci ;
        
        SELECT DEVICE_CODE COLLATE utf8mb4_unicode_ci INTO _new_device_code
        FROM DEVICES
            INNER JOIN DUTS_DEVICES ON DEVICES.ID = DUTS_DEVICES.DEVICE_ID
            INNER JOIN DUTS_DUO ON DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID
        WHERE DUTS_DUO.ID = NEW.DUT_DUO_ID COLLATE utf8mb4_unicode_ci ;
        
        UPDATE DUTS_DUO_EVAPORATORS_HIST
        SET END_DATE = CURRENT_TIMESTAMP()
        WHERE EVAPORATOR_ID = OLD.EVAPORATOR_ID COLLATE utf8mb4_unicode_ci  AND DUT_CODE = _old_device_code COLLATE utf8mb4_unicode_ci AND END_DATE IS NULL;
        
        INSERT INTO DUTS_DUO_EVAPORATORS_HIST (DUT_CODE, EVAPORATOR_ID, START_DATE)
        VALUES (_new_device_code, NEW.EVAPORATOR_ID, CURRENT_TIMESTAMP());
    END IF;
END//
DELIMITER ;

DROP TRIGGER AFTER_DELETE_DUTS_DUO_EVAPORATORS;
DELIMITER //
CREATE TRIGGER AFTER_DELETE_DUTS_DUO_EVAPORATORS
AFTER DELETE ON DUTS_DUO_EVAPORATORS FOR EACH ROW
BEGIN
    DECLARE _device_code VARCHAR(50);
    SELECT DEVICE_CODE COLLATE utf8mb4_unicode_ci INTO _device_code
    FROM DEVICES
        INNER JOIN DUTS_DEVICES ON DEVICES.ID = DUTS_DEVICES.DEVICE_ID
        INNER JOIN DUTS_DUO ON DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID
    WHERE DUTS_DUO.ID = OLD.DUT_DUO_ID COLLATE utf8mb4_unicode_ci ;
    
    UPDATE DUTS_DUO_EVAPORATORS_HIST
    SET END_DATE = CURRENT_TIMESTAMP()
    WHERE EVAPORATOR_ID = OLD.EVAPORATOR_ID AND DUT_CODE = _device_code COLLATE utf8mb4_unicode_ci AND END_DATE IS NULL;
END//
DELIMITER ;