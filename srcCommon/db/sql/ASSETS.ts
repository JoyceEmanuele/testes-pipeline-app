import * as sqldb from '../connectSql'
import { saveOperationLog, OperationLogData } from '../dbModifLog'
import { dbLogger } from '../../../srcCommon/helpers/logger'
import { selectDevAutMachine, selectDutIdMachine } from './MACHINES'

/* @IFHELPER:FUNC insertIgnore = INSERT IGNORE
  FROM ASSETS
*/
export async function w_insertIgnore(qPars: {
  DAT_CODE?: string | null
  MODEL?: string | null
  NAME?: string
  INSTALLATION_LOCATION?: string
  UNIT_ID?: number
  MANUFACTURER?: string | null
  INSTALLATION_DATE?: string | null
  CHILLER_CARRIER_MODEL_ID?: number | null
}, operationLogData: OperationLogData) {
  const fields: string[] = []
  if (qPars.DAT_CODE != null) { fields.push('DAT_CODE') }
  if (qPars.MODEL != null) { fields.push('MODEL') }
  if (qPars.NAME != null) { fields.push('NAME') }
  if (qPars.INSTALLATION_LOCATION != null) { fields.push('INSTALLATION_LOCATION') }
  if (qPars.UNIT_ID != null) { fields.push('UNIT_ID') }
  if (qPars.MANUFACTURER != null) { fields.push('MANUFACTURER') }
  if (qPars.INSTALLATION_DATE != null) { fields.push('INSTALLATION_DATE') }
  if (qPars.CHILLER_CARRIER_MODEL_ID != null) { fields.push('CHILLER_CARRIER_MODEL_ID') }
  if (!fields.length) throw Error('No fields to insert').HttpStatus(500).DebugInfo({ qPars })

  const sentence = `INSERT IGNORE INTO ASSETS (${fields.join(', ')}) VALUES (:${fields.join(', :')})`

  if (operationLogData) {
    await saveOperationLog('ASSETS', sentence, qPars, operationLogData);
    dbLogger('ASSETS', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

/* @IFHELPER:FUNC updateInfo = UPDATE
  FROM ASSETS
  PARAM ID: {ASSETS.ID}
*/
export async function w_updateInfo(
  qPars: {
    ID: number
    UNIT_ID?: number | null
    DAT_CODE?: string | null
    NAME?: string | null
    MANUFACTURER?: string | null
    MODEL?: string | null
    INSTALLATION_DATE?: string | null
  }, operationLogData: OperationLogData
) {
  const fields: string[] = []
  if (qPars.UNIT_ID !== undefined) { fields.push('UNIT_ID = :UNIT_ID') }
  if (qPars.DAT_CODE !== undefined) { fields.push('DAT_CODE = :DAT_CODE') }
  if (qPars.NAME !== undefined) { fields.push('NAME = :NAME') }
  if (qPars.MANUFACTURER !== undefined) { fields.push('MANUFACTURER = :MANUFACTURER') }
  if (qPars.MODEL !== undefined) { fields.push('MODEL = :MODEL') }
  if (qPars.INSTALLATION_DATE !== undefined) { fields.push('INSTALLATION_DATE = :INSTALLATION_DATE') }
  if (!fields.length) throw Error('No fields to update').HttpStatus(500).DebugInfo({ qPars })

  const sentence = `UPDATE ASSETS SET ${fields.join(', ')} WHERE ID = :ID`
  if (operationLogData) {
    await saveOperationLog('ASSETS', sentence, qPars, operationLogData);
    dbLogger('ASSETS', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

/* @IFHELPER:FUNC update = UPDATE
  PARAM ASSET_ID: {ASSETS.ASSET_ID}

  FROM ASSETS

  FIELD [[IFOWNPROP {:DAT_CODE}]] ASSETS.DAT_CODE
  FIELD [[IFOWNPROP {:UNIT_ID}]] ASSETS.UNIT_ID
  FIELD [[IFOWNPROP {:NAME}]] ASSETS.NAME
  FIELD [[IFOWNPROP {:MODEL}]] ASSETS.MODEL
  FIELD [[IFOWNPROP {:INSTALLATION_LOCATION}]] ASSETS.INSTALLATION_LOCATION

*/
export async function w_update(qPars: {
  ASSET_ID: number
  DAT_CODE?: string,
  NAME?: string,
  MODEL?: string,
  INSTALLATION_LOCATION?: string
  UNIT_ID?: number,
}, operationLogData: OperationLogData) {
  const fields: string[] = []
  if (qPars.DAT_CODE !== undefined) { fields.push('DAT_CODE = :DAT_CODE') }
  if (qPars.MODEL !== undefined) { fields.push('MODEL = :MODEL') }
  if (qPars.NAME !== undefined) { fields.push('NAME = :NAME') }
  if (qPars.INSTALLATION_LOCATION !== undefined) { fields.push('INSTALLATION_LOCATION = :INSTALLATION_DATE') }

  if (qPars.UNIT_ID !== undefined) { fields.push('UNIT_ID = :UNIT_ID') }
  if (!fields.length) throw Error('No fields to update').HttpStatus(500).DebugInfo({ qPars })

  const sentence = `UPDATE ASSETS SET ${fields.join(', ')} WHERE ID = :ASSET_ID`

  if (operationLogData) {
    await saveOperationLog('ASSETS', sentence, qPars, operationLogData);
    dbLogger('ASSETS', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

export async function w_deleteRow(qPars: { ASSET_ID: number }, _delChecks: {
  FAULTS_DATAS: true,
  HEALTH_BEFORE_OFFLINE: true,
  ASSETS_HEALTH: true,
  ASSETS_HEALTH_HIST: true,
  ASSET_IMAGES: true,
  EVAPORATORS_HEAT_EXCHANGERS: true,
  CONDENSERS_HEAT_EXCHANGERS: true,
  DACS_CONDENSERS: true,
  DACS_EVAPORATORS: true,
  AIR_CURTAINS: true,
  EVAPORATORS: true,
  CONDENSERS: true,
}, operationLogData: OperationLogData) {

  const sentence = `DELETE FROM ASSETS WHERE ASSETS.ID = :ASSET_ID`;

  if (operationLogData) {
    await saveOperationLog('ASSETS', sentence, qPars, operationLogData);
    dbLogger('ASSETS', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

export async function getAssetByDatCode(qPars: { DAT_CODE: string }) {
  const sentence = `
    SELECT
      ASSETS.ID AS ASSET_ID
    FROM 
      ASSETS
    WHERE ASSETS.DAT_CODE = :DAT_CODE
  `

  return sqldb.querySingle<{
    ASSET_ID: number
  }>(sentence, qPars)
}

/* @IFHELPER:FUNC deleteFromClient = DELETE
  PARAM CLIENT_ID: {CLUNITS.CLIENT_ID}
  FROM ASSETS
  WHERE {CLUNITS.CLIENT_ID} = {:CLIENT_ID}
*/
export async function w_deleteFromClient(qPars: { CLIENT_ID: number }, _delChecks: {
  ASSET_IMAGES: true,
  FAULTS_DATAS: true,
  HEALTH_BEFORE_OFFLINE: true,
  ASSETS_HEALTH: true,
  ASSETS_HEALTH_HIST: true,
  AIR_CURTAINS: true,
  CONDENSERS: true,
  EVAPORATORS: true,
  CONDENSERS_HEAT_EXCHANGERS: true
  EVAPORATORS_HEAT_EXCHANGER: true
}, operationLogData: OperationLogData) {

  const sentence = `
  DELETE 
    ASSETS
  FROM 
    ASSETS
    INNER JOIN CLUNITS ON (CLUNITS.UNIT_ID = ASSETS.UNIT_ID)
  WHERE CLUNITS.CLIENT_ID = :CLIENT_ID  
 `;

  if (operationLogData) {
    await saveOperationLog('ASSETS', sentence, qPars, operationLogData);
    dbLogger('ASSETS', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

/* @IFHELPER:FUNC deleteFromUnit = DELETE
  PARAM UNIT_ID: {CLUNITS.UNIT_ID}
  FROM ASSETS
  WHERE {CLUNITS.UNIT_ID} = {:UNIT_ID}
*/
export async function w_deleteFromUnit(qPars: { UNIT_ID: number }, _delChecks: {
  ASSET_IMAGES: true,
  FAULTS_DATAS: true,
  HEALTH_BEFORE_OFFLINE: true,
  ASSETS_HEALTH: true,
  ASSETS_HEALTH_HIST: true,
  CONDENSERS_HEAT_EXCHANGERS: true
  EVAPORATORS_HEAT_EXCHANGERS: true
  AIR_CURTAINS: true,
  CONDENSERS: true,
  EVAPORATORS: true,
}, operationLogData: OperationLogData) {

  const sentence = `
  DELETE 
    ASSETS
  FROM 
    ASSETS
  WHERE ASSETS.UNIT_ID = :UNIT_ID  
 `;

  if (operationLogData) {
    await saveOperationLog('ASSETS', sentence, qPars, operationLogData);
    dbLogger('ASSETS', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

/* @IFHELPER:FUNC removeClientUnits = UPDATE
  PARAM CLIENT_ID: {ASSETS.CLIENT_ID}
  FROM ASSETS
  INNER JOIN (CLUNITS.UNIT_ID = ASSETS.UNIT_ID)
  CONSTFIELD UNIT_ID = NULL
  WHERE {CLUNITS.CLIENT_ID} = {:CLIENT_ID}
*/
export async function w_removeClientUnits(qPars: { CLIENT_ID: number }, operationLogData: OperationLogData) {
  const join = " INNER JOIN CLUNITS ON (CLUNITS.UNIT_ID = ASSETS.UNIT_ID)";

  const sentence = `UPDATE ASSETS ${join} SET ASSETS.UNIT_ID = NULL WHERE CLUNITS.CLIENT_ID = :CLIENT_ID`

  if (operationLogData) {
    await saveOperationLog('ASSETS', sentence, qPars, operationLogData);
    dbLogger('ASSETS', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

/* @IFHELPER:FUNC delete = DELETE
  PARAM ID: {ASSETS.ID}
  FROM ASSETS
  WHERE {ASSETS.ID} = {:ID}
*/
export async function w_delete(qPars: { ID: number }, operationLogData: OperationLogData) {

  const sentence = `DELETE FROM ASSETS WHERE ASSETS.ID = :ID`;
  if (operationLogData) {
    await saveOperationLog('ASSETS', sentence, qPars, operationLogData);
    dbLogger('ASSETS', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}
/* @IFHELPER:FUNC removeUnit = UPDATE
  PARAM UNIT_ID: {ASSETS.UNIT_ID}
  FROM ASSETS
  CONSTFIELD UNIT_ID = NULL
  WHERE {ASSETS.UNIT_ID} = {:UNIT_ID}
*/
export async function w_removeUnit(qPars: { UNIT_ID: number }, operationLogData: OperationLogData) {

  const sentence = `UPDATE ASSETS SET UNIT_ID = NULL WHERE ASSETS.UNIT_ID = :UNIT_ID`

  if (operationLogData) {
    await saveOperationLog('ASSETS', sentence, qPars, operationLogData);
    dbLogger('ASSETS', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

export async function getBasicInfo(qPars: { DAT_CODE?: string, ASSET_ID?: number }) {
  let sentence = `
    SELECT
      ASSETS.ID AS ASSET_ID,
      ASSETS.DAT_CODE,
      CLUNITS.UNIT_ID,
      CLUNITS.CLIENT_ID,
      MACHINES.ID AS MACHINE_ID,
      CONDENSERS.MACHINE_KW
    
    FROM 
      ASSETS
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = ASSETS.UNIT_ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
      LEFT JOIN AIR_CURTAINS ON (AIR_CURTAINS.ASSET_ID = ASSETS.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN CHILLERS ON (CHILLERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN MACHINES ON MACHINES.ID = COALESCE(AIR_CURTAINS.MACHINE_ID, CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID, CHILLERS.MACHINE_ID)
  `
  const conditions: string[] = []
  if (qPars.DAT_CODE != null) conditions.push('ASSETS.DAT_CODE = :DAT_CODE')
  if (qPars.ASSET_ID != null) conditions.push('ASSETS.ID = :ASSET_ID')
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.querySingle<{
    ASSET_ID: number
    DAT_CODE: string
    UNIT_ID: number
    CLIENT_ID: number
    MACHINE_ID: number
    MACHINE_KW: number

  }>(sentence, qPars)
}

export function getListBatchInput(qPars: { clientIds?: number[], unitIds?: number[] }) {
  let sentence = `
    SELECT
      ASSETS.DAT_CODE,
      CLUNITS.UNIT_NAME,
      ASSETS.MODEL AS ASSET_MODEL,
      ASSETS.INSTALLATION_LOCATION AS ASSET_INSTALLATION_LOCATION,
      ASSETS.NAME AS ASSET_NAME,
      VTMACHINETYPES.ID AS ASSET_ROLE,
      VTMACHINETYPES.NAME AS ASSET_ROLE_NAME,
      CASE
        WHEN EVAPORATORS.CAPACITY_POWER IS NOT NULL THEN EVAPORATORS.CAPACITY_POWER
        WHEN CONDENSERS.CAPACITY_POWER IS NOT NULL THEN CONDENSERS.CAPACITY_POWER
        WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER
        ELSE NULL
      END AS ASSET_CAPACITY_POWER,
      CASE
        WHEN EVAPORATORS.CAPACITY_UNIT IS NOT NULL THEN EVAPORATORS.CAPACITY_UNIT
        WHEN CONDENSERS.CAPACITY_UNIT IS NOT NULL THEN CONDENSERS.CAPACITY_UNIT
        WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT
        ELSE NULL
      END AS ASSET_CAPACITY_UNIT,
      CASE
        WHEN CONDENSERS.MACHINE_KW IS NOT NULL THEN CONDENSERS.MACHINE_KW
        WHEN EVAPORATORS.MACHINE_KW IS NOT NULL THEN EVAPORATORS.MACHINE_KW
        WHEN ASSET_HEAT_EXCHANGERS.MACHINE_KW IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.MACHINE_KW
        ELSE NULL
      END AS MACHINE_KW,
      MACHINES.ID AS MACHINE_ID,
      MACHINES.NAME AS MACHINE_NAME,
      MACHINES.TYPE AS MACHINE_TYPE,
      MACHINES.APPLICATION AS MACHINE_APPLICATION,
      MACHINES.BRAND AS MACHINE_BRAND,
      MACHINES.FLUID_TYPE AS MACHINE_FLUID_TYPE,
      MACHINES.INSTALLATION_DATE AS MACHINE_INSTALLATION_DATE,
      ${selectDevAutMachine} as DEV_AUT,
      ${selectDutIdMachine} as DUT_ID

  `
  sentence += `
    FROM
      ASSETS
      LEFT JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
      LEFT JOIN AIR_CURTAINS ON (AIR_CURTAINS.ASSET_ID = ASSETS.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN CHILLERS ON (CHILLERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN MACHINES ON MACHINES.ID = COALESCE(AIR_CURTAINS.MACHINE_ID, CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID, CHILLERS.MACHINE_ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = ASSETS.UNIT_ID)
      LEFT JOIN VTMACHINETYPES ON VTMACHINETYPES.ID = CASE
        WHEN CHILLERS.ASSET_ID IS NOT NULL THEN 5
        WHEN ASSET_HEAT_EXCHANGERS.ASSET_ID IS NOT NULL THEN 4
        WHEN AIR_CURTAINS.ASSET_ID IS NOT NULL THEN 3
        WHEN CONDENSERS.ASSET_ID IS NOT NULL THEN 2
        WHEN EVAPORATORS.ASSET_ID IS NOT NULL THEN 1
        ELSE NULL
      END
  `

  const conditions: string[] = []
  if (qPars.clientIds) { conditions.push(`CLUNITS.CLIENT_ID IN (:clientIds)`) }
  if (qPars.unitIds) { conditions.push(`ASSETS.UNIT_ID IN (:unitIds)`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    DAT_CODE: string
    UNIT_NAME: string
    ASSET_MODEL: string
    ASSET_INSTALLATION_LOCATION: string
    ASSET_NAME: string
    ASSET_ROLE: string
    ASSET_ROLE_NAME: string
    ASSET_CAPACITY_POWER: number
    ASSET_CAPACITY_UNIT: string
    MACHINE_KW: number
    MACHINE_ID: string
    MACHINE_NAME: string
    MACHINE_TYPE: string
    MACHINE_APPLICATION: string
    MACHINE_BRAND: string
    MACHINE_FLUID_TYPE: string
    MACHINE_INSTALLATION_DATE: string
    MACHINE_DEV_AUT: string
    MACHINE_DUT_ID: string
  }>(sentence, qPars)
}

export function getAssetsList_dacsAndAssets(qPars: {
  clientIds?: number[],
  stateIds?: string[],
  cityIds?: string[],
  unitIds?: number[],
  machineIds?: number[],
  datId?: string,
  healthIndex?: number[],
  INCLUDE_INSTALLATION_UNIT?: boolean,
  assetId?: number,
  machineScreen?: boolean
}, admPars: {
  addUnownedDevs?: boolean
}) {
  let sentence = `
    SELECT
      ASSETS.DAT_CODE AS DAT_ID,
      CLUNITS.CLIENT_ID,
      MACHINES.ID AS GROUP_ID,
      CLUNITS.UNIT_ID,
      ASSETS.NAME AS AST_DESC,
      NULL AS AST_TYPE,
      MACHINES.INSTALLATION_DATE,
      VTMACHINETYPES.ID AS AST_ROLE,
      MACHINES.BRAND AS MCHN_BRAND,
      CASE
        WHEN EVAPORATORS.CAPACITY_POWER IS NOT NULL THEN EVAPORATORS.CAPACITY_POWER
        WHEN CONDENSERS.CAPACITY_POWER IS NOT NULL THEN CONDENSERS.CAPACITY_POWER
        WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER
        ELSE NULL
      END AS CAPACITY_PWR,
      CASE
        WHEN EVAPORATORS.CAPACITY_UNIT IS NOT NULL THEN EVAPORATORS.CAPACITY_UNIT
        WHEN CONDENSERS.CAPACITY_UNIT IS NOT NULL THEN CONDENSERS.CAPACITY_UNIT
        WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT
        ELSE NULL
      END AS CAPACITY_UNIT,
      MACHINES.FLUID_TYPE,
      ASSETS.MODEL AS MCHN_MODEL,
      VTMACHINETYPES.NAME AS AST_ROLE_NAME,
      MACHINES.NAME AS GROUP_NAME,
      ${selectDevAutMachine} as DEV_AUT,
      ${selectDutIdMachine} as DUT_ID,
      CLUNITS.UNIT_NAME,
      CLIENTS.NAME AS CLIENT_NAME,
      CITY.NAME AS CITY_NAME,
      STATEREGION.NAME AS STATE_ID,
      ASSETS_HEALTH_HIST.H_INDEX,
      TIME_ZONES.ID AS TIMEZONE_ID,
      TIME_ZONES.AREA AS TIMEZONE_AREA,
      TIME_ZONES.TIME_ZONE_OFFSET AS TIMEZONE_OFFSET,
      ASSETS.ID AS ASSET_ID
  `
  sentence += `
    FROM
      ASSETS
      LEFT JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
      LEFT JOIN AIR_CURTAINS ON (AIR_CURTAINS.ASSET_ID = ASSETS.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN CHILLERS ON (CHILLERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN MACHINES ON MACHINES.ID = COALESCE(AIR_CURTAINS.MACHINE_ID, CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID, CHILLERS.MACHINE_ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = ASSETS.UNIT_ID)
      LEFT JOIN TIME_ZONES ON (TIME_ZONES.ID = CLUNITS.TIMEZONE_ID)
      LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = CLUNITS.CLIENT_ID)
      LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
      LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
      LEFT JOIN VTMACHINETYPES ON VTMACHINETYPES.ID = CASE
        WHEN CHILLERS.ASSET_ID IS NOT NULL THEN 5
        WHEN ASSET_HEAT_EXCHANGERS.ASSET_ID IS NOT NULL THEN 4
        WHEN AIR_CURTAINS.ASSET_ID IS NOT NULL THEN 3
        WHEN CONDENSERS.ASSET_ID IS NOT NULL THEN 2
        WHEN EVAPORATORS.ASSET_ID IS NOT NULL THEN 1
        ELSE NULL
      END
      LEFT JOIN ASSETS_HEALTH ON (ASSETS_HEALTH.ASSET_ID = ASSETS.ID)
      LEFT JOIN ASSETS_HEALTH_HIST ON (ASSETS_HEALTH_HIST.ID = ASSETS_HEALTH.HEALTH_HIST_ID)
  `

  const conditions: string[] = []
  if (qPars.machineScreen) {
    sentence += `
      LEFT JOIN NOBREAKS ON (NOBREAKS.ASSET_ID = ASSETS.ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.CONDENSER_ID = CONDENSERS.ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
      LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = COALESCE(DACS_CONDENSERS.DAC_DEVICE_ID, DACS_EVAPORATORS.DAC_DEVICE_ID, DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID))
    `
    conditions.push('NOBREAKS.ID IS NULL AND DACS_DEVICES.ID IS NULL')
  }
  if (qPars.clientIds?.length && admPars.addUnownedDevs) { conditions.push(`(CLUNITS.CLIENT_ID IN (:clientIds) OR CLUNITS.CLIENT_ID IS NULL)`) }
  if (qPars.clientIds?.length && !admPars.addUnownedDevs) { conditions.push(`(CLUNITS.CLIENT_ID IN (:clientIds))`) }
  if (qPars.stateIds?.length) { conditions.push(`STATEREGION.ID IN (:stateIds)`) }
  if (qPars.cityIds?.length) { conditions.push(`CLUNITS.CITY_ID IN (:cityIds)`) }
  if (qPars.unitIds?.length) { conditions.push(`ASSETS.UNIT_ID IN (:unitIds)`) }
  if (qPars.machineIds?.length) { conditions.push(`MACHINES.ID IN (:machineIds)`) }
  if (qPars.datId !== undefined) { conditions.push(`ASSETS.DAT_CODE = :datId`) }
  if (qPars.assetId !== undefined) { conditions.push(`ASSETS.ID = :assetId`) }
  if (qPars.healthIndex?.length) { conditions.push(`ASSETS_HEALTH_HIST.H_INDEX IN (:healthIndex)`) }
  if (qPars.INCLUDE_INSTALLATION_UNIT === false) { conditions.push(`CLUNITS.PRODUCTION = 1`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  sentence += ` GROUP BY ASSETS.DAT_CODE, ASSETS_HEALTH_HIST.H_INDEX, CLUNITS.CLIENT_ID, CLUNITS.UNIT_ID, MACHINES.ID, ASSETS.NAME, ASSETS.MODEL, VTMACHINETYPES.ID, EVAPORATORS.CAPACITY_POWER, CONDENSERS.CAPACITY_POWER, EVAPORATORS.CAPACITY_UNIT, CONDENSERS.CAPACITY_UNIT, MACHINES.INSTALLATION_DATE, VTMACHINETYPES.ID,
  MACHINES.BRAND, MACHINES.FLUID_TYPE, ASSETS.MODEL, VTMACHINETYPES.NAME, MACHINES.NAME, CLUNITS.UNIT_NAME, CLIENTS.NAME, CITY.NAME, STATEREGION.NAME, TIME_ZONES.ID, TIME_ZONES.AREA, TIME_ZONES.TIME_ZONE_OFFSET, ASSETS.ID
  `;

  return sqldb.query<{
    DAT_ID: string
    CLIENT_ID: number
    GROUP_ID: number
    UNIT_ID: number
    AST_DESC: string
    AST_TYPE: string
    INSTALLATION_DATE: string
    AST_ROLE: number
    AST_ROLE_NAME: string
    MCHN_BRAND: string,
    CAPACITY_PWR: number,
    CAPACITY_UNIT: string,
    FLUID_TYPE: string,
    MCHN_MODEL: string,
    GROUP_NAME: string,
    DEV_AUT: string
    DUT_ID: string
    UNIT_NAME: string
    CLIENT_NAME: string
    CITY_NAME: string
    STATE_ID: string
    H_INDEX: number
    TIMEZONE_ID: number
    TIMEZONE_AREA: string
    TIMEZONE_OFFSET: number
    ASSET_ID: number
  }>(sentence, qPars)
}

export function getAssetInfo(qPars: { ASSET_ID?: number, DAT_CODE?: string, DEV_ID?: string, DAT_INDEX?: number, ASSET_NAME?: string, withDev?: boolean, MACHINE_ID?: number  }) {
  let sentence = `
    SELECT
      ASSETS.ID AS ASSET_ID,
      ASSETS.DAT_CODE as DAT_ID,
      ASSETS.NAME AST_DESC,
      NULL AS AST_TYPE,
      CASE
        WHEN EVAPORATORS.CAPACITY_POWER IS NOT NULL THEN EVAPORATORS.CAPACITY_POWER
        WHEN CONDENSERS.CAPACITY_POWER IS NOT NULL THEN CONDENSERS.CAPACITY_POWER
        WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER
        ELSE NULL
      END AS CAPACITY_PWR,
      CASE
        WHEN EVAPORATORS.CAPACITY_UNIT IS NOT NULL THEN EVAPORATORS.CAPACITY_UNIT
        WHEN CONDENSERS.CAPACITY_UNIT IS NOT NULL THEN CONDENSERS.CAPACITY_UNIT
        WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT
        ELSE NULL
      END AS CAPACITY_UNIT,
      CASE
        WHEN CONDENSERS.MACHINE_KW IS NOT NULL THEN CONDENSERS.MACHINE_KW
        WHEN EVAPORATORS.MACHINE_KW IS NOT NULL THEN EVAPORATORS.MACHINE_KW
        WHEN ASSET_HEAT_EXCHANGERS.MACHINE_KW IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.MACHINE_KW
        ELSE NULL
      END AS MCHN_KW,
      CASE
        WHEN CONDENSERS.COMPRESSOR_NOMINAL_CURRENT IS NOT NULL THEN CONDENSERS.COMPRESSOR_NOMINAL_CURRENT
        WHEN EVAPORATORS.COMPRESSOR_NOMINAL_CURRENT IS NOT NULL THEN EVAPORATORS.COMPRESSOR_NOMINAL_CURRENT
        WHEN ASSET_HEAT_EXCHANGERS.COMPRESSOR_NOMINAL_CURRENT IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.COMPRESSOR_NOMINAL_CURRENT
        ELSE NULL
      END AS COMPRESSOR_NOMINAL_CURRENT,
      CASE
        WHEN CONDENSERS.EQUIPMENT_POWER IS NOT NULL THEN CONDENSERS.EQUIPMENT_POWER
        WHEN EVAPORATORS.EQUIPMENT_POWER IS NOT NULL THEN EVAPORATORS.EQUIPMENT_POWER
        WHEN ASSET_HEAT_EXCHANGERS.EQUIPMENT_POWER IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.EQUIPMENT_POWER
        ELSE NULL
      END AS EQUIPMENT_POWER,
      CASE
        WHEN CONDENSERS.INSUFFLATION_SPEED IS NOT NULL THEN CONDENSERS.INSUFFLATION_SPEED
        WHEN EVAPORATORS.INSUFFLATION_SPEED IS NOT NULL THEN EVAPORATORS.INSUFFLATION_SPEED
      ELSE NULL
      END AS INSUFFLATION_SPEED_INPUT,
      ASSETS.MODEL AS MCHN_MODEL,
      ASSETS.UNIT_ID,
      MACHINES.INSTALLATION_DATE AS INSTALLATION_DATE,
      ASSETS.INSTALLATION_LOCATION AS INSTALLATION_LOCATION,
      VTMACHINETYPES.ID AS AST_ROLE,
      VTMACHINETYPES.NAME AS AST_ROLE_NAME,
      MACHINES.ID AS GROUP_ID,
      MACHINES.NAME as GROUP_NAME,
      MACHINES.FLUID_TYPE AS FLUID_TYPE,
      MACHINES.APPLICATION AS MCHN_APPL,
      MACHINES.BRAND AS MCHN_BRAND,
      CASE
        WHEN CONDENSERS.EVAPORATOR_MODEL_ID IS NOT NULL THEN CONDENSERS.EVAPORATOR_MODEL_ID
        WHEN EVAPORATORS.EVAPORATOR_MODEL_ID IS NOT NULL THEN EVAPORATORS.EVAPORATOR_MODEL_ID
        WHEN ASSET_HEAT_EXCHANGERS.EVAPORATOR_MODEL_ID IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.EVAPORATOR_MODEL_ID
        ELSE NULL
      END AS EVAPORATOR_MODEL_ID,
      EVAPORATORS_MODELS.EVAPORATOR_MODEL,
      EVAPORATORS_MODELS.INSUFFLATION_SPEED,
      NULL AS MCHN_ENV,
      CLUNITS.UNIT_NAME,
      CLUNITS.CLIENT_ID,
      CLIENTS.NAME AS CLIENT_NAME,
      CITY.NAME AS CITY_NAME,
      STATEREGION.NAME AS STATE_ID,
      TIME_ZONES.ID AS TIMEZONE_ID,
      TIME_ZONES.AREA AS TIMEZONE_AREA,
      TIME_ZONES.TIME_ZONE_OFFSET AS TIMEZONE_OFFSET,
  `
  if (qPars.DEV_ID != null || qPars.DAT_INDEX != null || qPars.withDev) {
    sentence += ` 
      CASE 
        WHEN DACS_CONDENSERS.ID THEN DACS_CONDENSERS.ID
        WHEN DACS_EVAPORATORS.ID THEN DACS_EVAPORATORS.ID
        WHEN DACS_ASSET_HEAT_EXCHANGERS.ID THEN DACS_ASSET_HEAT_EXCHANGERS.ID
        WHEN DRIS_ASSET_HEAT_EXCHANGERS.ID THEN DRIS_ASSET_HEAT_EXCHANGERS.ID
        WHEN DRIS_CHILLERS.ID THEN DRIS_CHILLERS.ID
        ELSE NULL
      END AS DEV_CLIENT_ASSET_ID,
      CASE
        WHEN EVAPORATORS.ID IS NOT NULL THEN EVAPORATORS.ID
        WHEN CONDENSERS.ID IS NOT NULL THEN CONDENSERS.ID
        WHEN ASSET_HEAT_EXCHANGERS.ID IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.ID
        ELSE NULL
      END AS DAT_INDEX,
      DEVICES.DEVICE_CODE AS DEV_ID
    `
  }
  else {
    sentence += `
      NULL AS DEV_CLIENT_ASSET_ID,
      NULL AS DAT_INDEX,
      NULL AS DEV_ID
    `
  }
  sentence += `
    FROM
      ASSETS 
      LEFT JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
      LEFT JOIN AIR_CURTAINS ON (AIR_CURTAINS.ASSET_ID = ASSETS.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN CHILLERS ON (CHILLERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN EVAPORATORS_MODELS ON (EVAPORATORS_MODELS.ID = COALESCE(EVAPORATORS.EVAPORATOR_MODEL_ID, CONDENSERS.EVAPORATOR_MODEL_ID, ASSET_HEAT_EXCHANGERS.EVAPORATOR_MODEL_ID))
      LEFT JOIN MACHINES ON MACHINES.ID = COALESCE(AIR_CURTAINS.MACHINE_ID, CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID, CHILLERS.MACHINE_ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = ASSETS.UNIT_ID)
      LEFT JOIN TIME_ZONES ON (TIME_ZONES.ID = CLUNITS.TIMEZONE_ID)
      LEFT JOIN VTMACHINETYPES ON VTMACHINETYPES.ID = CASE
        WHEN CHILLERS.ASSET_ID IS NOT NULL THEN 5
        WHEN ASSET_HEAT_EXCHANGERS.ASSET_ID IS NOT NULL THEN 4
        WHEN AIR_CURTAINS.ASSET_ID IS NOT NULL THEN 3
        WHEN CONDENSERS.ASSET_ID IS NOT NULL THEN 2
        WHEN EVAPORATORS.ASSET_ID IS NOT NULL THEN 1
        ELSE NULL
      END
      LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
      LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
      LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = CLUNITS.CLIENT_ID)
  `
  if (qPars.DEV_ID != null || qPars.DAT_INDEX != null || qPars.withDev) {
    sentence += ` 
    LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.CONDENSER_ID = CONDENSERS.ID)
    LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
    LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
    LEFT JOIN DRIS_ASSET_HEAT_EXCHANGERS ON (DRIS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
    LEFT JOIN DRIS_CHILLERS ON (DRIS_CHILLERS.CHILLER_ID = CHILLERS.ID)
    LEFT JOIN DUTS_DUO_EVAPORATORS ON (DUTS_DUO_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
    LEFT JOIN DUTS_DUO_ASSET_HEAT_EXCHANGERS ON (DUTS_DUO_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
    LEFT JOIN DUTS_DUO_AIR_CURTAINS ON (DUTS_DUO_AIR_CURTAINS.AIR_CURTAIN_ID = AIR_CURTAINS.ID)
    LEFT JOIN DUTS_DUO_CONDENSERS ON (DUTS_DUO_CONDENSERS.CONDENSER_ID = CONDENSERS.ID)
    LEFT JOIN DUTS_DUO ON (DUTS_DUO.ID = COALESCE(DUTS_DUO_ASSET_HEAT_EXCHANGERS.DUT_DUO_ID, DUTS_DUO_EVAPORATORS.DUT_DUO_ID, DUTS_DUO_AIR_CURTAINS.DUT_DUO_ID, DUTS_DUO_CONDENSERS.DUT_DUO_ID))
    LEFT JOIN DUTS_DEVICES ON (DUTS_DUO.DUT_DEVICE_ID = DUTS_DEVICES.ID)
    LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = COALESCE(DACS_CONDENSERS.DAC_DEVICE_ID, DACS_EVAPORATORS.DAC_DEVICE_ID, DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID))
    LEFT JOIN DRIS_DEVICES ON (DRIS_DEVICES.ID = COALESCE(DRIS_ASSET_HEAT_EXCHANGERS.DRI_DEVICE_ID, DRIS_CHILLERS.DRI_DEVICE_ID))
    LEFT JOIN DEVICES ON (DEVICES.ID = COALESCE(DACS_DEVICES.DEVICE_ID, DRIS_DEVICES.DEVICE_ID, DUTS_DEVICES.DEVICE_ID))
  `
  }
  const conditions: string[] = []
  if (qPars.DAT_CODE != null) { conditions.push(`ASSETS.DAT_CODE = :DAT_CODE`) }
  if (qPars.ASSET_NAME != null) { conditions.push(`ASSETS.NAME = :ASSET_NAME`) }
  if (qPars.ASSET_ID != null) { conditions.push(`ASSETS.ID = :ASSET_ID`) }
  if (qPars.DEV_ID != null) { conditions.push(`DEVICES.DEVICE_CODE = :DEV_ID AND COALESCE(DACS_CONDENSERS.ID, DACS_EVAPORATORS.ID, DACS_ASSET_HEAT_EXCHANGERS.ID, DRIS_ASSET_HEAT_EXCHANGERS.ID, DRIS_CHILLERS.ID, DUTS_DUO.ID) IS NOT NULL`) }
  if (qPars.DAT_INDEX != null) { conditions.push(`COALESCE(CONDENSERS.ID, EVAPORATORS.ID, ASSET_HEAT_EXCHANGERS.ID) = :DAT_INDEX AND COALESCE(DACS_CONDENSERS.ID, DACS_EVAPORATORS.ID, DACS_ASSET_HEAT_EXCHANGERS.ID, DRIS_ASSET_HEAT_EXCHANGERS.ID, DRIS_CHILLERS.ID, DUTS_DUO.ID) IS NOT NULL`) }
  if (qPars.MACHINE_ID != null) { conditions.push(`MACHINES.ID = :MACHINE_ID`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }
  sentence += ' GROUP BY ASSETS.DAT_CODE'
  return sqldb.querySingle<{
    ASSET_ID: number
    DAT_ID: string
    AST_DESC: string
    INSTALLATION_LOCATION: string
    AST_TYPE: string
    CAPACITY_PWR: number
    CAPACITY_UNIT: string
    CLIENT_ID: number
    MCHN_KW: number
    FLUID_TYPE: string
    GROUP_ID: number
    MCHN_APPL: string
    MCHN_BRAND: string
    MCHN_ENV: string
    MCHN_MODEL: string
    UNIT_ID: number
    INSTALLATION_DATE: string
    AST_ROLE: number
    AST_ROLE_NAME: string
    GROUP_NAME: string
    UNIT_NAME: string
    CLIENT_NAME: string
    CITY_NAME: string
    STATE_ID: string
    DEV_CLIENT_ASSET_ID: number
    DAT_INDEX: number
    DEV_ID: string
    EQUIPMENT_POWER: string
    COMPRESSOR_NOMINAL_CURRENT: number
    EVAPORATOR_MODEL: string
    EVAPORATOR_MODEL_ID: number
    INSUFFLATION_SPEED: number
    INSUFFLATION_SPEED_INPUT: number
    TIMEZONE_ID: number
    TIMEZONE_AREA: string
    TIMEZONE_OFFSET: number
  }>(sentence, qPars)
}

export function getAssetInfoList(qPars: { ASSET_ID?: number, DAT_CODE?: string, DEV_ID?: string, DAT_INDEX?: number, ASSET_NAME?: string, withDev?: boolean, MACHINE_ID?: number  }) {
  let sentence = `
    SELECT
      ASSETS.ID AS ASSET_ID,
      ASSETS.DAT_CODE as DAT_ID,
      ASSETS.NAME AST_DESC,
      NULL AS AST_TYPE,
      CASE
        WHEN EVAPORATORS.CAPACITY_POWER IS NOT NULL THEN EVAPORATORS.CAPACITY_POWER
        WHEN CONDENSERS.CAPACITY_POWER IS NOT NULL THEN CONDENSERS.CAPACITY_POWER
        WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER
        ELSE NULL
      END AS CAPACITY_PWR,
      CASE
        WHEN EVAPORATORS.CAPACITY_UNIT IS NOT NULL THEN EVAPORATORS.CAPACITY_UNIT
        WHEN CONDENSERS.CAPACITY_UNIT IS NOT NULL THEN CONDENSERS.CAPACITY_UNIT
        WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT
        ELSE NULL
      END AS CAPACITY_UNIT,
      CASE
        WHEN CONDENSERS.MACHINE_KW IS NOT NULL THEN CONDENSERS.MACHINE_KW
        WHEN EVAPORATORS.MACHINE_KW IS NOT NULL THEN EVAPORATORS.MACHINE_KW
        WHEN ASSET_HEAT_EXCHANGERS.MACHINE_KW IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.MACHINE_KW
        ELSE NULL
      END AS MCHN_KW,
      ASSETS.MODEL AS MCHN_MODEL,
      ASSETS.UNIT_ID,
      MACHINES.INSTALLATION_DATE AS INSTALLATION_DATE,
      ASSETS.INSTALLATION_LOCATION AS INSTALLATION_LOCATION,
      VTMACHINETYPES.ID AS AST_ROLE,
      VTMACHINETYPES.NAME AS AST_ROLE_NAME,
      MACHINES.ID AS GROUP_ID,
      MACHINES.NAME as GROUP_NAME,
      MACHINES.FLUID_TYPE AS FLUID_TYPE,
      MACHINES.APPLICATION AS MCHN_APPL,
      MACHINES.BRAND AS MCHN_BRAND,
      NULL AS MCHN_ENV,
      CLUNITS.UNIT_NAME,
      CLUNITS.CLIENT_ID,
      CLIENTS.NAME AS CLIENT_NAME,
      CITY.NAME AS CITY_NAME,
      STATEREGION.NAME AS STATE_ID,
  `

  if (qPars.DEV_ID != null || qPars.DAT_INDEX != null || qPars.withDev) {
    sentence += ` 
      CASE 
        WHEN DACS_CONDENSERS.ID THEN DACS_CONDENSERS.ID
        WHEN DACS_EVAPORATORS.ID THEN DACS_EVAPORATORS.ID
        WHEN DACS_ASSET_HEAT_EXCHANGERS.ID THEN DACS_ASSET_HEAT_EXCHANGERS.ID
        ELSE NULL
      END AS DEV_CLIENT_ASSET_ID,
      CASE
        WHEN EVAPORATORS.ID IS NOT NULL THEN EVAPORATORS.ID
        WHEN CONDENSERS.ID IS NOT NULL THEN CONDENSERS.ID
        WHEN ASSET_HEAT_EXCHANGERS.ID IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.ID
        ELSE NULL
      END AS DAT_INDEX,
      DEVICES.DEVICE_CODE AS DEV_ID
    `
  }
  else {
    sentence += `
      NULL AS DEV_CLIENT_ASSET_ID,
      NULL AS DAT_INDEX,
      NULL AS DEV_ID
    `
  }

  sentence += `
    FROM
      ASSETS 
      LEFT JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
      LEFT JOIN AIR_CURTAINS ON (AIR_CURTAINS.ASSET_ID = ASSETS.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN CHILLERS ON (CHILLERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN MACHINES ON MACHINES.ID = COALESCE(AIR_CURTAINS.MACHINE_ID, CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID, CHILLERS.MACHINE_ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = ASSETS.UNIT_ID)
      LEFT JOIN VTMACHINETYPES ON VTMACHINETYPES.ID = CASE
        WHEN CHILLERS.ASSET_ID IS NOT NULL THEN 5
        WHEN ASSET_HEAT_EXCHANGERS.ASSET_ID IS NOT NULL THEN 4
        WHEN AIR_CURTAINS.ASSET_ID IS NOT NULL THEN 3
        WHEN CONDENSERS.ASSET_ID IS NOT NULL THEN 2
        WHEN EVAPORATORS.ASSET_ID IS NOT NULL THEN 1
        ELSE NULL
      END
      LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
      LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
      LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = CLUNITS.CLIENT_ID)
  `

  if (qPars.DEV_ID != null || qPars.DAT_INDEX != null || qPars.withDev) {
    sentence += ` 
    LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.CONDENSER_ID = CONDENSERS.ID)
    LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
    LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
    LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = COALESCE(DACS_CONDENSERS.DAC_DEVICE_ID, DACS_EVAPORATORS.DAC_DEVICE_ID, DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID))
    LEFT JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
  `
  }

  const conditions: string[] = []
  if (qPars.DAT_CODE != null) { conditions.push(`ASSETS.DAT_CODE = :DAT_CODE`) }
  if (qPars.ASSET_NAME != null) { conditions.push(`ASSETS.NAME = :ASSET_NAME`) }
  if (qPars.ASSET_ID != null) { conditions.push(`ASSETS.ID = :ASSET_ID`) }
  if (qPars.DEV_ID != null) { conditions.push(`DEVICES.DEVICE_CODE = :DEV_ID AND COALESCE(DACS_CONDENSERS.ID, DACS_EVAPORATORS.ID,  DACS_ASSET_HEAT_EXCHANGERS) IS NOT NULL`) }
  if (qPars.DAT_INDEX != null) { conditions.push(`COALESCE(CONDENSERS.ID, EVAPORATORS.ID, ASSET_HEAT_EXCHANGERS.ID) =:DAT_INDEX AND COALESCE(DACS_CONDENSERS.ID, DACS_EVAPORATORS.ID,  DACS_ASSET_HEAT_EXCHANGERS) IS NOT NULL`) }
  if (qPars.MACHINE_ID != null) { conditions.push(`MACHINES.ID = :MACHINE_ID`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    ASSET_ID: number
    DAT_ID: string
    AST_DESC: string
    INSTALLATION_LOCATION: string
    AST_TYPE: string
    CAPACITY_PWR: number
    CAPACITY_UNIT: string
    CLIENT_ID: number
    MCHN_KW: number
    FLUID_TYPE: string
    GROUP_ID: number
    MCHN_APPL: string
    MCHN_BRAND: string
    MCHN_ENV: string
    MCHN_MODEL: string
    UNIT_ID: number
    INSTALLATION_DATE: string
    AST_ROLE: number
    AST_ROLE_NAME: string
    GROUP_NAME: string
    UNIT_NAME: string
    CLIENT_NAME: string
    CITY_NAME: string
    STATE_ID: string
    DEV_CLIENT_ASSET_ID: number
    DAT_INDEX: number
    DEV_ID: string
  }>(sentence, qPars)
}


export function getAssetsList(qPars: {
  clientIds?: number[],
  stateIds?: string[],
  cityIds?: string[],
  unitIds?: number[],
  MACHINE_ID?: number,
  SKIP?: number,
  LIMIT?: number,
  machineIds?: number[],
}, admPars: {
  addUnownedDevs?: boolean
}) {
  let sentence = `
        WITH CTE_ASSETS AS (
      SELECT
        CONDENSERS.ID AS ID,
        CONDENSERS.ASSET_ID,
        CONDENSERS.MACHINE_ID,
        CONDENSERS.CAPACITY_POWER,
        CONDENSERS.CAPACITY_UNIT,
        CONDENSERS.MACHINE_KW,
        2 AS AST_ROLE_ID,
        DACS_CONDENSERS.ID AS DEV_CLIENT_ASSET_ID,
        DACS_CONDENSERS.DAC_DEVICE_ID,
        NULL as DRI_DEVICE_ID,
        DUTS_DUO.DUT_DEVICE_ID,
        NULL AS CHILLER_CARRIER_MODEL_ID
      FROM
        CONDENSERS
        LEFT JOIN DUTS_DUO_CONDENSERS ON (DUTS_DUO_CONDENSERS.CONDENSER_ID = CONDENSERS.ID)
        LEFT JOIN DUTS_DUO ON (DUTS_DUO.ID = DUTS_DUO_CONDENSERS.DUT_DUO_ID)
        LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.CONDENSER_ID = CONDENSERS.ID)
      UNION
      SELECT
        EVAPORATORS.ID AS ID,
        EVAPORATORS.ASSET_ID,
        EVAPORATORS.MACHINE_ID,
        EVAPORATORS.CAPACITY_POWER,
        EVAPORATORS.CAPACITY_UNIT,
        EVAPORATORS.MACHINE_KW,
        1 AS AST_ROLE_ID,
        DACS_EVAPORATORS.ID AS DEV_CLIENT_ASSET_ID,
        DACS_EVAPORATORS.DAC_DEVICE_ID,
        NULL as DRI_DEVICE_ID,
        DUTS_DUO.DUT_DEVICE_ID,
        NULL AS CHILLER_CARRIER_MODEL_ID
      FROM
        EVAPORATORS
        LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
        LEFT JOIN DUTS_DUO_EVAPORATORS ON (DUTS_DUO_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
        LEFT JOIN DUTS_DUO ON (DUTS_DUO.ID = DUTS_DUO_EVAPORATORS.DUT_DUO_ID)
      UNION
      SELECT
        AIR_CURTAINS.ID AS ID,
        AIR_CURTAINS.ASSET_ID,
        AIR_CURTAINS.MACHINE_ID,
        NULL AS CAPACITY_POWER,
        NULL AS CAPACITY_UNIT,
        NULL AS MACHINE_KW,
        3 AS AST_ROLE_ID,
        NULL AS DEV_CLIENT_ASSET_ID,
        NULL AS DAC_DEVICE_ID,
        NULL as DRI_DEVICE_ID,
        DUTS_DUO.DUT_DEVICE_ID,
        NULL AS CHILLER_CARRIER_MODEL_ID
      FROM
        AIR_CURTAINS
        LEFT JOIN DUTS_DUO_AIR_CURTAINS ON (DUTS_DUO_AIR_CURTAINS.AIR_CURTAIN_ID = AIR_CURTAINS.ID)
        LEFT JOIN DUTS_DUO ON (DUTS_DUO.ID = DUTS_DUO_AIR_CURTAINS.DUT_DUO_ID)
      UNION
      SELECT
        ASSET_HEAT_EXCHANGERS.ID AS ID,
        ASSET_HEAT_EXCHANGERS.ASSET_ID,
        ASSET_HEAT_EXCHANGERS.MACHINE_ID,
        ASSET_HEAT_EXCHANGERS.CAPACITY_POWER,
        ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT,
        ASSET_HEAT_EXCHANGERS.MACHINE_KW,
        4 AS AST_ROLE_ID,
        DACS_ASSET_HEAT_EXCHANGERS.ID AS DEV_CLIENT_ASSET_ID,
        DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID,
        DRIS_ASSET_HEAT_EXCHANGERS.DRI_DEVICE_ID,
        DUTS_DUO.DUT_DEVICE_ID,
        NULL AS CHILLER_CARRIER_MODEL_ID
      FROM
        ASSET_HEAT_EXCHANGERS
        LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
        LEFT JOIN DUTS_DUO_ASSET_HEAT_EXCHANGERS ON (DUTS_DUO_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
        LEFT JOIN DUTS_DUO ON (DUTS_DUO.ID = DUTS_DUO_ASSET_HEAT_EXCHANGERS.DUT_DUO_ID)
        LEFT JOIN DRIS_ASSET_HEAT_EXCHANGERS ON (DRIS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
      UNION
      SELECT
        CHILLERS.ID AS ID,
        CHILLERS.ASSET_ID,
        CHILLERS.MACHINE_ID,
        NULL AS CAPACITY_POWER,
        NULL AS CAPACITY_UNIT,
        NULL AS MACHINE_KW,
        5 AS AST_ROLE_ID,
        NULL AS DEV_CLIENT_ASSET_ID,
        NULL AS DAC_DEVICE_ID,
        DRIS_CHILLERS.DRI_DEVICE_ID,
        NULL AS DUT_DEVICE_ID,
        CHILLERS.CHILLER_CARRIER_MODEL_ID
      FROM
        CHILLERS
        LEFT JOIN DRIS_CHILLERS ON (DRIS_CHILLERS.CHILLER_ID = CHILLERS.ID)
    )
    SELECT
      ASSETS.ID as ASSET_ID,
      ASSETS.DAT_CODE AS DAT_ID,
      ASSETS.UNIT_ID,
      ASSETS.NAME AS AST_DESC,
      ASSETS.MODEL AS MCHN_MODEL,
      MACHINES.INSTALLATION_DATE AS INSTALLATION_DATE,
      NULL AS AST_TYPE,
      ASSETS.INSTALLATION_LOCATION AS INSTALLATION_LOCATION,
      CTE_ASSETS.CAPACITY_POWER AS CAPACITY_PWR,
      CTE_ASSETS.CAPACITY_UNIT AS CAPACITY_UNIT,
      CTE_ASSETS.MACHINE_KW AS MCHN_KW,
      CLUNITS.CLIENT_ID,
      CLUNITS.UNIT_NAME,
      CLIENTS.NAME AS CLIENT_NAME,
      CITY.NAME AS CITY_NAME,
      MACHINES.FLUID_TYPE,
      MACHINES.ID AS GROUP_ID,
      MACHINES.NAME AS GROUP_NAME,
      MACHINES.APPLICATION AS MCHN_APPL,
      MACHINES.BRAND AS MCHN_BRAND,
      NULL AS MCHN_ENV,
      VTMACHINETYPES.ID AS AST_ROLE,
      VTMACHINETYPES.NAME AS AST_ROLE_NAME,
      STATEREGION.NAME AS STATE_ID,
      CTE_ASSETS.DEV_CLIENT_ASSET_ID AS DEV_CLIENT_ASSET_ID,
      CTE_ASSETS.ID AS DAT_INDEX,
      DEVICES.DEVICE_CODE AS DEV_ID,
      CHILLER_CARRIER_MODELS.MODEL_NAME AS CHILLER_MODEL_NAME,
      CHILLER_CARRIER_MODELS.ID AS CHILLER_MODEL_ID,
      CHILLER_CARRIER_LINES.LINE_NAME AS CHILLER_LINE_NAME,
      CHILLER_CARRIER_LINES.ID AS CHILLER_LINE_ID,
      CHILLER_CARRIER_MODELS.NOMINAL_CAPACITY,
      CHILLER_CARRIER_MODELS.NOMINAL_VOLTAGE,
      CHILLER_CARRIER_MODELS.NOMINAL_FREQUENCY
  `
  sentence += `
    FROM
      ASSETS
      LEFT JOIN CTE_ASSETS ON (CTE_ASSETS.ASSET_ID = ASSETS.ID)
      LEFT JOIN MACHINES ON (MACHINES.ID = CTE_ASSETS.MACHINE_ID)
      LEFT JOIN VTMACHINETYPES ON VTMACHINETYPES.ID = CTE_ASSETS.AST_ROLE_ID
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = ASSETS.UNIT_ID)
      LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
      LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
      LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = CLUNITS.CLIENT_ID)
      LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = CTE_ASSETS.DAC_DEVICE_ID)
      LEFT JOIN DUTS_DEVICES ON (DUTS_DEVICES.ID = CTE_ASSETS.DUT_DEVICE_ID)
      LEFT JOIN DRIS_DEVICES ON (DRIS_DEVICES.ID = CTE_ASSETS.DRI_DEVICE_ID)
      LEFT JOIN DEVICES ON (DEVICES.ID = COALESCE(DACS_DEVICES.DEVICE_ID, DUTS_DEVICES.DEVICE_ID, DRIS_DEVICES.DEVICE_ID))
      LEFT JOIN CHILLER_CARRIER_MODELS ON (CHILLER_CARRIER_MODELS.ID = CTE_ASSETS.CHILLER_CARRIER_MODEL_ID)
      LEFT JOIN CHILLER_CARRIER_LINES ON (CHILLER_CARRIER_LINES.ID = CHILLER_CARRIER_MODELS.CHILLER_CARRIER_LINE_ID)
  `

  const conditions: string[] = []
  if (qPars.clientIds != null && admPars.addUnownedDevs) { conditions.push(`(CLUNITS.CLIENT_ID IN (:clientIds) OR CLUNITS.CLIENT_ID IS NULL)`) }
  if (qPars.clientIds != null && !admPars.addUnownedDevs) { conditions.push(`(CLUNITS.CLIENT_ID IN (:clientIds))`) }
  if (qPars.stateIds) { conditions.push(`STATEREGION.ID IN (:stateIds)`) }
  if (qPars.cityIds) { conditions.push(`CLUNITS.CITY_ID IN (:cityIds)`) }
  if (qPars.unitIds) { conditions.push(`ASSETS.UNIT_ID IN (:unitIds)`) }
  if (qPars.MACHINE_ID) { conditions.push(`MACHINES.ID = :MACHINE_ID`) }
  if (qPars.machineIds) { conditions.push(`MACHINES.ID IN (:machineIds)`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  if (qPars.SKIP != null && qPars.LIMIT != null) { sentence += ` LIMIT :SKIP,:LIMIT ` }

  return sqldb.query<{
    ASSET_ID: number
    DAT_ID: string
    AST_DESC: string
    INSTALLATION_LOCATION: string
    MCHN_MODEL: string
    AST_TYPE: string
    CAPACITY_PWR: number
    CAPACITY_UNIT: string
    CLIENT_ID: number
    FLUID_TYPE: string
    GROUP_ID: number
    MCHN_APPL: string
    MCHN_BRAND: string
    MCHN_ENV: string
    MCHN_KW: number
    UNIT_ID: number
    INSTALLATION_DATE: string
    AST_ROLE: number
    AST_ROLE_NAME: string
    GROUP_NAME: string
    UNIT_NAME: string
    CLIENT_NAME: string
    CITY_NAME: string
    STATE_ID: string
    DEV_CLIENT_ASSET_ID: number
    DAT_INDEX: number
    DEV_ID: string
    CHILLER_MODEL_NAME: string
    CHILLER_MODEL_ID: number
    CHILLER_LINE_NAME: string
    CHILLER_LINE_ID: number
    NOMINAL_CAPACITY: number
    NOMINAL_VOLTAGE: number
    NOMINAL_FREQUENCY: number
  }>(sentence, qPars)
}

export function getAssetsListByMachine(qPars: {
  MACHINE_ID?: number,
}) {
  const conditions: string[] = [];
  let filterCondensers = "";
  let filterEvaporators = "";
  let filterAssetHeatExchangers = "";
  let filterAirCurtains = "";
  let filterChillers = "";
  if (qPars.MACHINE_ID) {
    conditions.push(`MACHINES.ID = :MACHINE_ID`);
    filterCondensers = ` WHERE CONDENSERS.MACHINE_ID = :MACHINE_ID`;
    filterEvaporators = ` WHERE EVAPORATORS.MACHINE_ID = :MACHINE_ID`;
    filterAssetHeatExchangers = ` WHERE ASSET_HEAT_EXCHANGERS.MACHINE_ID = :MACHINE_ID`;
    filterAirCurtains = ` WHERE AIR_CURTAINS.MACHINE_ID = :MACHINE_ID`;
    filterChillers = ` WHERE CHILLERS.MACHINE_ID = :MACHINE_ID`;
  }

  let sentence = `
    WITH CTE_ASSETS AS (
      SELECT
        CONDENSERS.ASSET_ID,
        CONDENSERS.MACHINE_ID,
        CONDENSERS.CAPACITY_POWER,
        2 AS AST_ROLE_ID,
        DACS_CONDENSERS.DAC_DEVICE_ID,
        NULL AS DUT_DEVICE_ID,
        CONDENSERS.MACHINE_KW
      FROM
        CONDENSERS
        LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.CONDENSER_ID = CONDENSERS.ID)
      ${filterCondensers}
      UNION
      SELECT
        EVAPORATORS.ASSET_ID,
        EVAPORATORS.MACHINE_ID,
        EVAPORATORS.CAPACITY_POWER,
        1 AS AST_ROLE_ID,
        DACS_EVAPORATORS.DAC_DEVICE_ID,
        DUTS_DUO.DUT_DEVICE_ID,
        EVAPORATORS.MACHINE_KW
      FROM
        EVAPORATORS
        LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
        LEFT JOIN DUTS_DUO_EVAPORATORS ON (DUTS_DUO_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
        LEFT JOIN DUTS_DUO ON (DUTS_DUO.ID = DUTS_DUO_EVAPORATORS.DUT_DUO_ID)
      ${filterEvaporators}
      UNION
      SELECT
        AIR_CURTAINS.ASSET_ID,
        AIR_CURTAINS.MACHINE_ID,
        NULL AS CAPACITY_POWER,
        3 AS AST_ROLE_ID,
        NULL AS DAC_DEVICE_ID,
        NULL AS DUT_DEVICE_ID,
        NULL AS MACHINE_KW
      FROM
        AIR_CURTAINS
      ${filterAirCurtains}
      UNION
      SELECT
        ASSET_HEAT_EXCHANGERS.ASSET_ID,
        ASSET_HEAT_EXCHANGERS.MACHINE_ID,
        ASSET_HEAT_EXCHANGERS.CAPACITY_POWER,
        4 AS AST_ROLE_ID,
        DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID,
        NULL as DUT_DEVICE_ID,
        ASSET_HEAT_EXCHANGERS.MACHINE_KW
      FROM
        ASSET_HEAT_EXCHANGERS
        LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
      ${filterAssetHeatExchangers}
      UNION
      SELECT
        CHILLERS.ASSET_ID,
        CHILLERS.MACHINE_ID,
        NULL AS CAPACITY_POWER,
        5 AS AST_ROLE_ID,
        NULL AS DAC_DEVICE_ID,
        NULL AS DUT_DEVICE_ID,
        NULL AS MACHINE_KW
      FROM
        CHILLERS
      ${filterChillers}
    )
    SELECT
      ASSETS.DAT_CODE AS DAT_ID,
      ASSETS.NAME AS AST_DESC,
      ASSETS.MODEL AS MCHN_MODEL,
      ASSETS.INSTALLATION_LOCATION AS INSTALLATION_LOCATION,
      CTE_ASSETS.CAPACITY_POWER AS CAPACITY_PWR,
      CTE_ASSETS.MACHINE_KW,
      VTMACHINETYPES.NAME AS AST_ROLE_NAME,
      DEVICES.DEVICE_CODE AS DEV_ID
  `
  sentence += `
    FROM
      ASSETS
      LEFT JOIN CTE_ASSETS ON (CTE_ASSETS.ASSET_ID = ASSETS.ID)
      LEFT JOIN MACHINES ON (MACHINES.ID = CTE_ASSETS.MACHINE_ID)
      LEFT JOIN VTMACHINETYPES ON VTMACHINETYPES.ID = CTE_ASSETS.AST_ROLE_ID
      LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = CTE_ASSETS.DAC_DEVICE_ID)
      LEFT JOIN DUTS_DEVICES ON (DUTS_DEVICES.ID = CTE_ASSETS.DUT_DEVICE_ID)
      LEFT JOIN DEVICES ON (DEVICES.ID = COALESCE(DACS_DEVICES.DEVICE_ID, DUTS_DEVICES.DEVICE_ID))
  `

  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    DAT_ID: string
    AST_DESC: string
    INSTALLATION_LOCATION: string
    MCHN_MODEL: string
    CAPACITY_PWR: number
    MACHINE_KW: number
    AST_ROLE_NAME: string
    DEV_ID: string
  }>(sentence, qPars)
}


export async function getAssetByDeviceCode(qPars: { DEVICE_CODE: string }) {
  const sentence = `
    SELECT
      ASSETS.ID AS ASSET_ID
    FROM 
      ASSETS
      LEFT JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN AIR_CURTAINS ON (AIR_CURTAINS.ASSET_ID = ASSETS.ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
      LEFT JOIN DACS_CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
      LEFT JOIN DUTS_DUO_EVAPORATORS ON (EVAPORATORS.ID = DUTS_DUO_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DUTS_DUO_ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DUTS_DUO_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN DUTS_DUO_CONDENSERS ON (CONDENSERS.ID = DUTS_DUO_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DUTS_DUO_AIR_CURTAINS ON (AIR_CURTAINS.ID = DUTS_DUO_AIR_CURTAINS.AIR_CURTAIN_ID)
      LEFT JOIN DUTS_DUO ON (DUTS_DUO.ID = COALESCE(DUTS_DUO_EVAPORATORS.DUT_DUO_ID, DUTS_DUO_ASSET_HEAT_EXCHANGERS.DUT_DUO_ID, DUTS_DUO_CONDENSERS.DUT_DUO_ID, DUTS_DUO_AIR_CURTAINS.DUT_DUO_ID))
      LEFT JOIN DUTS_DEVICES ON (DUTS_DUO.DUT_DEVICE_ID=DUTS_DEVICES.ID)
      LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = COALESCE(DACS_CONDENSERS.DAC_DEVICE_ID, DACS_EVAPORATORS.DAC_DEVICE_ID, DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID))
      INNER JOIN DEVICES ON (DEVICES.ID = COALESCE(DACS_DEVICES.DEVICE_ID, DUTS_DEVICES.DEVICE_ID))
      
      WHERE DEVICES.DEVICE_CODE = :DEVICE_CODE
  `

  return sqldb.querySingle<{
    ASSET_ID: number
  }>(sentence, qPars)
}

export async function getAssetByDacDeviceId(qPars: { DAC_DEVICE_ID: number }) {
  const sentence = `
    SELECT
      ASSETS.ID AS ASSET_ID,
      CONDENSERS.ID AS CONDENSER_ID,
      EVAPORATORS.ID AS EVAPORATOR_ID,
      ASSET_HEAT_EXCHANGERS.ID AS ASSET_HEAT_EXCHANGER_ID
    FROM 
      ASSETS
      LEFT JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
      LEFT JOIN DACS_CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
      INNER JOIN DACS_DEVICES ON (DACS_DEVICES.ID = COALESCE(DACS_CONDENSERS.DAC_DEVICE_ID, DACS_EVAPORATORS.DAC_DEVICE_ID, DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID))
    
    WHERE DACS_DEVICES.ID = :DAC_DEVICE_ID ORDER BY CONDENSERS.ID DESC
  `

  return sqldb.queryFirst<{
    ASSET_ID: number
    CONDENSER_ID: number
    EVAPORATOR_ID: number
    ASSET_HEAT_EXCHANGER_ID: number
  }>(sentence, qPars)
}

export function getDevsClientAssets(qPars: { ASSET_ID?: number, DEV_ID?: string, DAT_ID?: string, START_DATE?: string, END_DATE?: string }) {
  let sentence = `
    SELECT
      CASE 
        WHEN DACS_CONDENSERS.ID THEN DACS_CONDENSERS.ID
        WHEN DACS_EVAPORATORS.ID THEN DACS_EVAPORATORS.ID
        WHEN DACS_ASSET_HEAT_EXCHANGERS.ID THEN DACS_ASSET_HEAT_EXCHANGERS.ID
        ELSE NULL
      END AS DEV_CLIENT_ASSET_ID,
      CASE
        WHEN EVAPORATORS.ID IS NOT NULL THEN EVAPORATORS.ID
        WHEN CONDENSERS.ID IS NOT NULL THEN CONDENSERS.ID
        WHEN ASSET_HEAT_EXCHANGERS.ID IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.ID
        ELSE NULL
      END AS DAT_INDEX,
      DEVICES.DEVICE_CODE AS DEV_ID,
      DEVICES.ID AS DEVICE_ID,
      ASSETS.DAT_CODE AS DAT_ID,
      ASSETS_HEALTH_HIST.H_INDEX,
      DACS_CONDENSERS.ID AS DAC_CONDENSER_ID,
      DACS_EVAPORATORS.ID AS DAC_EVAPORATOR_ID,
      DACS_ASSET_HEAT_EXCHANGERS.ID AS DAC_ASSET_HEAT_EXCHANGER_ID,
      ASSETS.ID AS ASSET_ID,
      DUTS_DEVICES.PLACEMENT
  `
  sentence += `
    FROM
      ASSETS
      LEFT JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN AIR_CURTAINS ON (AIR_CURTAINS.ASSET_ID = ASSETS.ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.CONDENSER_ID = CONDENSERS.ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
      LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = COALESCE(DACS_CONDENSERS.DAC_DEVICE_ID, DACS_EVAPORATORS.DAC_DEVICE_ID, DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID))
      LEFT JOIN DUTS_DUO_EVAPORATORS ON (DUTS_DUO_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
      LEFT JOIN DUTS_DUO_ASSET_HEAT_EXCHANGERS ON (DUTS_DUO_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
      LEFT JOIN DUTS_DUO_CONDENSERS ON (DUTS_DUO_CONDENSERS.CONDENSER_ID = CONDENSERS.ID)
      LEFT JOIN DUTS_DUO_AIR_CURTAINS ON (DUTS_DUO_AIR_CURTAINS.AIR_CURTAIN_ID = AIR_CURTAINS.ID)
      LEFT JOIN DUTS_DUO ON (DUTS_DUO.ID = COALESCE(DUTS_DUO_ASSET_HEAT_EXCHANGERS.DUT_DUO_ID, DUTS_DUO_EVAPORATORS.DUT_DUO_ID, DUTS_DUO_CONDENSERS.DUT_DUO_ID, DUTS_DUO_AIR_CURTAINS.DUT_DUO_ID))
      LEFT JOIN DUTS_DEVICES ON (DUTS_DUO.DUT_DEVICE_ID = DUTS_DEVICES.ID)
      INNER JOIN DEVICES ON (DEVICES.ID = COALESCE(DACS_DEVICES.DEVICE_ID, DUTS_DEVICES.DEVICE_ID))
      LEFT JOIN ASSETS_HEALTH ON (ASSETS_HEALTH.ASSET_ID = ASSETS.ID)
      LEFT JOIN ASSETS_HEALTH_HIST ON (ASSETS_HEALTH_HIST.ID = ASSETS_HEALTH.HEALTH_HIST_ID)
  `

  const conditions: string[] = []
  if (qPars.DEV_ID != null) { conditions.push(`DEVICES.DEVICE_CODE = :DEV_ID`) }
  if (qPars.DAT_ID != null) { conditions.push(`ASSETS.DAT_CODE = :DAT_ID`) }
  if (qPars.ASSET_ID != null) { conditions.push(`ASSETS.ID = :ASSET_ID`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    DEV_CLIENT_ASSET_ID: number,
    DEV_ID: string
    DEVICE_ID: number
    DAT_ID: string
    DAT_INDEX: number
    H_INDEX: number
    DAC_CONDENSER_ID: number
    DAC_EVAPORATOR_ID: number
    DAC_ASSET_HEAT_EXCHANGER_ID: number
    ASSET_ID: number
    PLACEMENT: string
  }>(sentence, qPars)
}

export function getDevsHistoryAsset(qPars: { DEV_ID?: string}) {
  let sentence = `
    SELECT 
			ASSETS.DAT_CODE,
      ASSETS.ID AS ASSET_ID,
      COALESCE(DACS_CONDENSERS_HIST.DEVICE_CODE, DACS_EVAPORATORS_HIST.DEVICE_CODE, DACS_ASSET_HEAT_EXCHANGERS_HIST.DEVICE_CODE) AS DEV_ID,
      COALESCE(DACS_CONDENSERS_HIST.CONDENSER_ID, DACS_EVAPORATORS_HIST.EVAPORATOR_ID, DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID) AS DAT_INDEX,
			ASSETS_HEALTH_HIST.H_INDEX,
      CASE
        WHEN CONDENSERS.ID IS NOT NULL THEN 'CONDENSER'
        WHEN ASSET_HEAT_EXCHANGERS.ID IS NOT NULL THEN 'HEAT EXCHANGER'
        ELSE 'EVAPORATOR'
      END AS ASSET_ROLE
  `
  sentence += `
    FROM
			DEVICES
      LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN ASSETS ON (ASSETS.ID = COALESCE(CONDENSERS.ASSET_ID, EVAPORATORS.ASSET_ID, ASSET_HEAT_EXCHANGERS.ASSET_ID))
      LEFT JOIN DACS_EVAPORATORS_HIST ON (DACS_EVAPORATORS_HIST.EVAPORATOR_ID = EVAPORATORS.ID)
      LEFT JOIN DACS_CONDENSERS_HIST ON (DACS_CONDENSERS_HIST.CONDENSER_ID = CONDENSERS.ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS_HIST ON (DACS_ASSET_HEAT_EXCHANGERS_HIST.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
      LEFT JOIN ASSETS_HEALTH ON (ASSETS_HEALTH.ASSET_ID = ASSETS.ID)
      LEFT JOIN ASSETS_HEALTH_HIST ON (ASSETS_HEALTH_HIST.ID = ASSETS_HEALTH.HEALTH_HIST_ID)
  `

  const conditions: string[] = []
  if (qPars.DEV_ID != null) { conditions.push(`DEVICES.DEVICE_CODE = :DEV_ID`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    DAT_CODE: string,
    ASSET_ID: number,
    DEV_ID: string
    DAT_INDEX: number
    H_INDEX: number
    ASSET_ROLE: string
  }>(sentence, qPars)
}


export function getMaxIndexDevsClientAssets(qPars: { DAT_ID?: string, IS_AUTOMATION_DEV?: string, }) {
  let sentence = `
    SELECT
      MAX(CASE 
        WHEN CONDENSERS.ID THEN CONDENSERS.ID
        WHEN EVAPORATORS.ID THEN EVAPORATORS.ID
        WHEN ASSET_HEAT_EXCHANGERS.ID THEN ASSET_HEAT_EXCHANGERS.ID
        ELSE NULL
      END) AS DAT_INDEX
  `
  sentence += `
    FROM
      ASSETS
      LEFT JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ASSET_ID = ASSETS.ID)
  `

  const conditions: string[] = []
  if (qPars.DAT_ID != null) { conditions.push(`ASSETS.DAT_CODE = :DAT_ID`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.querySingle<{
    DAT_INDEX: number
  }>(sentence, qPars)
}

export function getDevsToTelemetry(qPars: { DAT_ID: string, DAT_INDEX: number, dateStart: string, dateEnd: string, IS_AUTOMATION_DEV?: string }) {
  let sentence = `
    SELECT
      COALESCE(DACS_CONDENSERS_HIST.DEVICE_CODE, DACS_EVAPORATORS_HIST.DEVICE_CODE, DACS_ASSET_HEAT_EXCHANGERS_HIST.DEVICE_CODE) AS DEV_ID,
      DATE_FORMAT(COALESCE(DACS_CONDENSERS_HIST.START_DATE, DACS_EVAPORATORS_HIST.START_DATE, DACS_ASSET_HEAT_EXCHANGERS_HIST.START_DATE),'%Y-%m-%d') AS START_DATE,
      DATE_FORMAT(COALESCE(DACS_CONDENSERS_HIST.END_DATE, DACS_EVAPORATORS_HIST.END_DATE, DACS_ASSET_HEAT_EXCHANGERS_HIST.END_DATE),'%Y-%m-%d') AS END_DATE,
      DATE_FORMAT(COALESCE(DACS_CONDENSERS_HIST.START_DATE, DACS_EVAPORATORS_HIST.START_DATE, DACS_ASSET_HEAT_EXCHANGERS_HIST.START_DATE),'%Y-%m-%d %H:%i:%S') AS FULL_START_DATE,
      DATE_FORMAT(COALESCE(DACS_CONDENSERS_HIST.END_DATE, DACS_EVAPORATORS_HIST.END_DATE, DACS_ASSET_HEAT_EXCHANGERS_HIST.END_DATE),'%Y-%m-%d %H:%i:%S') AS FULL_END_DATE
  `
  sentence += `
    FROM
        ASSETS
        LEFT JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
        LEFT JOIN EVAPORATORS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
        LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ASSET_ID = ASSETS.ID)
        LEFT JOIN DACS_CONDENSERS_HIST ON (DACS_CONDENSERS_HIST.CONDENSER_ID = CONDENSERS.ID)
        LEFT JOIN DACS_EVAPORATORS_HIST ON (DACS_EVAPORATORS_HIST.EVAPORATOR_ID = EVAPORATORS.ID)
        LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS_HIST ON (DACS_ASSET_HEAT_EXCHANGERS_HIST.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
      `

  const conditions: string[] = []
  if (qPars.DAT_ID != null) { conditions.push(`ASSETS.DAT_CODE = :DAT_ID`) }
  if (qPars.DAT_INDEX != null) {
    conditions.push(
      `COALESCE(CONDENSERS.ID, EVAPORATORS.ID, ASSET_HEAT_EXCHANGERS.ID) = :DAT_INDEX`)
  }
  if (qPars.dateEnd != null) {
    conditions.push(
      `DATE_FORMAT(COALESCE(DACS_CONDENSERS_HIST.START_DATE, DACS_EVAPORATORS_HIST.START_DATE, DACS_ASSET_HEAT_EXCHANGERS_HIST.START_DATE), '%Y-%m-%d') <= :dateEnd`)
  }
  if (qPars.dateStart != null) {
    conditions.push(`
    (DATE_FORMAT(COALESCE(DACS_CONDENSERS_HIST.END_DATE, DACS_EVAPORATORS_HIST.END_DATE, DACS_ASSET_HEAT_EXCHANGERS_HIST.END_DATE), '%Y-%m-%d') >= :dateStart OR 
		DATE_FORMAT(COALESCE(DACS_CONDENSERS_HIST.END_DATE, DACS_EVAPORATORS_HIST.END_DATE, DACS_ASSET_HEAT_EXCHANGERS_HIST.END_DATE), '%Y-%m-%d') IS NULL)`)
  }

  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }
  sentence += ' ORDER BY FULL_START_DATE ASC';
  return sqldb.query<{
    DEV_ID: string,
    START_DATE: string
    END_DATE: string
    FULL_START_DATE: string
    FULL_END_DATE: string
  }>(sentence, qPars)
}


export function getDevsToTelemetryByCondenserId(qPars: { CONDENSER_ID: number, dateStart: string, dateEnd: string, timezoneOffset: number }) {
  const hourInterval = qPars.timezoneOffset != null ? qPars.timezoneOffset : -3;
  let sentence = `
    SELECT
      DACS_CONDENSERS_HIST.DEVICE_CODE AS DEV_ID,
      DATE_FORMAT(DATE_ADD(DACS_CONDENSERS_HIST.START_DATE, INTERVAL ${hourInterval} HOUR),'%Y-%m-%d') AS START_DATE,
      DATE_FORMAT(DATE_ADD(DACS_CONDENSERS_HIST.END_DATE, INTERVAL ${hourInterval} HOUR),'%Y-%m-%d') AS END_DATE,
      DATE_FORMAT(DATE_ADD(DACS_CONDENSERS_HIST.START_DATE, INTERVAL ${hourInterval} HOUR),'%Y-%m-%d %H:%i:%S') AS FULL_START_DATE,
      DATE_FORMAT(DATE_ADD(DACS_CONDENSERS_HIST.END_DATE, INTERVAL ${hourInterval} HOUR),'%Y-%m-%d %H:%i:%S') AS FULL_END_DATE
  `
  sentence += `
    FROM
        DACS_CONDENSERS_HIST
      `

  const conditions: string[] = []
  if (qPars.CONDENSER_ID != null) { conditions.push(`DACS_CONDENSERS_HIST.CONDENSER_ID = :CONDENSER_ID`) }
  if (qPars.dateEnd != null) {
    conditions.push(
      `DATE_FORMAT(DATE_ADD(DACS_CONDENSERS_HIST.START_DATE, INTERVAL ${hourInterval} HOUR), '%Y-%m-%d') <= :dateEnd`)
  }
  if (qPars.dateStart != null) {
    conditions.push(`
    (DATE_FORMAT(DATE_ADD(DACS_CONDENSERS_HIST.END_DATE, INTERVAL ${hourInterval} HOUR), '%Y-%m-%d') >= :dateStart OR 
		 DACS_CONDENSERS_HIST.END_DATE IS NULL)`)
  }

  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }
  sentence += ' ORDER BY FULL_START_DATE ASC';
  return sqldb.query<{
    DEV_ID: string,
    START_DATE: string
    END_DATE: string
    FULL_START_DATE: string
    FULL_END_DATE: string
  }>(sentence, qPars)
}


export function getDevsToTelemetryByEvaporatorId(qPars: { EVAPORATOR_ID: number, dateStart: string, dateEnd: string, timezoneOffset: number }) {
  const hourInterval = qPars.timezoneOffset != null ? qPars.timezoneOffset : -3;
  let sentence = `
    SELECT
      DACS_EVAPORATORS_HIST.DEVICE_CODE AS DEV_ID,
      DATE_FORMAT(DATE_ADD(DACS_EVAPORATORS_HIST.START_DATE, INTERVAL ${hourInterval} HOUR),'%Y-%m-%d') AS START_DATE,
      DATE_FORMAT(DATE_ADD(DACS_EVAPORATORS_HIST.END_DATE, INTERVAL ${hourInterval} HOUR),'%Y-%m-%d') AS END_DATE,
      DATE_FORMAT(DATE_ADD(DACS_EVAPORATORS_HIST.START_DATE, INTERVAL ${hourInterval} HOUR),'%Y-%m-%d %H:%i:%S') AS FULL_START_DATE,
      DATE_FORMAT(DATE_ADD(DACS_EVAPORATORS_HIST.END_DATE, INTERVAL ${hourInterval} HOUR),'%Y-%m-%d %H:%i:%S') AS FULL_END_DATE
  `
  sentence += `
    FROM
        DACS_EVAPORATORS_HIST
      `

  const conditions: string[] = []
  if (qPars.EVAPORATOR_ID != null) { conditions.push(`DACS_EVAPORATORS_HIST.EVAPORATOR_ID = :EVAPORATOR_ID`) }
  if (qPars.dateEnd != null) {
    conditions.push(
      `DATE_FORMAT(DATE_ADD(DACS_EVAPORATORS_HIST.START_DATE, INTERVAL ${hourInterval} HOUR), '%Y-%m-%d') <= :dateEnd`)
  }
  if (qPars.dateStart != null) {
    conditions.push(`
    (DATE_FORMAT(DATE_ADD(DACS_EVAPORATORS_HIST.END_DATE, INTERVAL ${hourInterval} HOUR), '%Y-%m-%d') >= :dateStart OR 
		 DACS_EVAPORATORS_HIST.END_DATE IS NULL)`)
  }

  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }
  sentence += ' ORDER BY FULL_START_DATE ASC';
  return sqldb.query<{
    DEV_ID: string,
    START_DATE: string
    END_DATE: string
    FULL_START_DATE: string
    FULL_END_DATE: string
  }>(sentence, qPars)
}

export function getDevsToTelemetryByAssetHeatExchangerId(qPars: { ASSET_HEAT_EXCHANGER_ID: number, dateStart: string, dateEnd: string, timezoneOffset: number }) {
  const hourInterval = qPars.timezoneOffset != null ? qPars.timezoneOffset : -3;

  let sentence = `
    SELECT 
        DEV_ID,
        DATE_FORMAT(DATE_ADD(START_DATE, INTERVAL ${hourInterval} HOUR), '%Y-%m-%d') AS START_DATE,
        DATE_FORMAT(DATE_ADD(END_DATE, INTERVAL ${hourInterval} HOUR), '%Y-%m-%d') AS END_DATE,
        DATE_FORMAT(DATE_ADD(START_DATE, INTERVAL ${hourInterval} HOUR), '%Y-%m-%d %H:%i:%S') AS FULL_START_DATE,
        DATE_FORMAT(DATE_ADD(END_DATE, INTERVAL ${hourInterval} HOUR), '%Y-%m-%d %H:%i:%S') AS FULL_END_DATE
    FROM (
        SELECT 
            DEVICE_CODE AS DEV_ID, START_DATE, END_DATE, ASSET_HEAT_EXCHANGER_ID
        FROM DACS_ASSET_HEAT_EXCHANGERS_HIST
        UNION ALL
        SELECT 
            DEVICE_CODE AS DEV_ID, START_DATE, END_DATE, ASSET_HEAT_EXCHANGER_ID
        FROM DRIS_ASSET_HEAT_EXCHANGERS_HIST
        UNION ALL
        SELECT 
            DUT_CODE AS DEV_ID, START_DATE, END_DATE, ASSET_HEAT_EXCHANGER_ID
        FROM DUTS_DUO_ASSET_HEAT_EXCHANGERS_HIST
    ) AS unified_data
  `;

  const conditions: string[] = [];

  if (qPars.ASSET_HEAT_EXCHANGER_ID != null) { conditions.push(`ASSET_HEAT_EXCHANGER_ID = :ASSET_HEAT_EXCHANGER_ID`); }
  if (qPars.dateEnd != null) { conditions.push(`DATE_FORMAT(DATE_ADD(START_DATE, INTERVAL ${hourInterval} HOUR), '%Y-%m-%d') <= :dateEnd`); }
  if (qPars.dateStart != null) {
      conditions.push(`
          (DATE_FORMAT(DATE_ADD(END_DATE, INTERVAL ${hourInterval} HOUR), '%Y-%m-%d') >= :dateStart 
          OR END_DATE IS NULL)
      `);
  }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND '); }

  sentence += ' ORDER BY FULL_START_DATE ASC';

  return sqldb.query<{
    DEV_ID: string,
    START_DATE: string
    END_DATE: string
    FULL_START_DATE: string
    FULL_END_DATE: string
  }>(sentence, qPars)
}

export function getAssetIndex(qPars: { DAT_ID: string, current: boolean }) {
  let sentence = `
    SELECT
      CASE
        WHEN EVAPORATORS.ID IS NOT NULL THEN EVAPORATORS.ID
        WHEN CONDENSERS.ID IS NOT NULL THEN CONDENSERS.ID
        WHEN ASSET_HEAT_EXCHANGERS.ID IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.ID
        ELSE NULL
      END AS DAT_INDEX
  `
  sentence += `
    FROM
      ASSETS
      LEFT JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN DACS_CONDENSERS_HIST ON (DACS_CONDENSERS_HIST.CONDENSER_ID = CONDENSERS.ID)
      LEFT JOIN DACS_EVAPORATORS_HIST ON (DACS_EVAPORATORS_HIST.EVAPORATOR_ID = EVAPORATORS.ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS_HIST ON (DACS_ASSET_HEAT_EXCHANGERS_HIST.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
  `

  const conditions: string[] = []
  if (qPars.DAT_ID != null) { conditions.push(`ASSETS.DAT_CODE = :DAT_ID`) }
  if (qPars.current) {
    conditions.push(`
  (CASE
    WHEN DACS_CONDENSERS_HIST.ID THEN DACS_CONDENSERS_HIST.START_DATE
    WHEN DACS_EVAPORATORS_HIST.ID THEN DACS_EVAPORATORS_HIST.START_DATE
    WHEN DACS_ASSET_HEAT_EXCHANGERS_HIST.ID THEN DACS_ASSET_HEAT_EXCHANGERS_HIST.START_DATE
    ELSE NULL
  END) IS NULL`)
  }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }
  sentence += ' GROUP BY DAT_INDEX';

  return sqldb.query<{
    DAT_INDEX: number
  }>(sentence, qPars)
}

export function getDevClientAssetInfo(qPars: { DEV_CLIENT_ASSET_ID: number }) {
  let sentence = `
    SELECT
      CASE 
        WHEN DACS_CONDENSERS.ID THEN DACS_CONDENSERS.ID
        WHEN DACS_EVAPORATORS.ID THEN DACS_EVAPORATORS.ID
        WHEN DACS_ASSET_HEAT_EXCHANGERS.ID THEN DACS_ASSET_HEAT_EXCHANGERS.ID
        ELSE NULL
      END AS DEV_CLIENT_ASSET_ID,
      CASE
        WHEN EVAPORATORS.ID IS NOT NULL THEN EVAPORATORS.ID
        WHEN CONDENSERS.ID IS NOT NULL THEN CONDENSERS.ID
        WHEN ASSET_HEAT_EXCHANGERS.ID IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.ID
        ELSE NULL
      END AS DAT_INDEX,
      DEVICES.DEVICE_CODE AS DEV_ID,
      ASSETS.DAT_CODE AS DAT_ID
  `
  sentence += `
    FROM
      ASSETS
      LEFT JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.CONDENSER_ID = CONDENSERS.ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
      LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = COALESCE(DACS_CONDENSERS.DAC_DEVICE_ID, DACS_EVAPORATORS.DAC_DEVICE_ID, DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID))
      LEFT JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
  `

  const conditions: string[] = []
  if (qPars.DEV_CLIENT_ASSET_ID != null) { conditions.push(`DEV_CLIENT_ASSET_ID = :DEV_CLIENT_ASSET_ID`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.querySingle<{
    DEV_CLIENT_ASSET_ID: number,
    DEV_ID: string
    DAT_ID: string
    DAT_INDEX: number
  }>(sentence, qPars)
}

export async function getAssetsByMachine(qPars: { MACHINE_ID: number }) {
  const sentence = `
    SELECT 
      ASSETS.ID AS ASSET_ID,
      ASSETS.DAT_CODE,
      CONDENSERS.ID AS CONDENSER_ID,
      CONDENSERS.MACHINE_KW AS CONDENSER_MACHINE_KW
    FROM 
      ASSETS
      INNER JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
      INNER JOIN MACHINES ON (MACHINES.ID = CONDENSERS.MACHINE_ID)
    WHERE
      MACHINES.ID = :MACHINE_ID
  `

  return sqldb.query<{
    ASSET_ID: number
    DAT_CODE: string
    CONDENSER_ID: number
    CONDENSER_MACHINE_KW: number
  }>(sentence, qPars)
}

export async function getCondensersToVerifyRatedPower(qPars: { ASSET_NAME: string, MACHINE_ID: number }) {
  const sentence = `
    SELECT
      ASSETS.DAT_CODE AS DAT_ID,
      ASSETS.ID AS ASSET_ID
    FROM 
      ASSETS
      INNER JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
      INNER JOIN MACHINES ON (MACHINES.ID = CONDENSERS.MACHINE_ID)
    WHERE
      MACHINES.ID = :MACHINE_ID AND ASSETS.NAME = :ASSET_NAME
  `


  return sqldb.query<{
    DAT_ID: string
    ASSET_ID: number
  }>(sentence, qPars)
}

export function getAssetWithoutHealthDutDuo () {
  let sentence = `
    SELECT
      ASSETS.ID AS ASSET_ID
    FROM ASSETS
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN AIR_CURTAINS ON (AIR_CURTAINS.ASSET_ID = ASSETS.ID)
      LEFT JOIN DUTS_DUO_EVAPORATORS ON (EVAPORATORS.ID = DUTS_DUO_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DUTS_DUO_ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DUTS_DUO_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN DUTS_DUO_CONDENSERS ON (CONDENSERS.ID = DUTS_DUO_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DUTS_DUO_AIR_CURTAINS ON (AIR_CURTAINS.ID = DUTS_DUO_AIR_CURTAINS.AIR_CURTAIN_ID)
      LEFT JOIN DUTS_DUO ON (DUTS_DUO.ID = COALESCE(DUTS_DUO_EVAPORATORS.DUT_DUO_ID, DUTS_DUO_ASSET_HEAT_EXCHANGERS.DUT_DUO_ID, DUTS_DUO_CONDENSERS.DUT_DUO_ID, DUTS_DUO_AIR_CURTAINS.DUT_DUO_ID))
      LEFT JOIN DUTS_DEVICES ON (DUTS_DUO.DUT_DEVICE_ID = DUTS_DEVICES.ID)
      INNER JOIN DEVICES ON (DEVICES.ID = DUTS_DEVICES.DEVICE_ID)
      LEFT JOIN ASSETS_HEALTH ON (ASSETS_HEALTH.ASSET_ID = ASSETS.ID)
      WHERE ASSETS_HEALTH.ID IS NULL AND DUTS_DEVICES.PLACEMENT = 'DUO'
  `
  return sqldb.query<{
    ASSET_ID: number
  }>(sentence)
}


const capacityPwr = `
  CASE
    WHEN EVAPORATORS.CAPACITY_UNIT = 'TR' AND EVAPORATORS.CAPACITY_POWER IS NOT NULL 
      THEN EVAPORATORS.CAPACITY_POWER
    WHEN CONDENSERS.CAPACITY_UNIT = 'TR' AND CONDENSERS.CAPACITY_POWER IS NOT NULL 
      THEN CONDENSERS.CAPACITY_POWER
    WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT = 'TR' AND ASSET_HEAT_EXCHANGERS.CAPACITY_POWER IS NOT NULL 
      THEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER
    ELSE 0
  END
`;

const capacityPwrBtu = `
  CASE
    WHEN EVAPORATORS.CAPACITY_UNIT != 'TR' AND EVAPORATORS.CAPACITY_POWER IS NOT NULL 
      THEN EVAPORATORS.CAPACITY_POWER
    WHEN CONDENSERS.CAPACITY_UNIT != 'TR' AND CONDENSERS.CAPACITY_POWER IS NOT NULL 
      THEN CONDENSERS.CAPACITY_POWER
    WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT != 'TR' AND ASSET_HEAT_EXCHANGERS.CAPACITY_POWER IS NOT NULL 
      THEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER
    ELSE 0
  END
`;

function checkOnlyAutAndStateDev(qPars: { stateDev?: string[], onlyAut: boolean, tempAmb?: string[] }) {
  if (qPars.onlyAut || qPars.stateDev?.length || qPars.tempAmb?.length) {
    return `
    LEFT JOIN DAMS_AUTOMATIONS ON MACHINES.ID = DAMS_AUTOMATIONS.MACHINE_ID
    LEFT JOIN DAMS_DEVICES ON DAMS_DEVICES.ID = DAMS_AUTOMATIONS.DAM_DEVICE_ID
    LEFT JOIN DUTS_AUTOMATION ON MACHINES.ID = DUTS_AUTOMATION.MACHINE_ID
    LEFT JOIN DUTS_DEVICES ON DUTS_DEVICES.ID = DUTS_AUTOMATION.DUT_DEVICE_ID
    LEFT JOIN DACS_AUTOMATIONS ON MACHINES.ID = DACS_AUTOMATIONS.MACHINE_ID
    LEFT JOIN DACS_DEVICES ON DACS_DEVICES.ID = DACS_AUTOMATIONS.DAC_DEVICE_ID
    LEFT JOIN DRIS_AUTOMATIONS ON MACHINES.ID = DRIS_AUTOMATIONS.MACHINE_ID
    LEFT JOIN DRIS_DEVICES ON DRIS_DEVICES.ID = DRIS_AUTOMATIONS.DRI_DEVICE_ID
    LEFT JOIN DEVICES ON DEVICES.ID = COALESCE(DRIS_DEVICES.DEVICE_ID, DACS_DEVICES.DEVICE_ID, DUTS_DEVICES.DEVICE_ID, DAMS_DEVICES.DEVICE_ID)
    LEFT JOIN CURRENT_DEVICE_STATE ON (DEVICES.DEVICE_CODE = CURRENT_DEVICE_STATE.DEVICE_CODE)
    `;
  }
  return '';
}

export function checkTempAmb(qPars: { tempAmb: string[] }) {
  if (qPars.tempAmb) {
    return `
    LEFT JOIN REFRIGERATES ON (REFRIGERATES.MACHINE_ID = MACHINES.ID)
    LEFT JOIN ENVIRONMENTS ON (ENVIRONMENTS.ID = REFRIGERATES.ENVIRONMENT_ID)
    LEFT JOIN ENVIRONMENTS_ROOM_TYPES ON (ENVIRONMENTS_ROOM_TYPES.ENVIRONMENT_ID = REFRIGERATES.ENVIRONMENT_ID)
    LEFT JOIN ROOMTYPES ON (ROOMTYPES.RTYPE_ID = ENVIRONMENTS_ROOM_TYPES.RTYPE_ID)`
  }
  return '';
}

export function generateTemperatureConditions(qPars: { tempAmb: string[] }) {
  const conditions = [];

  if (qPars.tempAmb.includes('correta')) {
      conditions.push(`(CURRENT_DEVICE_STATE.TEMPERATURE BETWEEN ROOMTYPES.TUSEMIN AND ROOMTYPES.TUSEMAX)`);
  }
  if (qPars.tempAmb.includes('abaixo')) {
      conditions.push(`CURRENT_DEVICE_STATE.TEMPERATURE < ROOMTYPES.TUSEMIN`);
  }
  if (qPars.tempAmb.includes('acima')) {
      conditions.push(`CURRENT_DEVICE_STATE.TEMPERATURE > ROOMTYPES.TUSEMAX`);
  }
  if (qPars.tempAmb.includes('sem info')) {
      conditions.push(`(ROOMTYPES.TUSEMAX IS NULL AND ROOMTYPES.TUSEMIN IS NULL)`);
  }
  return conditions.length > 0 ? conditions.join(' OR ') : '';
}

export function machinesSelect(qPars: {
  clientIds?: number[],
  stateIds?: number[],
  cityIds?: string[],
  unitIds?: number[],
  machineIds?: number[],
  machinesTypes?: string[],
  healthIndex?: number[],
  onlyAut?: boolean,
  operation_modes?: string[],
  stateDev?: string[],
  ecoMode?: number[],
  tempAmb?: string[],
}) {
  const conditions = [];
  let sentence = `
  SELECT DISTINCT
  MACHINES.ID AS MACHINE_ID 
  FROM MACHINES
  LEFT JOIN CLUNITS on (MACHINES.UNIT_ID = CLUNITS.UNIT_ID)
  LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
  LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
  `
  sentence += checkTempAmb({ tempAmb: qPars.tempAmb });
  conditions.push('CLUNITS.CLIENT_ID IS NOT NULL');
  if (qPars.operation_modes?.length || qPars.ecoMode?.length) {
    sentence += `
    LEFT JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID)
    LEFT JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (CURRENT_AUTOMATIONS_PARAMETERS.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)
    `
  }
  if (qPars.clientIds?.length) { conditions.push(`CLUNITS.CLIENT_ID IN (:clientIds)`) }
  if (qPars.stateIds?.length) { conditions.push(`STATEREGION.ID IN (:stateIds)`) }
  if (qPars.cityIds?.length) { conditions.push(`CLUNITS.CITY_ID IN (:cityIds)`) }
  if (qPars.machineIds?.length) { conditions.push(`MACHINES.ID IN (:machineIds)`) }
  if (qPars.operation_modes?.length) { conditions.push('CURRENT_AUTOMATIONS_PARAMETERS.MODE IN (:operation_modes)') }
  if (qPars.ecoMode?.length) { conditions.push('CURRENT_AUTOMATIONS_PARAMETERS.ENABLE_ECO IN (:ecoMode)') }
  if (qPars.machinesTypes?.length) { conditions.push(`MACHINES.TYPE IN (:machinesTypes)`) }
  if (qPars.onlyAut) {
    sentence+= `
    LEFT JOIN ASSET_HEAT_EXCHANGERS ON MACHINES.ID = ASSET_HEAT_EXCHANGERS.MACHINE_ID
    LEFT JOIN CONDENSERS ON MACHINES.ID = CONDENSERS.MACHINE_ID
    LEFT JOIN EVAPORATORS ON MACHINES.ID = EVAPORATORS.MACHINE_ID
    LEFT JOIN DAMS_AUTOMATIONS ON MACHINES.ID = DAMS_AUTOMATIONS.MACHINE_ID
    LEFT JOIN DAMS_DEVICES ON DAMS_DEVICES.ID = DAMS_AUTOMATIONS.DAM_DEVICE_ID
    LEFT JOIN DUTS_AUTOMATION ON MACHINES.ID = DUTS_AUTOMATION.MACHINE_ID
    LEFT JOIN DUTS_DEVICES ON DUTS_DEVICES.ID = DUTS_AUTOMATION.DUT_DEVICE_ID
    LEFT JOIN DACS_AUTOMATIONS ON MACHINES.ID = DACS_AUTOMATIONS.MACHINE_ID
    LEFT JOIN DACS_DEVICES ON DACS_DEVICES.ID = DACS_AUTOMATIONS.DAC_DEVICE_ID
    LEFT JOIN DRIS_AUTOMATIONS ON MACHINES.ID = DRIS_AUTOMATIONS.MACHINE_ID
    LEFT JOIN CHILLERS ON MACHINES.ID = CHILLERS.MACHINE_ID
    LEFT JOIN CHILLER_CARRIER_MODELS ON CHILLER_CARRIER_MODELS.ID = CHILLERS.CHILLER_CARRIER_MODEL_ID
    LEFT JOIN DRIS_CHILLERS ON CHILLERS.ID = DRIS_CHILLERS.CHILLER_ID
    LEFT JOIN DRIS_DEVICES ON DRIS_DEVICES.ID = COALESCE(DRIS_AUTOMATIONS.DRI_DEVICE_ID, DRIS_CHILLERS.DRI_DEVICE_ID)
    INNER JOIN DEVICES ON DEVICES.ID = COALESCE(DRIS_DEVICES.DEVICE_ID, DACS_DEVICES.DEVICE_ID, DUTS_DEVICES.DEVICE_ID, DAMS_DEVICES.DEVICE_ID)
    `;
    conditions.push(`DEVICES.DEVICE_CODE IS NOT NULL`);
  }
  if (qPars.tempAmb?.length) {
    conditions.push(generateTemperatureConditions({ tempAmb: qPars.tempAmb }));
  }
  if (qPars.stateDev?.length) { conditions.push(`CURRENT_DEVICE_STATE.STATE IN (:stateDev)`)}
  if (qPars.unitIds?.length) { conditions.push(`MACHINES.UNIT_ID IN (:unitIds)`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }
  return sqldb.query<{
    MACHINE_ID: number
  }>(sentence, qPars)
}

export async function getTotalInfoAssets(qPars: {
  clientIds?: number[],
  stateIds?: number[],
  cityIds?: string[],
  unitIds?: number[],
  machineIds?: number[],
  machinesTypes?: string[],
  datId?: string,
  health?: number[],
  operation_modes?: string[],
  stateDev?: string[],
  INCLUDE_INSTALLATION_UNIT?: boolean,
  assetId?: number,
  onlyAut?: boolean
  tempAmb?: string[],
}) {
  const machineQuery = qPars.machineIds?.length;
  const conditions = [];
  let sentence = `
  SELECT 
    SUM (
      ${capacityPwr}
    ) AS TOTAL_CAPACITY_PWR_TR,
    SUM (
      ${capacityPwrBtu}
    ) AS TOTAL_CAPACITY_PWR_BTU,
    COUNT(DISTINCT CLUNITS.CITY_ID) AS TOTAL_CITY,
    COUNT(DISTINCT CITY.STATE_ID) AS TOTAL_STATE,
    (${machineQuery}) AS TOTAL_MACHINES,
    COUNT(DISTINCT CLUNITS.UNIT_ID) AS TOTAL_UNITS,
    COUNT(*) AS TOTAL_ASSETS,
    SUM(CASE WHEN ASSETS_HEALTH_HIST.H_INDEX = 100 AND DEVICES.ID IS NOT NULL THEN 1 ELSE 0 END) AS TOTAL_H_INDEX100,
    SUM(CASE WHEN ASSETS_HEALTH_HIST.H_INDEX = 75 AND DEVICES.ID IS NOT NULL THEN 1 ELSE 0 END) AS TOTAL_H_INDEX75,
    SUM(CASE WHEN ASSETS_HEALTH_HIST.H_INDEX = 50 AND DEVICES.ID IS NOT NULL THEN 1 ELSE 0 END) AS TOTAL_H_INDEX50,
    SUM(CASE WHEN ASSETS_HEALTH_HIST.H_INDEX = 25 AND DEVICES.ID IS NOT NULL THEN 1 ELSE 0 END) AS TOTAL_H_INDEX25,
    SUM(CASE WHEN (ASSETS_HEALTH_HIST.H_INDEX = 2 OR ASSETS_HEALTH_HIST.H_INDEX = 1) AND DEVICES.ID IS NOT NULL THEN 1 ELSE 0 END) AS TOTAL_H_INDEX2,
    SUM(CASE WHEN ASSETS_HEALTH_HIST.H_INDEX = 4 AND DEVICES.ID IS NOT NULL THEN 1 ELSE 0 END) AS TOTAL_H_INDEX4,
    SUM(CASE WHEN ASSETS_HEALTH_HIST.H_INDEX IS NULL THEN 1 ELSE 0 END) AS TOTAL_H_INDEX_NULL
  `

  sentence += `
    FROM ASSETS
    LEFT JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
    LEFT JOIN EVAPORATORS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
    LEFT JOIN AIR_CURTAINS ON (AIR_CURTAINS.ASSET_ID = ASSETS.ID)
    LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ASSET_ID = ASSETS.ID)
    LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = ASSETS.UNIT_ID)
    LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = CLUNITS.CLIENT_ID)
    LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
    LEFT JOIN ASSETS_HEALTH ON (ASSETS_HEALTH.ASSET_ID = ASSETS.ID)
    LEFT JOIN ASSETS_HEALTH_HIST ON (ASSETS_HEALTH_HIST.ID = ASSETS_HEALTH.HEALTH_HIST_ID)
	  LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
    LEFT JOIN DUTS_DUO_ASSET_HEAT_EXCHANGERS ON (DUTS_DUO_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
    LEFT JOIN DUTS_DUO_AIR_CURTAINS ON (DUTS_DUO_AIR_CURTAINS.AIR_CURTAIN_ID = AIR_CURTAINS.ID)
    LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
    LEFT JOIN DUTS_DUO_EVAPORATORS ON (DUTS_DUO_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
    LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.CONDENSER_ID = CONDENSERS.ID)
    LEFT JOIN DUTS_DUO_CONDENSERS ON (DUTS_DUO_CONDENSERS.CONDENSER_ID = CONDENSERS.ID)
    LEFT JOIN DUTS_DUO ON (DUTS_DUO.ID = COALESCE(DUTS_DUO_ASSET_HEAT_EXCHANGERS.DUT_DUO_ID, DUTS_DUO_AIR_CURTAINS.DUT_DUO_ID, DUTS_DUO_CONDENSERS.DUT_DUO_ID, DUTS_DUO_EVAPORATORS.DUT_DUO_ID))
    LEFT JOIN DUTS_DEVICES ON (DUTS_DUO.DUT_DEVICE_ID = DUTS_DEVICES.ID)
    LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = COALESCE(DACS_CONDENSERS.DAC_DEVICE_ID, DACS_EVAPORATORS.DAC_DEVICE_ID, DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID))
    LEFT JOIN DEVICES ON (DEVICES.ID = COALESCE(DACS_DEVICES.DEVICE_ID, DUTS_DEVICES.DEVICE_ID))
    LEFT JOIN MACHINES ON MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID)
    LEFT JOIN CURRENT_DEVICE_STATE ON (DEVICES.DEVICE_CODE =CURRENT_DEVICE_STATE.DEVICE_CODE)
  `
  
  if (qPars.operation_modes?.length) {
    sentence += `
    LEFT JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID)
    LEFT JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (CURRENT_AUTOMATIONS_PARAMETERS.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)
    `
  }

  sentence += checkTempAmb({ tempAmb: qPars.tempAmb });

  conditions.push('CLUNITS.CLIENT_ID IS NOT NULL AND CLUNITS.UNIT_ID IS NOT NULL AND MACHINES.ID IS NOT NULL');
  if (qPars.clientIds?.length) { conditions.push(`(CLUNITS.CLIENT_ID IN (:clientIds))`) }
  if (qPars.stateIds?.length) { conditions.push(`CITY.STATE_ID IN (:stateIds)`) }
  if (qPars.cityIds?.length) { conditions.push(`CLUNITS.CITY_ID IN (:cityIds)`) }
  if (qPars.unitIds?.length) { conditions.push(`ASSETS.UNIT_ID IN (:unitIds)`) }
  if (qPars.machinesTypes?.length) { conditions.push(`MACHINES.TYPE IN (:machinesTypes)`) }
  if (qPars.operation_modes?.length) { conditions.push('CURRENT_AUTOMATIONS_PARAMETERS.MODE IN (:operation_modes)') }
  if (qPars.stateDev?.length) { conditions.push(`CURRENT_DEVICE_STATE.STATE IN (:stateDev)`)}
  if (qPars.tempAmb?.length) {
    conditions.push(generateTemperatureConditions({ tempAmb: qPars.tempAmb }));
  }
  if (qPars.machineIds?.length) { conditions.push(`MACHINES.ID IN (:machineIds)`) }
  if (qPars.INCLUDE_INSTALLATION_UNIT === false) { conditions.push(`CLUNITS.PRODUCTION = 1`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.querySingle<{
    TOTAL_CAPACITY_PWR_TR: number
    TOTAL_CAPACITY_PWR_BTU: number
    TOTAL_MACHINE_KW: number
    TOTAL_ASSETS: number
    TOTAL_UNITS: number
    TOTAL_CITY: number
    TOTAL_STATE: number
    TOTAL_MACHINES: number
    TOTAL_H_INDEX100: number
    TOTAL_H_INDEX50: number
    TOTAL_H_INDEX75: number
    TOTAL_H_INDEX25: number
    TOTAL_H_INDEX2: number
    TOTAL_H_INDEX4: number
    TOTAL_H_INDEX_NULL: number
  }>(sentence, qPars)
}

export async function getMachinesIds(qPars: {
  clientIds?: number[],
  stateIds?: number[],
  cityIds?: string[],
  unitIds?: number[],
  machineIds?: number[],
  machinesTypes?: string[],
  health?: number[],
  operation_modes?: string[],
  stateDev?: string[],
  INCLUDE_INSTALLATION_UNIT?: boolean,
  tempAmb?: string[],
  onlyAut?: boolean
}) {
  const conditions = [];
  let sentence = `
  SELECT DISTINCT
	  MACHINES.ID AS MACHINE_ID
  `

  sentence += `
    FROM ASSETS
    LEFT JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
    LEFT JOIN EVAPORATORS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
    LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ASSET_ID = ASSETS.ID)
    LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = ASSETS.UNIT_ID)
    LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = CLUNITS.CLIENT_ID)
    LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
    INNER JOIN ASSETS_HEALTH ON (ASSETS_HEALTH.ASSET_ID = ASSETS.ID)
    INNER JOIN ASSETS_HEALTH_HIST ON (ASSETS_HEALTH_HIST.ID = ASSETS_HEALTH.HEALTH_HIST_ID)
    LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
    LEFT JOIN DUTS_DUO_ASSET_HEAT_EXCHANGERS ON (DUTS_DUO_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
    LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
    LEFT JOIN DUTS_DUO_EVAPORATORS ON (DUTS_DUO_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
    LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.CONDENSER_ID = CONDENSERS.ID)
    LEFT JOIN DUTS_DUO_CONDENSERS ON (DUTS_DUO_CONDENSERS.CONDENSER_ID = CONDENSERS.ID)
    LEFT JOIN DUTS_DUO ON (DUTS_DUO.ID = COALESCE(DUTS_DUO_ASSET_HEAT_EXCHANGERS.DUT_DUO_ID, DUTS_DUO_CONDENSERS.DUT_DUO_ID, DUTS_DUO_EVAPORATORS.DUT_DUO_ID))
    LEFT JOIN DUTS_DEVICES ON (DUTS_DUO.DUT_DEVICE_ID = DUTS_DEVICES.ID)
    LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = COALESCE(DACS_CONDENSERS.DAC_DEVICE_ID, DACS_EVAPORATORS.DAC_DEVICE_ID, DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID))
    LEFT JOIN DEVICES ON (DEVICES.ID = COALESCE(DACS_DEVICES.DEVICE_ID, DUTS_DEVICES.DEVICE_ID))
    LEFT JOIN MACHINES ON MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID)
    LEFT JOIN CURRENT_DEVICE_STATE ON (DEVICES.DEVICE_CODE = CURRENT_DEVICE_STATE.DEVICE_CODE)
  `
  
  if (qPars.operation_modes?.length) {
    sentence += `
    LEFT JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID)
    LEFT JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (CURRENT_AUTOMATIONS_PARAMETERS.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)
    `
  }
  conditions.push('CLUNITS.CLIENT_ID IS NOT NULL AND CLUNITS.UNIT_ID IS NOT NULL AND MACHINES.ID IS NOT NULL');
  if (qPars.tempAmb?.length) {
    sentence += checkTempAmb({ tempAmb: qPars.tempAmb });
    conditions.push(generateTemperatureConditions({ tempAmb: qPars.tempAmb }));
  }
  if (qPars.clientIds?.length) { conditions.push(`(CLUNITS.CLIENT_ID IN (:clientIds))`) }
  if (qPars.health?.length && !qPars.health.includes(2)) { conditions.push(`ASSETS_HEALTH_HIST.H_INDEX IN (:health)`)}
  if (qPars.health?.length && qPars.health.includes(2)) { conditions.push(`(ASSETS_HEALTH_HIST.H_INDEX IN (:health) OR ASSETS_HEALTH_HIST.H_INDEX <= 2)`) }
  if (qPars.stateIds?.length) { conditions.push(`CITY.STATE_ID IN (:stateIds)`) }
  if (qPars.cityIds?.length) { conditions.push(`CLUNITS.CITY_ID IN (:cityIds)`) }
  if (qPars.unitIds?.length) { conditions.push(`ASSETS.UNIT_ID IN (:unitIds)`) }
  if (qPars.machinesTypes?.length) { conditions.push(`MACHINES.TYPE IN (:machinesTypes)`) }
  if (qPars.onlyAut) {
    sentence+= `
    LEFT JOIN DAMS_AUTOMATIONS ON MACHINES.ID = DAMS_AUTOMATIONS.MACHINE_ID
    LEFT JOIN DAMS_DEVICES DAM_AUT ON DAM_AUT.ID = DAMS_AUTOMATIONS.DAM_DEVICE_ID
    LEFT JOIN DUTS_AUTOMATION ON MACHINES.ID = DUTS_AUTOMATION.MACHINE_ID
    LEFT JOIN DUTS_DEVICES DUT_AUT ON DUT_AUT.ID = DUTS_AUTOMATION.DUT_DEVICE_ID
    LEFT JOIN DACS_AUTOMATIONS ON MACHINES.ID = DACS_AUTOMATIONS.MACHINE_ID
    LEFT JOIN DACS_DEVICES DAC_AUT ON DAC_AUT.ID = DACS_AUTOMATIONS.DAC_DEVICE_ID
    LEFT JOIN DRIS_AUTOMATIONS ON MACHINES.ID = DRIS_AUTOMATIONS.MACHINE_ID
    LEFT JOIN CHILLERS ON MACHINES.ID = CHILLERS.MACHINE_ID
    LEFT JOIN CHILLER_CARRIER_MODELS ON CHILLER_CARRIER_MODELS.ID = CHILLERS.CHILLER_CARRIER_MODEL_ID
    LEFT JOIN DRIS_CHILLERS ON CHILLERS.ID = DRIS_CHILLERS.CHILLER_ID
    LEFT JOIN DRIS_DEVICES ON DRIS_DEVICES.ID = COALESCE(DRIS_AUTOMATIONS.DRI_DEVICE_ID, DRIS_CHILLERS.DRI_DEVICE_ID)
    LEFT JOIN DEVICES DEVICES_AUT ON DEVICES_AUT.ID = COALESCE(DRIS_DEVICES.DEVICE_ID, DAC_AUT.DEVICE_ID, DUT_AUT.DEVICE_ID, DAM_AUT.DEVICE_ID)
    `;
    conditions.push(`DEVICES_AUT.DEVICE_CODE IS NOT NULL`);
  }
  if (qPars.operation_modes?.length) { conditions.push('CURRENT_AUTOMATIONS_PARAMETERS.MODE IN (:operation_modes)') }
  if (qPars.stateDev?.length) { conditions.push(`CURRENT_DEVICE_STATE.STATE IN (:stateDev)`)}
  if (qPars.machineIds?.length) { conditions.push(`MACHINES.ID IN (:machineIds)`) }
  if (qPars.INCLUDE_INSTALLATION_UNIT === false) { conditions.push(`CLUNITS.PRODUCTION = 1`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    MACHINE_ID: number
  }>(sentence, qPars)
}

export async function getListAssetMachinesAnalysis(qPars: {
  machineIds?: number[],
}) {
  const conditions = [];
  let sentence = `
  SELECT
		MACHINES.ID AS MACHINE_ID,
    ASSETS.NAME AS ASSET_NAME,
    ASSETS.ID AS ASSET_ID,
    ASSETS.DAT_CODE,
    DEVICES.DEVICE_CODE,
    CASE
      WHEN EVAPORATORS.CAPACITY_POWER IS NOT NULL AND EVAPORATORS.CAPACITY_UNIT = 'TR' 
        THEN EVAPORATORS.CAPACITY_POWER
      WHEN EVAPORATORS.CAPACITY_POWER IS NOT NULL 
        THEN EVAPORATORS.CAPACITY_POWER / 12000
      WHEN CONDENSERS.CAPACITY_POWER IS NOT NULL AND CONDENSERS.CAPACITY_UNIT = 'TR' 
        THEN CONDENSERS.CAPACITY_POWER
      WHEN CONDENSERS.CAPACITY_POWER IS NOT NULL 
        THEN CONDENSERS.CAPACITY_POWER / 12000
      WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER IS NOT NULL AND ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT = 'TR' 
        THEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER
      WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER IS NOT NULL 
        THEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER / 12000
      ELSE NULL
    END AS CAPACITY_PWR,
    CASE
      WHEN EVAPORATORS.CAPACITY_UNIT IS NOT NULL THEN EVAPORATORS.CAPACITY_UNIT
      WHEN CONDENSERS.CAPACITY_UNIT IS NOT NULL THEN CONDENSERS.CAPACITY_UNIT
      WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT
      ELSE NULL
    END AS CAPACITY_UNIT,
    CASE
      WHEN EVAPORATORS.CAPACITY_UNIT IS NOT NULL THEN EVAPORATORS.MACHINE_KW 
      WHEN CONDENSERS.CAPACITY_UNIT IS NOT NULL THEN CONDENSERS.MACHINE_KW 
      WHEN ASSET_HEAT_EXCHANGERS.MACHINE_KW  IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.MACHINE_KW
      ELSE NULL
    END AS MACHINE_KW,
    ASSETS_HEALTH_HIST.H_INDEX,
    BRAND.OPT_LABEL AS MCHN_BRAND,
    CURRENT_DEVICE_STATE.STATE_CONN AS STATUS_WIFI,
    CURRENT_DEVICE_STATE.STATE AS STATE,
    ASSETS.MODEL AS MODEL,
    VTMACHINETYPES.NAME AS AST_ROLE_NAME
  `

  sentence += `
  FROM ASSETS
    LEFT JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
    LEFT JOIN EVAPORATORS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
    LEFT JOIN AIR_CURTAINS ON (AIR_CURTAINS.ASSET_ID = ASSETS.ID)
    LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ASSET_ID = ASSETS.ID)
    LEFT JOIN ASSETS_HEALTH ON (ASSETS_HEALTH.ASSET_ID = ASSETS.ID)
    LEFT JOIN ASSETS_HEALTH_HIST ON (ASSETS_HEALTH_HIST.ID = ASSETS_HEALTH.HEALTH_HIST_ID)
	  LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
    LEFT JOIN DUTS_DUO_ASSET_HEAT_EXCHANGERS ON (DUTS_DUO_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
    LEFT JOIN DUTS_DUO_AIR_CURTAINS ON (DUTS_DUO_AIR_CURTAINS.AIR_CURTAIN_ID = AIR_CURTAINS.ID)
    LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
    LEFT JOIN DUTS_DUO_EVAPORATORS ON (DUTS_DUO_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
    LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.CONDENSER_ID = CONDENSERS.ID)
    LEFT JOIN DUTS_DUO_CONDENSERS ON (DUTS_DUO_CONDENSERS.CONDENSER_ID = CONDENSERS.ID)
    LEFT JOIN DUTS_DUO ON (DUTS_DUO.ID = COALESCE(DUTS_DUO_ASSET_HEAT_EXCHANGERS.DUT_DUO_ID, DUTS_DUO_AIR_CURTAINS.DUT_DUO_ID, DUTS_DUO_CONDENSERS.DUT_DUO_ID, DUTS_DUO_EVAPORATORS.DUT_DUO_ID))
    LEFT JOIN DUTS_DEVICES ON (DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID)
    LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = COALESCE(DACS_CONDENSERS.DAC_DEVICE_ID, DACS_EVAPORATORS.DAC_DEVICE_ID, DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID))
    LEFT JOIN CHILLERS ON ASSETS.ID = CHILLERS.ASSET_ID
    LEFT JOIN CHILLER_CARRIER_MODELS ON CHILLER_CARRIER_MODELS.ID = CHILLERS.CHILLER_CARRIER_MODEL_ID
    LEFT JOIN DRIS_CHILLERS ON CHILLERS.ID = DRIS_CHILLERS.CHILLER_ID
    LEFT JOIN MACHINES ON (MACHINES.ID = COALESCE(AIR_CURTAINS.MACHINE_ID, CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID, CHILLERS.MACHINE_ID))
    LEFT JOIN DRIS_AUTOMATIONS ON MACHINES.ID = DRIS_AUTOMATIONS.MACHINE_ID
    LEFT JOIN DRIS_DEVICES ON DRIS_DEVICES.ID = COALESCE(DRIS_AUTOMATIONS.DRI_DEVICE_ID, DRIS_CHILLERS.DRI_DEVICE_ID)
    LEFT JOIN DEVICES ON (DEVICES.ID = COALESCE(DACS_DEVICES.DEVICE_ID, DUTS_DEVICES.DEVICE_ID, DRIS_DEVICES.DEVICE_ID))
	  LEFT JOIN CURRENT_DEVICE_STATE ON (DEVICES.DEVICE_CODE = CURRENT_DEVICE_STATE.DEVICE_CODE)
    LEFT JOIN AV_OPTS BRAND ON (BRAND.OPT_ID = MACHINES.BRAND)
    LEFT JOIN VTMACHINETYPES ON VTMACHINETYPES.ID = CASE
	    WHEN AIR_CURTAINS.ID IS NOT NULL THEN 3
	    WHEN CONDENSERS.ID IS NOT NULL THEN 2
	    WHEN EVAPORATORS.ID IS NOT NULL THEN 1
	    ELSE NULL
  	END
  `;

  if (qPars.machineIds?.length) { conditions.push(`MACHINES.ID IN (:machineIds)`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  sentence += 'ORDER BY ASSET_NAME';

  return sqldb.query<{
    MACHINE_ID: number,
    ASSET_NAME: string,
    ASSET_ID: number,
    DAT_CODE: string,
    DEVICE_CODE: string,
    CAPACITY_PWR: number,
    CAPACITY_UNIT: string,
    MACHINE_KW: number,
    H_INDEX: number,
    BRAND: string,
    STATE_CONN: string,
    STATE: string,
    MODEL: string,
    ASSET_TYPE: string,
    AST_ROLE_NAME: string,
  }>(sentence, qPars)
}