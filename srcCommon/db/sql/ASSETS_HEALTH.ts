import * as sqldb from '../connectSql'
import { saveOperationLog, OperationLogData } from '../dbModifLog'
import { dbLogger } from '../../helpers/logger'

export function getHealthStatus(qPars: { DAC_ID: string }) {
  let sentence = `
      SELECT
        DACS_DEVICES.ID AS DAC_DEVICE_ID,
        DUTS_DUO.ID as DUT_DUO_ID,
        DUTS_DEVICES.ID as DUT_DEVICE_ID,
        ASSETS_HEALTH_HIST.H_INDEX,
        ASSETS_HEALTH_HIST.H_DESC,
        P_CAUSES.CAUSES AS P_CAUSES,
        FAULTS_DATAS.DATA AS FAULTS_DATA,
        HEALTH_BEFORE_OFFLINE.H_OFFL,
        DEVICES_UNITS.UNIT_ID,
        DEVICES_CLIENTS.CLIENT_ID,
        COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID) AS MACHINE_ID,
        ASSETS.ID AS ASSET_ID,
        ASSETS_HEALTH_HIST.ID AS ASSET_HEALTH_HIST_ID,
        ASSETS_HEALTH_HIST.DAT_REPORT AS H_DAT_REPORT,
        TYPEHEALTHCHANGE.TYPECHANGE AS H_TYPECHANGE
    `
  sentence += `
      FROM
        DACS_DEVICES
        INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
        LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
        LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
        LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
        LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
        LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
        LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
        LEFT JOIN MACHINES ON MACHINES_ID=COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID)
        LEFT JOIN ASSETS ON (ASSETS.ID = COALESCE(CONDENSERS.ASSET_ID, EVAPORATORS.ASSET_ID))
        LEFT JOIN ASSETS_HEALTH ON (ASSETS_HEALTH.ASSET_ID = ASSETS.ID)
        LEFT JOIN ASSETS_HEALTH_HIST ON (ASSETS_HEALTH_HIST.ID = ASSETS_HEALTH.HEALTH_HIST_ID)
        LEFT JOIN P_CAUSES ON (P_CAUSES.ID = ASSETS_HEALTH_HIST.P_CAUSE_ID)
        LEFT JOIN FAULTS_DATAS ON (FAULTS_DATAS.ASSET_HEALTH_ID =  ASSETS_HEALTH.ID)
        LEFT JOIN HEALTH_BEFORE_OFFLINE ON (HEALTH_BEFORE_OFFLINE.ASSET_HEALTH_ID = ASSETS_HEALTH.ID)
        LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
        LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
        LEFT JOIN TYPEHEALTHCHANGE ON (TYPEHEALTHCHANGE.ID = ASSETS_HEALTH_HIST.CT_ID)
    `

  sentence += ` WHERE DEVICES.DEVICE_CODE = :DAC_ID `
  
  return sqldb.querySingle<{
    DAC_DEVICE_ID: number
    H_INDEX: number
    H_DESC: string
    P_CAUSES: string
    FAULTS_DATA: string
    H_OFFL: string
    UNIT_ID: number
    MACHINE_ID: number
    CLIENT_ID: number
    ASSET_ID: number
    ASSET_HEALTH_HIST_ID: number
    H_DAT_REPORT: number
    H_TYPECHANGE: string
    DUT_DUO_ID:number
    DUT_DEVICE_ID: number
  }>(sentence, qPars)
}

export function getDevHealthStatus(
  qPars: { DEV_ID: string }
) {
  let sentence = `
    SELECT ASSETS.ID AS ASSET_ID,
      ASSETS_HEALTH_HIST.H_INDEX,
      ASSETS_HEALTH_HIST.H_DESC,
      P_CAUSES.CAUSES AS P_CAUSES,
      FAULTS_DATAS.DATA AS FAULTS_DATA,
      HEALTH_BEFORE_OFFLINE.H_OFFL,
      DEVICES_UNITS.UNIT_ID,
      DEVICES_CLIENTS.CLIENT_ID,
      COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID) AS MACHINE_ID,
      ASSETS_HEALTH_HIST.ID AS ASSET_HEALTH_HIST_ID,
      DACS_DEVICES.DEVICE_ID as DAC_DEVICE_ID,
      DUTS_DUO.ID as DUT_DUO_ID,
      DUTS_DEVICES.ID as DUT_DEVICE_ID,
      DEVICES.DEVICE_CODE as DEV_ID,
      ASSETS_HEALTH_HIST.DAT_REPORT AS H_DAT_REPORT,
      TYPEHEALTHCHANGE.TYPECHANGE AS H_TYPECHANGE,
      CASE
        WHEN CONDENSERS.APPL_CFG IS NOT NULL THEN CONDENSERS.APPL_CFG
        WHEN EVAPORATORS.APPL_CFG IS NOT NULL THEN EVAPORATORS.APPL_CFG
        WHEN ASSET_HEAT_EXCHANGERS.APPL_CFG IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.APPL_CFG
        WHEN DUTS_DUO.ID IS NOT NULL THEN 'DUO'
        ELSE NULL
      END AS ASSET_APPLICATION,
      MACHINES.APPLICATION AS MACHINE_APPLICATION,
      CASE
        WHEN CONDENSERS.ID IS NOT NULL THEN 'CONDENSER'
        WHEN EVAPORATORS.ID IS NOT NULL THEN 'EVAPORATOR'
        WHEN ASSET_HEAT_EXCHANGERS.ID IS NOT NULL then 'HEAT EXCHANGER'
        ELSE NULL
      END AS ASSET_ROLE
    FROM DEVICES
      LEFT JOIN DACS_DEVICES ON DEVICES.ID=DACS_DEVICES.DEVICE_ID
      LEFT JOIN DACS_CONDENSERS ON DACS_DEVICES.ID=DACS_CONDENSERS.DAC_DEVICE_ID
      LEFT JOIN DACS_EVAPORATORS ON DACS_DEVICES.ID=DACS_EVAPORATORS.DAC_DEVICE_ID
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS dahe ON DACS_DEVICES.ID=dahe.DAC_DEVICE_ID
      LEFT JOIN DUTS_DEVICES ON DEVICES.ID=DUTS_DEVICES.DEVICE_ID
      LEFT JOIN DUTS_DUO ON DUTS_DEVICES.ID=DUTS_DUO.DUT_DEVICE_ID
      LEFT JOIN DUTS_DUO_EVAPORATORS ON DUTS_DUO_EVAPORATORS.DUT_DUO_ID = DUTS_DUO.ID
      LEFT JOIN DUTS_DUO_CONDENSERS ON DUTS_DUO_CONDENSERS.DUT_DUO_ID = DUTS_DUO.ID
      LEFT JOIN DUTS_DUO_AIR_CURTAINS ON DUTS_DUO_AIR_CURTAINS.DUT_DUO_ID = DUTS_DUO.ID
      LEFT JOIN DUTS_DUO_ASSET_HEAT_EXCHANGERS DDAHE ON DDAHE.DUT_DUO_ID = DUTS_DUO.ID
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON ASSET_HEAT_EXCHANGERS.ID=COALESCE(dahe.ASSET_HEAT_EXCHANGER_ID, DDAHE.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN CONDENSERS ON CONDENSERS.ID=COALESCE(DACS_CONDENSERS.CONDENSER_ID, DUTS_DUO_CONDENSERS.CONDENSER_ID)
      LEFT JOIN EVAPORATORS ON EVAPORATORS.ID=COALESCE(DACS_EVAPORATORS.EVAPORATOR_ID, DUTS_DUO_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN AIR_CURTAINS ON DUTS_DUO_AIR_CURTAINS.AIR_CURTAIN_ID=AIR_CURTAINS.ID
      LEFT JOIN MACHINES ON MACHINES.ID=COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID, AIR_CURTAINS.MACHINE_ID)
      LEFT JOIN ASSETS ON ASSETS.ID=COALESCE(CONDENSERS.ASSET_ID, EVAPORATORS.ASSET_ID, ASSET_HEAT_EXCHANGERS.ASSET_ID)
      LEFT JOIN ASSETS_HEALTH ON ASSETS_HEALTH.ASSET_ID=ASSETS.ID
      LEFT JOIN ASSETS_HEALTH_HIST ON ASSETS_HEALTH.HEALTH_HIST_ID=ASSETS_HEALTH_HIST.ID
      LEFT JOIN FAULTS_DATAS on FAULTS_DATAS.ASSET_HEALTH_ID=ASSETS_HEALTH.ID
      LEFT JOIN P_CAUSES on ASSETS_HEALTH_HIST.P_CAUSE_ID=P_CAUSES.ID
      LEFT JOIN HEALTH_BEFORE_OFFLINE on HEALTH_BEFORE_OFFLINE.ASSET_HEALTH_ID=ASSETS_HEALTH.ID
      LEFT JOIN DEVICES_UNITS on DEVICES_UNITS.DEVICE_ID=DEVICES.ID
      LEFT JOIN DEVICES_CLIENTS ON DEVICES_CLIENTS.DEVICE_ID=DEVICES.ID
      LEFT JOIN TYPEHEALTHCHANGE ON (TYPEHEALTHCHANGE.ID = ASSETS_HEALTH_HIST.CT_ID)
    `

    if (qPars.DEV_ID) sentence += ` WHERE DEVICES.DEVICE_CODE = :DEV_ID `
    return sqldb.querySingle<Awaited<ReturnType<typeof getAssetHealthStatus>>>(sentence, qPars)
}

export function getAssetHealthStatus(
  qPars: { ASSET_ID: number, DEV_ID?: never } | { ASSET_ID?: never, DEV_ID: string }
): Promise<{
  H_INDEX: number
  H_DESC: string
  P_CAUSES: string
  FAULTS_DATA: string
  H_OFFL: string
  UNIT_ID: number
  MACHINE_ID: number
  CLIENT_ID: number
  ASSET_ID: number
  ASSET_HEALTH_HIST_ID: number
  DAC_DEVICE_ID: number
  DUT_DUO_ID:number
  DUT_DEVICE_ID: number
  DEV_ID: string
  H_DAT_REPORT: number
  H_TYPECHANGE: string
  ASSET_APPLICATION: string
  MACHINE_APPLICATION: string
  ASSET_ROLE: string
}> {
  if (qPars.DEV_ID) return getDevHealthStatus({ DEV_ID: qPars.DEV_ID});
  let sentence = `
    WITH health AS (
    SELECT 
      ah.ID AS 'HEALTH_ID',
      ahh.ID,
      ahh.H_DESC,
      ahh.H_INDEX,
      ahh.P_CAUSE_ID,
      ahh.CT_ID,
      ahh.DAT_REPORT,
      ah.ASSET_ID
    FROM ASSETS_HEALTH ah
    INNER JOIN ASSETS_HEALTH_HIST ahh ON ah.HEALTH_HIST_ID = ahh.ID
  ) 
  SELECT 
    ASSETS.ID AS ASSET_ID,
    health.H_INDEX,
    health.H_DESC,
    P_CAUSES.CAUSES AS P_CAUSES,
    FAULTS_DATAS.DATA AS FAULTS_DATA,
    HEALTH_BEFORE_OFFLINE.H_OFFL,
    DEVICES_UNITS.UNIT_ID,
    DEVICES_CLIENTS.CLIENT_ID,
    COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, AHE.MACHINE_ID) AS MACHINE_ID,
    health.ID AS ASSET_HEALTH_HIST_ID,
    DACS_DEVICES.DEVICE_ID AS DAC_DEVICE_ID,
    DUTS_DUO.ID AS DUT_DUO_ID,
    DUTS_DEVICES.ID AS DUT_DEVICE_ID,
    DEVICES.DEVICE_CODE AS DEV_ID,
    health.DAT_REPORT AS H_DAT_REPORT,
    TYPEHEALTHCHANGE.TYPECHANGE AS H_TYPECHANGE,
    CASE
      WHEN CONDENSERS.APPL_CFG IS NOT NULL THEN CONDENSERS.APPL_CFG
      WHEN EVAPORATORS.APPL_CFG IS NOT NULL THEN EVAPORATORS.APPL_CFG
      WHEN AHE.APPL_CFG IS NOT NULL THEN AHE.APPL_CFG
      WHEN DUTS_DUO.ID IS NOT NULL THEN 'DUO'
      ELSE NULL
    END AS ASSET_APPLICATION,
    MACHINES.APPLICATION AS MACHINE_APPLICATION,
    CASE
      WHEN CONDENSERS.ID IS NOT NULL THEN 'CONDENSER'
      WHEN EVAPORATORS.ID IS NOT NULL THEN 'EVAPORATOR'
      WHEN AHE.ID IS NOT NULL then 'HEAT EXCHANGER'
      ELSE NULL
    END AS ASSET_ROLE
  FROM
    ASSETS
    LEFT JOIN health ON health.ASSET_ID = ASSETS.ID
    LEFT JOIN FAULTS_DATAS ON FAULTS_DATAS.ASSET_HEALTH_ID = health.HEALTH_ID
    LEFT JOIN P_CAUSES ON health.P_CAUSE_ID = P_CAUSES.ID
    LEFT JOIN HEALTH_BEFORE_OFFLINE ON HEALTH_BEFORE_OFFLINE.ASSET_HEALTH_ID = health.HEALTH_ID
    LEFT JOIN CONDENSERS ON ASSETS.ID = CONDENSERS.ASSET_ID
    LEFT JOIN EVAPORATORS ON ASSETS.ID = EVAPORATORS.ASSET_ID
    LEFT JOIN ASSET_HEAT_EXCHANGERS AHE ON ASSETS.ID = AHE.ASSET_ID
    LEFT JOIN MACHINES ON MACHINES.ID=COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, AHE.MACHINE_ID)
    LEFT JOIN DACS_CONDENSERS ON DACS_CONDENSERS.CONDENSER_ID = CONDENSERS.ID
    LEFT JOIN DACS_EVAPORATORS ON DACS_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID
    LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS DHE ON DHE.ASSET_HEAT_EXCHANGER_ID = AHE.ID
    LEFT JOIN DACS_DEVICES ON DACS_DEVICES.ID = COALESCE(DACS_CONDENSERS.DAC_DEVICE_ID, DACS_EVAPORATORS.DAC_DEVICE_ID, DHE.DAC_DEVICE_ID)
    LEFT JOIN DUTS_DUO_EVAPORATORS ON DUTS_DUO_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID
    LEFT JOIN DUTS_DUO_ASSET_HEAT_EXCHANGERS ON DUTS_DUO_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = AHE.ID
    LEFT JOIN DUTS_DUO_CONDENSERS ON DUTS_DUO_CONDENSERS.CONDENSER_ID = CONDENSERS.ID
    LEFT JOIN DUTS_DUO ON DUTS_DUO.ID = COALESCE(DUTS_DUO_ASSET_HEAT_EXCHANGERS.DUT_DUO_ID, DUTS_DUO_EVAPORATORS.DUT_DUO_ID, DUTS_DUO_CONDENSERS.DUT_DUO_ID)
    LEFT JOIN DUTS_DEVICES ON DUTS_DUO.DUT_DEVICE_ID = DUTS_DEVICES.ID
    INNER JOIN DEVICES ON DEVICES.ID = COALESCE(DACS_DEVICES.DEVICE_ID, DUTS_DEVICES.DEVICE_ID)
    LEFT JOIN DEVICES_UNITS ON DEVICES_UNITS.DEVICE_ID = DEVICES.ID
    LEFT JOIN DEVICES_CLIENTS ON DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID
    LEFT JOIN TYPEHEALTHCHANGE ON TYPEHEALTHCHANGE.ID = health.CT_ID
    `

  if (qPars.ASSET_ID) sentence += ` WHERE ASSETS.ID = :ASSET_ID `
  else if (qPars.DEV_ID) sentence += ` WHERE DEVICES.DEVICE_CODE = :DEV_ID `
  
  return sqldb.querySingle<{
    H_INDEX: number
    H_DESC: string
    P_CAUSES: string
    FAULTS_DATA: string
    H_OFFL: string
    UNIT_ID: number
    MACHINE_ID: number
    CLIENT_ID: number
    ASSET_ID: number
    ASSET_HEALTH_HIST_ID: number
    DAC_DEVICE_ID: number
    DUT_DUO_ID:number
    DUT_DEVICE_ID: number
    DEV_ID: string
    H_DAT_REPORT: number
    H_TYPECHANGE: string
    ASSET_APPLICATION: string
    MACHINE_APPLICATION: string
    ASSET_ROLE: string
  }>(sentence, qPars)
}

export function getAssetsListHealth(
  qPars: {ASSET_ID?: number, DEV_ID?: string, ASSET_IDS?: number[] }, 
  admPars?: { withClientData: boolean, deviceType?: "dac" | "dut", single?: boolean },
) {

  let select = `ASSETS.ID AS ASSET_ID,
    health.H_INDEX,
    health.H_DESC,
    P_CAUSES.CAUSES AS P_CAUSES,
    FAULTS_DATAS.DATA AS FAULTS_DATA,
    HEALTH_BEFORE_OFFLINE.H_OFFL,
    DEVICES_UNITS.UNIT_ID,
    DEVICES_CLIENTS.CLIENT_ID,
    COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID) AS MACHINE_ID,
    health.ID AS ASSET_HEALTH_HIST_ID,
    DACS_DEVICES.DEVICE_ID as DAC_DEVICE_ID,
    DUTS_DUO.ID as DUT_DUO_ID,
    DUTS_DEVICES.ID as DUT_DEVICE_ID,
    DEVICES.DEVICE_CODE as DEV_ID,
    health.DAT_REPORT AS H_DAT_REPORT,
    TYPEHEALTHCHANGE.TYPECHANGE AS H_TYPECHANGE`

  let table = `ASSETS
    LEFT JOIN health ON health.ASSET_ID=ASSETS.ID
    LEFT JOIN FAULTS_DATAS on FAULTS_DATAS.ASSET_HEALTH_ID=health.HEALTH_ID
    LEFT JOIN P_CAUSES on health.P_CAUSE_ID=P_CAUSES.ID
    LEFT JOIN HEALTH_BEFORE_OFFLINE on HEALTH_BEFORE_OFFLINE.ASSET_HEALTH_ID=health.HEALTH_ID
    LEFT JOIN CONDENSERS on ASSETS.ID=CONDENSERS.ASSET_ID
    LEFT JOIN EVAPORATORS on ASSETS.ID=EVAPORATORS.ASSET_ID
    LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ASSET_ID = ASSETS.ID)
    LEFT JOIN DACS_CONDENSERS on DACS_CONDENSERS.CONDENSER_ID=CONDENSERS.ID
    LEFT JOIN DACS_EVAPORATORS on DACS_EVAPORATORS.EVAPORATOR_ID=EVAPORATORS.ID
    LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
    LEFT JOIN DACS_DEVICES on (DACS_DEVICES.ID=COALESCE(DACS_CONDENSERS.DAC_DEVICE_ID, DACS_EVAPORATORS.DAC_DEVICE_ID, DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID))
    LEFT JOIN DUTS_DUO_ASSET_HEAT_EXCHANGERS ON (DUTS_DUO_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
    LEFT JOIN DUTS_DUO_EVAPORATORS ON EVAPORATORS.ID = DUTS_DUO_EVAPORATORS.EVAPORATOR_ID
    LEFT JOIN DUTS_DUO ON DUTS_DUO.ID = COALESCE(DUTS_DUO_EVAPORATORS.DUT_DUO_ID, DUTS_DUO_ASSET_HEAT_EXCHANGERS.DUT_DUO_ID)
    LEFT JOIN DUTS_DEVICES ON DUTS_DEVICES.ID=DUTS_DUO.DUT_DEVICE_ID
    LEFT JOIN DEVICES on DEVICES.ID=COALESCE(DACS_DEVICES.DEVICE_ID, DUTS_DEVICES.DEVICE_ID)
    LEFT JOIN DEVICES_UNITS on DEVICES_UNITS.DEVICE_ID=DEVICES.ID
    LEFT JOIN DEVICES_CLIENTS ON DEVICES_CLIENTS.DEVICE_ID=DEVICES.ID
    LEFT JOIN TYPEHEALTHCHANGE ON (TYPEHEALTHCHANGE.ID = health.CT_ID)
    `

  if (admPars?.withClientData) {
    // note a vírgula
    select += `,
      CLUNITS.UNIT_NAME,
      CLIENTS.NAME as 'CLIENT_NAME'
    `
    table += `
    LEFT JOIN CLUNITS ON (DEVICES_UNITS.UNIT_ID=CLUNITS.UNIT_ID)
    LEFT JOIN CLIENTS ON (DEVICES_CLIENTS.CLIENT_ID=CLIENTS.CLIENT_ID)
    `
  }

  let sentence = `
  WITH health AS (
  	SELECT ah.ID AS 'HEALTH_ID',
      ahh.ID,
      ahh.H_DESC,
      ahh.H_INDEX,
      ahh.P_CAUSE_ID,
      ahh.CT_ID,
      ahh.DAT_REPORT,
      ah.ASSET_ID
    FROM ASSETS_HEALTH ah
    INNER JOIN ASSETS_HEALTH_HIST ahh ON ah.HEALTH_HIST_ID=ahh.ID
  ) SELECT ${select}
  	FROM ${table}
    `

  let conditions = [];

  if (qPars.ASSET_ID) conditions.push("ASSETS.ID = :ASSET_ID")
  else if (qPars.DEV_ID) conditions.push(`DEVICES.DEVICE_CODE = :DEV_ID`)
  else if (qPars.ASSET_IDS?.length > 0) conditions.push("ASSETS.ID IN (:ASSET_IDS)")
  else {
    conditions.push("health.H_INDEX IS NOT NULL");
  }

  if (admPars.deviceType === 'dac') {
    conditions.push("DACS_DEVICES.ID IS NOT NULL")
  }
  else if (admPars.deviceType === 'dut') {
    conditions.push("DUTS_DEVICES.ID IS NOT NULL")
  }

  sentence += ' WHERE ' + conditions.join(' AND ')

  if (admPars?.single) {
    sentence += `LIMIT 1`
  }
  
  return sqldb.query<{
    H_INDEX: number
    H_DESC: string
    P_CAUSES: string
    FAULTS_DATA: string
    H_OFFL: string
    UNIT_ID: number
    MACHINE_ID: number
    CLIENT_ID: number
    ASSET_ID: number
    ASSET_HEALTH_HIST_ID: number
    DAC_DEVICE_ID: number
    DUT_DUO_ID:number
    DUT_DEVICE_ID: number
    DEV_ID: string
    H_DAT_REPORT: number
    H_TYPECHANGE: string
    UNIT_NAME?: string
    CLIENT_NAME?: string
  }>(sentence, qPars)
}

export function getAssetsHealthsByUnitProduction(admPars: { oldProd: boolean }) {
  let sentence = `
  SELECT
    DEVICES.DEVICE_CODE AS DEV_ID,
    COALESCE(dacs_assets.ID, duts_data.ASSET_ID) AS ASSET_ID,
    DEVICES_UNITS.UNIT_ID,
    ASSETS_HEALTH.HEALTH_HIST_ID,
    ASSETS_HEALTH_HIST.H_INDEX,
    CLUNITS.UNIT_NAME
  FROM
    DEVICES
    LEFT JOIN DACS_DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
    LEFT JOIN (
      SELECT duts_assets.ID as ASSET_ID, DUTS_DEVICES.DEVICE_ID FROM
      DUTS_DEVICES 
        LEFT JOIN DUTS_DUO ON (DUTS_DUO.DUT_DEVICE_ID = DUTS_DEVICES.ID)
        LEFT JOIN DUTS_DUO_EVAPORATORS ON (DUTS_DUO_EVAPORATORS.DUT_DUO_ID = DUTS_DUO.ID)
        LEFT JOIN EVAPORATORS duts_evaps ON (duts_evaps.ID = DUTS_DUO_EVAPORATORS.EVAPORATOR_ID)
        LEFT JOIN DUTS_DUO_ASSET_HEAT_EXCHANGERS ON (DUTS_DUO_ASSET_HEAT_EXCHANGERS.DUT_DUO_ID = DUTS_DUO.ID)
        LEFT JOIN ASSET_HEAT_EXCHANGERS duts_heat ON (duts_heat.ID = DUTS_DUO_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
        LEFT JOIN DUTS_DUO_CONDENSERS ON (DUTS_DUO_CONDENSERS.DUT_DUO_ID = DUTS_DUO.ID)
        LEFT JOIN CONDENSERS duts_conds ON (duts_conds.ID = DUTS_DUO_CONDENSERS.CONDENSER_ID)
        INNER JOIN ASSETS duts_assets ON (duts_assets.ID = COALESCE(duts_evaps.ASSET_ID, duts_heat.ASSET_ID, duts_conds.ASSET_ID))
    ) duts_data ON (DEVICES.ID = duts_data.DEVICE_ID)
    INNER JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
    INNER JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
    LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
    LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
    LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
    LEFT JOIN EVAPORATORS dacs_evaps ON (dacs_evaps.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
    LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
    LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
    LEFT JOIN ASSETS dacs_assets ON (dacs_assets.ID = COALESCE(dacs_evaps.ASSET_ID, CONDENSERS.ASSET_ID, ASSET_HEAT_EXCHANGERS.ASSET_ID))
    LEFT JOIN ASSETS_HEALTH ON (ASSETS_HEALTH.ASSET_ID = COALESCE (dacs_assets.ID, duts_data.ASSET_ID))
    LEFT JOIN ASSETS_HEALTH_HIST ON (ASSETS_HEALTH_HIST.ID = ASSETS_HEALTH.HEALTH_HIST_ID)
  `

  if (admPars.oldProd) {
    sentence += ` WHERE (CLUNITS.PRODUCTION_TIMESTAMP IS NOT NULL AND CLUNITS.PRODUCTION_TIMESTAMP < DATE_SUB(NOW(), INTERVAL 1 DAY))
      AND (ASSETS_HEALTH_HIST.H_INDEX = 1 OR ASSETS_HEALTH_HIST.H_INDEX IS NULL)
      AND (DACS_DEVICES.ID IS NOT NULL OR duts_data.DEVICE_ID IS NOT NULL)
    `
  }
  else {
    sentence += ` WHERE ((CLUNITS.PRODUCTION = 0 AND ASSETS_HEALTH_HIST.H_INDEX IS NULL)
      OR (CLUNITS.PRODUCTION_TIMESTAMP > DATE_SUB(NOW(), INTERVAL 1 DAY) AND ASSETS_HEALTH_HIST.H_INDEX IS NULL))
      AND (DACS_DEVICES.ID IS NOT NULL OR duts_data.DEVICE_ID IS NOT NULL)
      `
  }

  return sqldb.query<{
    DEV_ID: string
    ASSET_ID: number
    UNIT_ID: number
    HEALTH_HIST_ID: number
    H_INDEX: number
    UNIT_NAME: string
  }>(sentence , {})
}

export function healthDevs() {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DEV_ID,
      DEVICES_CLIENTS.CLIENT_ID,
      ASSETS_HEALTH_HIST.H_INDEX,
      ASSETS_HEALTH_HIST.H_DESC,
      CASE WHEN DACS_DEVICES.DATE_COMIS IS NOT NULL THEN '1' ELSE '0' END AS DAC_COMIS,
      DEVICES.DAT_BEGMON
  `
  sentence += `
    FROM
      ASSETS_HEALTH
      INNER JOIN ASSETS ON (ASSETS.ID = ASSETS_HEALTH.ASSET_ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
      LEFT JOIN DACS_CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
      LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = COALESCE(DACS_CONDENSERS.DAC_DEVICE_ID, DACS_EVAPORATORS.DAC_DEVICE_ID, DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID))
      LEFT JOIN DUTS_DUO_EVAPORATORS ON (EVAPORATORS.ID = DUTS_DUO_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DUTS_DUO_ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DUTS_DUO_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN DUTS_DUO_CONDENSERS ON (CONDENSERS.ID = DUTS_DUO_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DUTS_DUO ON (DUTS_DUO.ID = COALESCE(DUTS_DUO_EVAPORATORS.DUT_DUO_ID , DUTS_DUO_ASSET_HEAT_EXCHANGERS.DUT_DUO_ID , DUTS_DUO_CONDENSERS.DUT_DUO_ID))
      LEFT JOIN DUTS_DEVICES ON (DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID)
      INNER JOIN DEVICES ON (DEVICES.ID = COALESCE(DACS_DEVICES.DEVICE_ID, DUTS_DEVICES.DEVICE_ID))
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN ASSETS_HEALTH_HIST ON (ASSETS_HEALTH_HIST.ID = ASSETS_HEALTH.HEALTH_HIST_ID)
  `

  sentence += ` WHERE DEVICES_CLIENTS.CLIENT_ID IS NOT NULL `

  return sqldb.query<{
    DEV_ID: string
    CLIENT_ID: number
    H_INDEX: number
    H_DESC: string
    DAC_COMIS: string
    DAT_BEGMON: string
  }>(sentence)
}

export async function getAssetHealthByAssetId( qPars : { ASSET_ID: number }) {
  const sentence = `
    SELECT
      ASSETS_HEALTH.ID AS ASSET_HEALTH_ID,
      ASSETS_HEALTH.HEALTH_HIST_ID AS HEALTH_HIST_ID
    FROM
      ASSETS_HEALTH
    WHERE ASSETS_HEALTH.ASSET_ID = :ASSET_ID
  `
  return sqldb.querySingle<{
    ASSET_HEALTH_ID: number,
    HEALTH_HIST_ID: number
  }>(sentence, qPars)
}

export async function getAssetHealthByDevCode(qPars: { DEVICE_CODE: string,  }) {
  const sentence = `
    SELECT
      ASSETS_HEALTH.ID AS ASSET_HEALTH_ID,
      ASSETS_HEALTH.HEALTH_HIST_ID AS HEALTH_HIST_ID
    FROM DEVICES
      LEFT JOIN DACS_DEVICES ON DEVICES.ID=DACS_DEVICES.DEVICE_ID
      LEFT JOIN DACS_CONDENSERS ON DACS_DEVICES.ID=DACS_CONDENSERS.DAC_DEVICE_ID
      LEFT JOIN DACS_EVAPORATORS ON DACS_DEVICES.ID=DACS_EVAPORATORS.DAC_DEVICE_ID
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS dahe ON DACS_DEVICES.ID=dahe.DAC_DEVICE_ID
      LEFT JOIN DUTS_DEVICES ON DEVICES.ID=DUTS_DEVICES.DEVICE_ID
      LEFT JOIN DUTS_DUO ON DUTS_DEVICES.ID=DUTS_DUO.DUT_DEVICE_ID
      LEFT JOIN DUTS_DUO_EVAPORATORS ON DUTS_DUO_EVAPORATORS.DUT_DUO_ID = DUTS_DUO.ID
      LEFT JOIN DUTS_DUO_ASSET_HEAT_EXCHANGERS DDAHE ON DDAHE.DUT_DUO_ID = DUTS_DUO.ID
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON ASSET_HEAT_EXCHANGERS.ID=COALESCE(dahe.ASSET_HEAT_EXCHANGER_ID, DDAHE.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN CONDENSERS ON DACS_CONDENSERS.CONDENSER_ID=CONDENSERS.ID
      LEFT JOIN EVAPORATORS ON EVAPORATORS.ID=COALESCE(DACS_EVAPORATORS.EVAPORATOR_ID, DUTS_DUO_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN ASSETS ON ASSETS.ID=COALESCE(CONDENSERS.ASSET_ID, EVAPORATORS.ASSET_ID, ASSET_HEAT_EXCHANGERS.ASSET_ID)
      LEFT JOIN ASSETS_HEALTH ON ASSETS_HEALTH.ASSET_ID=ASSETS.ID
      LEFT JOIN ASSETS_HEALTH_HIST ON ASSETS_HEALTH.HEALTH_HIST_ID=ASSETS_HEALTH_HIST.ID
    WHERE DEVICES.DEVICE_CODE = :DEVICE_CODE
  `
  return sqldb.querySingle<{
    ASSET_HEALTH_ID?: number,
    HEALTH_HIST_ID?: number
  }>(sentence, qPars)
}

export async function w_deleteDacInfo(qPars: { DAC_DEVICE_ID: number }, operationLogData: OperationLogData) {
  const join = `
    INNER JOIN ASSETS ON (ASSETS.ID = ASSETS_HEALTH.ASSET_ID)
    LEFT JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
    LEFT JOIN EVAPORATORS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
    LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ASSET_ID = ASSETS.ID)
    LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
    LEFT JOIN DACS_CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
    LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
    INNER JOIN DACS_DEVICES ON (DACS_DEVICES.ID = COALESCe(DACS_CONDENSERS.DAC_DEVICE_ID, DACS_EVAPORATORS.DAC_DEVICE_ID, DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID))
  `
  const sentence = `DELETE FROM ASSETS_HEALTH ${join} WHERE DACS_DEVICES.ID = :DAC_DEVICE_ID`;

  if (operationLogData) {
    await saveOperationLog('ASSETS_HEALTH', sentence, qPars, operationLogData);
    dbLogger('ASSETS_HEALTH', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

export async function w_deleteFromClientDacs(qPars: { CLIENT_ID: number }, operationLogData: OperationLogData) {
  const join = `
    INNER JOIN ASSETS ON (ASSETS.ID = ASSETS_HEALTH.ASSET_ID)
    INNER JOIN CLUNITS ON (CLUNITS.UNIT_ID = ASSETS.UNIT_ID)
  `

  const sentence = `DELETE ASSETS_HEALTH FROM ASSETS_HEALTH ${join} WHERE CLUNITS.CLIENT_ID = :CLIENT_ID`;

  if (operationLogData) {
    await saveOperationLog('ASSETS_HEALTH', sentence, qPars, operationLogData);
    dbLogger('ASSETS_HEALTH', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}


/* @IFHELPER:FUNC insertOrUpdate = INSERT-UPDATE
  FROM ASSETS_HEALTH
  FIELD ASSETS_HEALTH.ASSET_ID
  FIELD ASSETS_HEALTH.HEALTH_HIST_ID
*/
export async function w_insertOrUpdate(qPars: { ASSET_ID: number, HEALTH_HIST_ID?: number }, operationLogData: OperationLogData) {
  const fields: string[] = []
  fields.push('ASSET_ID')
  fields.push('HEALTH_HIST_ID')

  let sentence = `INSERT INTO ASSETS_HEALTH (${fields.join(', ')}) VALUES (:${fields.join(', :')})`

  const updateFields: string[] = []
  updateFields.push("HEALTH_HIST_ID = :HEALTH_HIST_ID")
  sentence += ` ON DUPLICATE KEY UPDATE ${updateFields.join(', ')} `

  if (operationLogData) {
    await saveOperationLog('ASSETS_HEALTH', sentence, qPars, operationLogData);
    dbLogger('ASSETS_HEALTH', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

export async function w_removeAssetsFromClient(qPars: { CLIENT_ID: number }, operationLogData: OperationLogData) {
  const sentence = `
      DELETE
        ASSETS_HEALTH
      FROM
        ASSETS_HEALTH
          INNER JOIN ASSETS ON (ASSETS.ID = ASSETS_HEALTH.ASSET_ID)
          INNER JOIN CLUNITS ON (CLUNITS.UNIT_ID = ASSETS.UNIT_ID)
      WHERE CLUNITS.CLIENT_ID = :CLIENT_ID
  `

  if (operationLogData) {
    await saveOperationLog('ASSETS_HEALTH', sentence, qPars, operationLogData);
    dbLogger('ASSETS_HEALTH', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

export async function w_deleteByAssetId(qPars: { ASSET_ID: number }, operationLogData: OperationLogData) {
  const sentence = `
      DELETE
        ASSETS_HEALTH
      FROM
        ASSETS_HEALTH
          INNER JOIN ASSETS ON (ASSETS.ID = ASSETS_HEALTH.ASSET_ID)
        
      WHERE ASSETS.ID = :ASSET_ID
  `

  if (operationLogData) {
    await saveOperationLog('ASSETS_HEALTH', sentence, qPars, operationLogData);
    dbLogger('ASSETS_HEALTH', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

export async function w_deleteByHealthHistId(qPars: { HEALTH_HIST_ID: number }, operationLogData: OperationLogData) {
  const sentence = `
      DELETE
        ASSETS_HEALTH
      FROM
        ASSETS_HEALTH
        
      WHERE ASSETS_HEALTH.HEALTH_HIST_ID = :HEALTH_HIST_ID
  `

  if (operationLogData) {
    await saveOperationLog('ASSETS_HEALTH', sentence, qPars, operationLogData);
    dbLogger('ASSETS_HEALTH', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

export async function w_removeAssetsFromUnit(qPars: { UNIT_ID: number }, operationLogData: OperationLogData) {
  const join = `
    INNER JOIN ASSETS ON (ASSETS.ID = ASSETS_HEALTH.ASSET_ID)
    INNER JOIN CLUNITS ON (CLUNITS.UNIT_ID = ASSETS.UNIT_ID)
  `

  const sentence = `DELETE ASSETS_HEALTH FROM ASSETS_HEALTH ${join} WHERE CLUNITS.UNIT_ID = :UNIT_ID`;

  if (operationLogData) {
    await saveOperationLog('ASSETS_HEALTH', sentence, qPars, operationLogData);
    dbLogger('ASSETS_HEALTH', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}