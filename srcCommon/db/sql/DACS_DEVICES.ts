import * as sqldb from '../connectSql'
import { saveOperationLog, OperationLogData } from '../dbModifLog'
import { dbLogger } from '../../helpers/logger'
import { selectDevAutMachine, selectDutIdMachine } from './MACHINES';

export async function w_insertIgnore(qPars: { DEVICE_ID: number }, operationLogData: OperationLogData) {
  const fields: string[] = []
  fields.push('DEVICE_ID');

  const sentence = `INSERT IGNORE INTO DACS_DEVICES (${fields.join(', ')}) VALUES (:${fields.join(', :')})`

  if (operationLogData) {
    await saveOperationLog('DACS_DEVICES', sentence, qPars, operationLogData);
    dbLogger('DACS_DEVICES', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

export async function w_update(qPars: {
  DAC_DEVICE_ID: number,
  DEVICE_ID?: number,
  P0_SENSOR?: string,
  P1_SENSOR?: string,
  P0_POSITN?: string,
  P1_POSITN?: string,
  DATE_COMIS?: string,
  DESCRIPTION?: string,
  T0?: string,
  T1?: string,
  T2?: string,
}, operationLogData: OperationLogData) {
  const fields: string[] = []
  if (qPars.DEVICE_ID !== undefined) { fields.push('DEVICE_ID = :DEVICE_ID') }
  if (qPars.P0_SENSOR !== undefined) { fields.push('P0_SENSOR = :P0_SENSOR') }
  if (qPars.P1_SENSOR !== undefined) { fields.push('P1_SENSOR = :P1_SENSOR') }
  if (qPars.P0_POSITN !== undefined) { fields.push('P0_POSITN = :P0_POSITN') }
  if (qPars.P1_POSITN !== undefined) { fields.push('P1_POSITN = :P1_POSITN') }
  if (qPars.DATE_COMIS !== undefined) { fields.push('DATE_COMIS = :DATE_COMIS') }
  if (qPars.DESCRIPTION !== undefined) { fields.push('DESCRIPTION = :DESCRIPTION') }
  if (qPars.T0 !== undefined) { fields.push('T0 = :T0') }
  if (qPars.T1 !== undefined) { fields.push('T1 = :T1') }
  if (qPars.T2 !== undefined) { fields.push('T2 = :T2') }

  if (!fields.length) throw Error('No fields to update').HttpStatus(500).DebugInfo({ qPars })

  const sentence = `UPDATE DACS_DEVICES SET ${fields.join(', ')} WHERE ID = :DAC_DEVICE_ID`

  if (operationLogData) {
    await saveOperationLog('DACS_DEVICES', sentence, qPars, operationLogData);
    dbLogger('DACS_DEVICES', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

export function getDacDetails(qPars: { DAC_ID: string }) {
  let sentence = `
    SELECT
      ASSETS.NAME AS DAC_NAME,
      ASSETS.ID AS ASSET_ID,
      DEVICES_CLIENTS.CLIENT_ID,
      CLUNITS.UNIT_NAME,
      CLUNITS.UNIT_ID,
      MACHINES.ID AS MACHINE_ID,
      MACHINES.NAME AS MACHINE_NAME,
      CLIENTS.NAME AS CLIENT_NAME
  `
  sentence += `
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN MACHINES ON MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID)
      LEFT JOIN ASSETS ON ASSETS.ID = COALESCE(CONDENSERS.ASSET_ID, EVAPORATORS.ASSET_ID, ASSET_HEAT_EXCHANGERS.ASSET_ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
  `

  sentence += ` WHERE DEVICES.DEVICE_CODE = :DAC_ID `

  return sqldb.querySingle<{
    DAC_NAME: string
    ASSET_ID: number
    UNIT_ID: number
    CLIENT_ID: number
    UNIT_NAME: string
    MACHINE_ID: number
    MACHINE_NAME: string
    CLIENT_NAME: string
  }>(sentence, qPars)
}

export function getMachineDacs(qPars: { MACHINE_ID: number }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DAC_ID,
      (CASE WHEN DACS_AUTOMATIONS.ID IS NOT NULL THEN DEVICES.DEVICE_CODE ELSE NULL END) AS AS_DAM,
      DACS_AUTOMATIONS.DISAB AS DAC_AUT_DISABLED
  `
  sentence += `
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN MACHINES ON MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID)
      LEFT JOIN DACS_AUTOMATIONS ON (DACS_AUTOMATIONS.DAC_DEVICE_ID = DACS_DEVICES.ID)
  `

  sentence += ` WHERE DACS_AUTOMATIONS.MACHINE_ID = :MACHINE_ID `

  sentence += ` ORDER BY DEVICES.DEVICE_CODE ASC `

  return sqldb.query<{
    DAC_ID: string
    AS_DAM: string
    DAC_AUT_DISABLED: number
  }>(sentence, qPars)
}

export function getAssociatedMachineDacs(qPars: { MACHINE_ID: number }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DAC_ID
  `
  sentence += `
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN MACHINES ON MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID)
  `

  sentence += ` WHERE MACHINES.ID = :MACHINE_ID `

  return sqldb.query<{
    DAC_ID: string
  }>(sentence, qPars)
}

export function getBasicInfo(qPars: { DAC_ID: string, clientId?: number }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DAC_ID,
      DEVICES.ID AS DEVICE_ID,
      DEVICES_CLIENTS.CLIENT_ID,
      DEVICES_UNITS.UNIT_ID,
      MACHINES.ID AS MACHINE_ID,
      COALESCE(CONDENSERS.APPL_CFG, EVAPORATORS.APPL_CFG, ASSET_HEAT_EXCHANGERS.APPL_CFG) AS DAC_APPL,
      DACS_DEVICES.ID AS DAC_DEVICE_ID
  `
  sentence += `
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN MACHINES ON MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID)
  `

  const conditions: string[] = []
  conditions.push(`DEVICES.DEVICE_CODE = :DAC_ID`)
  if (qPars.clientId !== undefined) { conditions.push(`DEVICES_CLIENTS.CLIENT_ID = :clientId`) }
  sentence += ' WHERE ' + conditions.join(' AND ')

  return sqldb.querySingle<{
    DAC_ID: string
    DEVICE_ID: number
    CLIENT_ID: number
    UNIT_ID: number
    MACHINE_ID: number
    DAC_APPL: string
    DAC_DEVICE_ID: number
  }>(sentence, qPars)
}

export function getClientDacsCount(qPars: { clientIds: number[] }) {
  let sentence = `
    SELECT
      (COUNT(*)) AS TOT
  `
  sentence += `
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      INNER JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
  `

  sentence += ` WHERE DEVICES_CLIENTS.CLIENT_ID IN (:clientIds) `

  return sqldb.querySingle<{
    TOT: number
  }>(sentence, qPars)
}

export async function w_deleteDacInfo(qPars: { dacId: number }, _delChecks: {
  DAC_IMAGES: true,
  L1_SOURCE: true,
  DACS_EVAPORATORS: true,
  DACS_CONDENSERS: true,
}, operationLogData: OperationLogData) {

  const sentence = `
  DELETE 
    DACS_DEVICES
  FROM 
    DACS_DEVICES
    INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
  WHERE DEVICES.DEVICE_CODE = :dacId`;

  if (operationLogData) {
    await saveOperationLog('DACS_DEVICES', sentence, qPars, operationLogData);
    dbLogger('DACS_DEVICES', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

export async function w_deleteFromClientDacs(qPars: { CLIENT_ID: number }, _delChecks: {
  DAC_IMAGES: true,
  L1_SOURCE: true,
  DACS_EVAPORATORS: true,
  DACS_CONDENSERS: true,
}, operationLogData: OperationLogData) {
  const sentence = `
  DELETE
    DACS_DEVICES
  FROM
    DACS_DEVICES
    INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
    INNER JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
  WHERE
    DEVICES_CLIENTS.CLIENT_ID = :CLIENT_ID
  `

  if (operationLogData) {
    await saveOperationLog('DACS_DEVICES', sentence, qPars, operationLogData);
    dbLogger('DACS_DEVICES', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

export async function w_deleteFromUnitDacs(qPars: { UNIT_ID: number }, _delChecks: {
  DAC_IMAGES: true,
  L1_SOURCE: true,
  DACS_EVAPORATORS: true,
  DACS_CONDENSERS: true,
}, operationLogData: OperationLogData) {
  const sentence = `
    DELETE
      DACS_DEVICES
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      INNER JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
    WHERE
    DEVICES_UNITS.UNIT_ID = :UNIT_ID
    `

  if (operationLogData) {
    await saveOperationLog('DACS_DEVICES', sentence, qPars, operationLogData);
    dbLogger('DACS_DEVICES', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

export async function w_deleteFk_SENSORS_P0(qPars: { SENSOR_ID: string }, operationLogData: OperationLogData) {
  const fields: string[] = []
  fields.push("P0_SENSOR = NULL")
  fields.push("P0_POSITN = NULL")

  const sentence = `UPDATE DACS_DEVICES SET ${fields.join(', ')} WHERE DACS_DEVICES.P0_SENSOR = :SENSOR_ID`

  if (operationLogData) {
    await saveOperationLog('DACS_DEVICES', sentence, qPars, operationLogData);
    dbLogger('DACS_DEVICES', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

export async function w_deleteFk_SENSORS_P1(qPars: { SENSOR_ID: string }, operationLogData: OperationLogData) {
  const fields: string[] = []
  fields.push("P1_SENSOR = NULL")
  fields.push("P1_POSITN = NULL")

  const sentence = `UPDATE DACS_DEVICES SET ${fields.join(', ')} WHERE DACS_DEVICES.P1_SENSOR = :SENSOR_ID`

  if (operationLogData) {
    await saveOperationLog('DACS_DEVICES', sentence, qPars, operationLogData);
    dbLogger('DACS_DEVICES', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

function buildDacsListSentenceConditions(
  qPars: Parameters<(typeof buildDacsListSentence)>[0],
  admPars: Parameters<(typeof buildDacsListSentence)>[1]
) {
    const conditions: string[] = []
    if (qPars.dacId != null) { conditions.push(`DEVICES.DEVICE_CODE = :dacId`) }
    if (qPars.clientIds != null && admPars.addUnownedDevs) { conditions.push(`(DEVICES_CLIENTS.CLIENT_ID IN (:clientIds) OR DEVICES_CLIENTS.CLIENT_ID IS NULL)`) }
    if (qPars.clientIds != null && !admPars.addUnownedDevs) { conditions.push(`(DEVICES_CLIENTS.CLIENT_ID IN (:clientIds))`) }
    if (qPars.stateIds) { conditions.push(`STATEREGION.ID IN (:stateIds)`) }
    if (qPars.cityIds) { conditions.push(`CLUNITS.CITY_ID IN (:cityIds)`) }
    if (qPars.unitIds) { conditions.push(`DEVICES_UNITS.UNIT_ID IN (:unitIds)`) }
    if (qPars.machineIds != null) { conditions.push(`MACHINES.ID IN (:machineIds)`) }

    if (qPars.INCLUDE_INSTALLATION_UNIT === false) {
      conditions.push(`CLUNITS.PRODUCTION = 1`)
    }
    return conditions;
}

type orderBy_buildDacsListSentence = 'DEVICES.DEVICE_CODE' | 'CITY.STATE_ID' | 'CITY.NAME' | 'CLIENTS.NAME' | 'CLUNITS.UNIT_NAME' | 'MACHINES.NAME';
export function buildDacsListSentence(qPars: {
  dacId?: string,
  clientIds?: number[],
  stateIds?: string[],
  cityIds?: string[],
  unitIds?: number[],
  machineIds?: number[],
  SKIP?: number,
  LIMIT?: number,
  INCLUDE_INSTALLATION_UNIT?: boolean,
}, admPars: {
  addUnownedDevs?: boolean,
  includeSensorInfo?: boolean,
  includeHealthDesc?: boolean,
  includeCapacity?: boolean,
  includeFaultsData?: boolean,
  includeTarifa?: boolean,
  includeLastHealthHistEntry?: boolean,
  orderBy?: { col: orderBy_buildDacsListSentence, asc: boolean }[]
}) {
  let fields = `DEVICES.DEVICE_CODE AS DAC_ID,
  DEVICES.BT_ID AS bt_id,
  ASSETS.NAME AS DAC_NAME,
  CLUNITS.CITY_ID,
  CITY.NAME AS CITY_NAME,
  STATEREGION.NAME AS STATE_ID,
  STATEREGION.FULL_NAME AS STATE_NAME,
  COUNTRY.NAME AS COUNTRY_NAME,
  MACHINES.ID AS GROUP_ID,
  MACHINES.NAME AS GROUP_NAME,
  DEVICES_UNITS.UNIT_ID,
  CLUNITS.UNIT_NAME,
  CLUNITS.LAT,
  CLUNITS.LON,
  ASSETS_HEALTH_HIST.H_DATE,
  ASSETS_HEALTH_HIST.H_INDEX,
  COALESCE(CONDENSERS.APPL_CFG, EVAPORATORS.APPL_CFG, ASSET_HEAT_EXCHANGERS.APPL_CFG) AS DAC_APPL,
  COALESCE(CONDENSERS.TYPE_CFG, EVAPORATORS.TYPE_CFG, ASSET_HEAT_EXCHANGERS.TYPE_CFG) AS DAC_TYPE,
  NULL AS DAC_ENV,
  L1_SOURCE.SELECTED_L1_SIM,
  CLIENTS.NAME AS CLIENT_NAME,
  DEVICES_CLIENTS.CLIENT_ID,
  CASE
  WHEN CONDENSERS.MACHINE_KW IS NOT NULL THEN CONDENSERS.MACHINE_KW
  WHEN EVAPORATORS.MACHINE_KW IS NOT NULL THEN EVAPORATORS.MACHINE_KW
  WHEN ASSET_HEAT_EXCHANGERS.MACHINE_KW IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.MACHINE_KW
  ELSE NULL
  END AS DAC_KW,
  CASE WHEN DACS_DEVICES.DATE_COMIS IS NOT NULL THEN '1' ELSE '0' END AS DAC_COMIS,
  (CASE WHEN DACS_AUTOMATIONS.ID IS NOT NULL THEN DEVICES.DEVICE_CODE ELSE NULL END) AS AUTOM_HW,
  DACS_AUTOMATIONS.DISAB AS AUTOM_DISAB,
  HEAT_EXCHANGERS.ID AS HEAT_EXCHANGER_ID`
  let source = `DACS_DEVICES
  INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
  LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
  LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
  LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
  LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
  LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
  LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
  LEFT JOIN COUNTRY ON (COUNTRY.ID = STATEREGION.COUNTRY_ID)
  LEFT JOIN DACS_AUTOMATIONS ON (DACS_AUTOMATIONS.DAC_DEVICE_ID = DACS_DEVICES.ID)
  LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
  LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
  LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
  LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
  LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
  LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
  LEFT JOIN HEAT_EXCHANGERS ON (HEAT_EXCHANGERS.ID = ASSET_HEAT_EXCHANGERS.HEAT_EXCHANGER_ID)
  LEFT JOIN MACHINES ON (MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID))
  LEFT JOIN ASSETS ON (ASSETS.ID = COALESCE(CONDENSERS.ASSET_ID, EVAPORATORS.ASSET_ID, ASSET_HEAT_EXCHANGERS.ASSET_ID))
  LEFT JOIN ASSETS_HEALTH ON (ASSETS_HEALTH.ASSET_ID = ASSETS.ID)
  LEFT JOIN ASSETS_HEALTH_HIST ON (ASSETS_HEALTH_HIST.ID = ASSETS_HEALTH.HEALTH_HIST_ID)
  LEFT JOIN L1_SOURCE ON (L1_SOURCE.DAC_DEVICE_ID = DACS_DEVICES.ID)
  LEFT JOIN FAULTS_DATAS ON (FAULTS_DATAS.ASSET_HEALTH_ID = ASSETS_HEALTH.ID)
  LEFT JOIN P_CAUSES ON (P_CAUSES.ID = ASSETS_HEALTH_HIST.P_CAUSE_ID)
  LEFT JOIN HEALTH_BEFORE_OFFLINE ON (HEALTH_BEFORE_OFFLINE.ASSET_HEALTH_ID = ASSETS_HEALTH.ID)
  `
  const conditions = buildDacsListSentenceConditions(qPars, admPars);
  
  if (admPars.includeFaultsData) {
    fields += ' ,FAULTS_DATAS.DATA AS FAULTS_DATA '
    fields += ' ,ASSETS_HEALTH_HIST.H_DESC '
    fields += ' ,P_CAUSES.CAUSES AS P_CAUSES '
    fields += ' ,HEALTH_BEFORE_OFFLINE.H_OFFL '
  }
  if (admPars.includeCapacity) {
    fields += `,
    CASE
      WHEN CONDENSERS.CAPACITY_POWER IS NOT NULL THEN CONDENSERS.CAPACITY_POWER
      WHEN EVAPORATORS.CAPACITY_POWER IS NOT NULL THEN EVAPORATORS.CAPACITY_POWER
      WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER
      ELSE NULL
    END AS ASSET_CAPACITY_POWER,
    CASE
      WHEN CONDENSERS.CAPACITY_UNIT IS NOT NULL THEN CONDENSERS.CAPACITY_UNIT
      WHEN EVAPORATORS.CAPACITY_UNIT IS NOT NULL THEN EVAPORATORS.CAPACITY_UNIT
      WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT
      ELSE NULL
    END AS ASSET_CAPACITY_UNIT`
  }
  if (admPars.includeTarifa) { fields += ' ,CLUNITS.TARIFA_KWH ' }
  if (admPars.includeSensorInfo) {
    fields += ' ,MACHINES.FLUID_TYPE AS FLUID_TYPE';
    fields += ' ,DACS_DEVICES.P0_POSITN ';
    fields += ' ,DACS_DEVICES.P0_SENSOR ';
    fields += ' ,DACS_DEVICES.P1_POSITN ';
    fields += ' ,DACS_DEVICES.P1_SENSOR ';
    fields += ' ,SFC_P0.MULT_QUAD AS P0_MULT_QUAD';
    fields += ' ,SFC_P0.MULT_LIN AS P0_MULT_LIN';
    fields += ' ,SFC_P0.OFST AS P0_OFST ';
    fields += ' ,SFC_P1.MULT_QUAD AS P1_MULT_QUAD ';
    fields += ' ,SFC_P1.MULT_LIN AS P1_MULT_LIN ';
    fields += ' ,SFC_P1.OFST AS P1_OFST ';

    source += ' LEFT JOIN DEVFWVERS ON DEVICES.DEVICE_CODE=DEVFWVERS.DEV_ID '
    source += ' LEFT JOIN SENSORS AS P0S ON (P0S.SENSOR_ID = DACS_DEVICES.P0_SENSOR)'
    source += ` LEFT JOIN SENSOR_FIRMWARE_CURVES SFC_P0
      ON SFC_P0.SENSOR_ID=P0S.SENSOR_ID
      AND (DEVFWVERS.V_MAJOR, DEVFWVERS.V_MINOR, DEVFWVERS.V_PATCH) >= (SFC_P0.V_MAJOR, SFC_P0.V_MINOR, SFC_P0.V_PATCH)`
    source += ` LEFT JOIN SENSOR_FIRMWARE_CURVES SFC_P0_MAX
      ON SFC_P0_MAX.SENSOR_ID=P0S.SENSOR_ID
      AND (SFC_P0_MAX.V_MAJOR, SFC_P0_MAX.V_MINOR, SFC_P0_MAX.V_PATCH) > (SFC_P0.V_MAJOR, SFC_P0.V_MINOR, SFC_P0.V_PATCH)
      AND (SFC_P0_MAX.V_MAJOR, SFC_P0_MAX.V_MINOR, SFC_P0_MAX.V_PATCH) < (DEVFWVERS.V_MAJOR, DEVFWVERS.V_MINOR, DEVFWVERS.V_PATCH)`;
    source += ' LEFT JOIN SENSORS AS P1S ON (P1S.SENSOR_ID = DACS_DEVICES.P1_SENSOR)'
    source += ` LEFT JOIN SENSOR_FIRMWARE_CURVES SFC_P1
      ON SFC_P1.SENSOR_ID=P1S.SENSOR_ID
      AND (DEVFWVERS.V_MAJOR, DEVFWVERS.V_MINOR, DEVFWVERS.V_PATCH) >= (SFC_P1.V_MAJOR, SFC_P1.V_MINOR, SFC_P1.V_PATCH)`
    source += ` LEFT JOIN SENSOR_FIRMWARE_CURVES SFC_P1_MAX
      ON SFC_P1_MAX.SENSOR_ID=P1S.SENSOR_ID
      AND (SFC_P1_MAX.V_MAJOR, SFC_P1_MAX.V_MINOR, SFC_P1_MAX.V_PATCH) > (SFC_P1.V_MAJOR, SFC_P1.V_MINOR, SFC_P1.V_PATCH)
      AND (SFC_P1_MAX.V_MAJOR, SFC_P1_MAX.V_MINOR, SFC_P1_MAX.V_PATCH) < (DEVFWVERS.V_MAJOR, DEVFWVERS.V_MINOR, DEVFWVERS.V_PATCH)`
  
    conditions.push("(DACS_DEVICES.P0_SENSOR IS NULL OR SFC_P0_MAX.ID IS NULL)")
    conditions.push("(DACS_DEVICES.P1_SENSOR IS NULL OR SFC_P1_MAX.ID IS NULL)")
  }
  if (admPars.includeLastHealthHistEntry) {
    fields += ' ,TYPEHEALTHCHANGE.TYPECHANGE AS TYPECHANGE '
    source += ` 
    LEFT JOIN (
		SELECT MAX(AHH2.DAT_REPORT) AS DAT_REPORT, DEVICES.DEVICE_CODE AS DAC_ID, AHH2.CT_ID
        FROM ASSETS_HEALTH_HIST AHH2
        INNER JOIN ASSETS ON (ASSETS.ID = AHH2.ASSET_ID)
        LEFT JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
        LEFT JOIN EVAPORATORS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
        LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ASSET_ID = ASSETS.ID)
        LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.CONDENSER_ID = CONDENSERS.ID)
        LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
        LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
        INNER JOIN DACS_DEVICES ON (DACS_DEVICES.ID = COALESCE(DACS_CONDENSERS.DAC_DEVICE_ID, DACS_EVAPORATORS.DAC_DEVICE_ID, DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID))
        INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.ID)
        GROUP BY DEVICES.DEVICE_CODE, AHH2.CT_ID
      ) HEALTHS ON (HEALTHS.DAC_ID = DEVICES.DEVICE_CODE)
	  LEFT JOIN TYPEHEALTHCHANGE ON (TYPEHEALTHCHANGE.ID = HEALTHS.CT_ID)
  `
  }

  let sentence = `SELECT ${fields} FROM ${source}`;
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  if (admPars.orderBy?.length > 0) { sentence += ' ORDER BY ' + admPars.orderBy.map(x => `${x.col} ${(!!x.asc) ? 'ASC' : 'DESC'}`).join(', '); }
  if (qPars.SKIP != null && qPars.LIMIT != null) { sentence += ` LIMIT :SKIP,:LIMIT ` }

  return sqldb.query<{
    DAC_ID: string
    bt_id: string
    DAC_NAME: string
    CITY_ID: string
    CITY_NAME: string
    STATE_ID: string
    STATE_NAME: string
    COUNTRY_NAME: string
    GROUP_ID: number
    GROUP_NAME: string
    UNIT_ID: number
    UNIT_NAME: string
    LAT: string
    LON: string
    H_INDEX: number
    H_DATE: string
    DAC_APPL: string
    DAC_TYPE: string
    DAC_ENV: string
    SELECTED_L1_SIM: string
    CLIENT_NAME: string
    CLIENT_ID: number
    DAC_KW: number
    DAC_COMIS: string
    AUTOM_HW: string
    AUTOM_DISAB: number
    FAULTS_DATA?: string
    H_DESC?: string
    P_CAUSES?: string
    H_OFFL?: string
    ASSET_CAPACITY_POWER?: number
    ASSET_CAPACITY_UNIT?: string
    TARIFA_KWH?: number
    FLUID_TYPE?: string
    P0_POSITN?: string
    P0_SENSOR?: string
    P1_POSITN?: string
    P1_SENSOR?: string
    P0_MULT_QUAD?: number
    P0_MULT_LIN?: number
    P0_OFST?: number
    P1_MULT_QUAD?: number
    P1_MULT_LIN?: number
    P1_OFST?: number
    TYPECHANGE?: string
    HEAT_EXCHANGER_ID: number
  }>(sentence, qPars)
}

export function getListBatchInput(qPars: { clientIds?: number[], unitIds?: number[] }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DAC_ID,
      CASE
        WHEN CONDENSERS.ASSET_ID IS NOT NULL THEN ASSETS.NAME
        ELSE NULL
      END AS DAC_NAME,
      MACHINES.NAME AS MACHINE_NAME,
      MACHINES.APPLICATION AS MACHINE_APPLICATION,
      MACHINES.BRAND AS MACHINE_BRAND,
      MACHINES.FLUID_TYPE AS MACHINE_FLUID_TYPE,
      MACHINES.TYPE AS MACHINE_TYPE,
      MACHINES.PERFORMANCE_COEFFICIENT AS MACHINE_COP,
      CLUNITS.UNIT_NAME,
      ASSETS_HEALTH_HIST.H_INDEX,
      CASE WHEN DACS_DEVICES.DATE_COMIS IS NOT NULL THEN '1' ELSE '0' END AS DAC_COMIS,
      (CASE WHEN DACS_AUTOMATIONS.ID IS NOT NULL THEN DEVICES.DEVICE_CODE ELSE NULL END) AS AS_DAM,
      DACS_AUTOMATIONS.DISAB AS AUTOM_DISAB,
      ASSETS.MODEL AS ASSET_MODEL,
      CASE
        WHEN CONDENSERS.CAPACITY_POWER IS NOT NULL THEN CONDENSERS.CAPACITY_POWER
        WHEN EVAPORATORS.CAPACITY_POWER IS NOT NULL THEN EVAPORATORS.CAPACITY_POWER
        WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER
        ELSE NULL
      END AS ASSET_CAPACITY_POWER,
      CASE
        WHEN CONDENSERS.CAPACITY_UNIT IS NOT NULL THEN CONDENSERS.CAPACITY_UNIT
        WHEN EVAPORATORS.CAPACITY_UNIT IS NOT NULL THEN EVAPORATORS.CAPACITY_UNIT
        WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT
        ELSE NULL
      END AS ASSET_CAPACITY_UNIT,
      CASE
        WHEN CONDENSERS.MACHINE_KW IS NOT NULL THEN CONDENSERS.MACHINE_KW
        WHEN EVAPORATORS.MACHINE_KW IS NOT NULL THEN EVAPORATORS.MACHINE_KW
        WHEN ASSET_HEAT_EXCHANGERS.MACHINE_KW IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.MACHINE_KW
        ELSE NULL
      END AS MACHINE_KW,
      DACS_DEVICES.P0_POSITN,
      DACS_DEVICES.P0_SENSOR,
      DACS_DEVICES.P1_POSITN,
      DACS_DEVICES.P1_SENSOR,
      NULL AS DAC_ENV,
      DACS_DEVICES.DESCRIPTION AS DAC_DESC,
      0 AS DAC_MODIF
  `
  sentence += `
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN MACHINES ON MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID)
      LEFT JOIN ASSETS ON ASSETS.ID = COALESCE(CONDENSERS.ASSET_ID, EVAPORATORS.ASSET_ID, ASSET_HEAT_EXCHANGERS.ASSET_ID)
      LEFT JOIN ASSETS_HEALTH ON (ASSETS_HEALTH.ASSET_ID = ASSETS.ID)
      LEFT JOIN ASSETS_HEALTH_HIST ON (ASSETS_HEALTH_HIST.ID = ASSETS_HEALTH.HEALTH_HIST_ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
      LEFT JOIN DACS_AUTOMATIONS ON (DACS_AUTOMATIONS.DAC_DEVICE_ID = DACS_DEVICES.ID)
  `

  const conditions: string[] = []
  if (qPars.clientIds) { conditions.push(`DEVICES_CLIENTS.CLIENT_ID IN (:clientIds)`) }
  if (qPars.unitIds) { conditions.push(`DEVICES_UNITS.UNIT_ID IN (:unitIds)`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    DAC_ID: string
    DAC_NAME: string
    MACHINE_NAME: string
    MACHINE_APPLICATION: string
    MACHINE_BRAND: string
    MACHINE_FLUID_TYPE: string
    MACHINE_TYPE: string
    MACHINE_COP: number
    UNIT_NAME: string
    H_INDEX: number
    DAC_COMIS: string
    AS_DAM: string
    AUTOM_DISAB: number
    ASSET_MODEL: string
    ASSET_CAPACITY_POWER: number
    ASSET_CAPACITY_UNIT: string
    MACHINE_KW: number
    P0_POSITN: string
    P0_SENSOR: string
    P1_POSITN: string
    P1_SENSOR: string
    DAC_ENV: string
    DAC_DESC: string
    DAC_MODIF: string
  }>(sentence, qPars)
}

export function getClientTRs(qPars: { dielClientId: number }) {
  let sentence = `
    SELECT
      CASE
        WHEN CONDENSERS.CAPACITY_POWER IS NOT NULL THEN CONDENSERS.CAPACITY_POWER
        WHEN EVAPORATORS.CAPACITY_POWER IS NOT NULL THEN EVAPORATORS.CAPACITY_POWER
        WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER
        ELSE NULL
      END AS ASSET_CAPACITY_POWER,
      CASE
        WHEN CONDENSERS.CAPACITY_UNIT IS NOT NULL THEN CONDENSERS.CAPACITY_UNIT
        WHEN EVAPORATORS.CAPACITY_UNIT IS NOT NULL THEN EVAPORATORS.CAPACITY_UNIT
        WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT
        ELSE NULL
      END AS ASSET_CAPACITY_UNIT,
      MACHINES.ID AS MACHINE_ID,
      ${selectDevAutMachine} as MACHINE_DEV_AUT,
      DUTS_AUTOMATION.DISAB AS DUT_AUT_DISAB
  `
  sentence += `
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      INNER JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      INNER JOIN MACHINES ON MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID)
      LEFT JOIN DUTS_REFERENCE ON (DUTS_REFERENCE.MACHINE_ID = MACHINES.ID)
      LEFT JOIN DUTS_MONITORING ON (DUTS_MONITORING.ID = DUTS_REFERENCE.DUT_MONITORING_ID)
      LEFT JOIN DUTS_AUTOMATION ON (DUTS_AUTOMATION.DUT_DEVICE_ID = DUTS_MONITORING.DUT_DEVICE_ID)
      LEFT JOIN ASSETS ON (ASSETS.ID = COALESCE(CONDENSERS.ASSET_ID, EVAPORATORS.ASSET_ID))
      INNER JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
  `

  const conditions: string[] = []
  conditions.push(`DEVICES_CLIENTS.CLIENT_ID <> :dielClientId`)
  conditions.push(`CLIENTS.PERMS_C LIKE '%[C]%'`)
  sentence += ' WHERE ' + conditions.join(' AND ')

  return sqldb.query<{
    ASSET_CAPACITY_POWER: number
    ASSET_CAPACITY_UNIT: string
    MACHINE_ID: number
    MACHINE_DEV_AUT: string
    DUT_AUT_DISAB: number
  }>(sentence, qPars)
}

export function getClientMachinesPower(qPars: {
  dielClientId: number,
  CLIENT_IDS?: number[],
  stateIds?: string[],
  cityIds?: string[],
  unitIds?: number[],
  INCLUDE_INSTALLATION_UNIT?: boolean
}) {
  let sentence = `
    SELECT
    CASE
      WHEN CONDENSERS.CAPACITY_POWER IS NOT NULL THEN CONDENSERS.CAPACITY_POWER
      WHEN EVAPORATORS.CAPACITY_POWER IS NOT NULL THEN EVAPORATORS.CAPACITY_POWER
      WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER
      ELSE NULL
    END AS ASSET_CAPACITY_POWER,
    CASE
      WHEN CONDENSERS.CAPACITY_UNIT IS NOT NULL THEN CONDENSERS.CAPACITY_UNIT
      WHEN EVAPORATORS.CAPACITY_UNIT IS NOT NULL THEN EVAPORATORS.CAPACITY_UNIT
      WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT
      ELSE NULL
    END AS ASSET_CAPACITY_UNIT,
    MACHINES.ID AS MACHINE_ID
  `
  sentence += `
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN MACHINES ON MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID)
      INNER JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      INNER JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)

  `
  if (qPars.stateIds || qPars.cityIds || qPars.INCLUDE_INSTALLATION_UNIT === false) { sentence += ' INNER JOIN CLUNITS ON (DEVICES_UNITS.UNIT_ID = CLUNITS.UNIT_ID) ' }
  if (qPars.stateIds) {
    sentence += ` 
    INNER JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID) 
    LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
    `
  }

  const conditions: string[] = []
  conditions.push(`MACHINES.ID IS NOT NULL`)
  conditions.push(`DEVICES_CLIENTS.CLIENT_ID <> :dielClientId`)
  if (qPars.CLIENT_IDS) { conditions.push(`DEVICES_CLIENTS.CLIENT_ID IN (:CLIENT_IDS)`) }
  if (qPars.stateIds) { conditions.push(`STATEREGION.ID IN (:stateIds)`) }
  if (qPars.cityIds) { conditions.push(`CLUNITS.CITY_ID IN (:cityIds)`) }
  if (qPars.unitIds) { conditions.push(`DEVICES_UNITS.UNIT_ID IN (:unitIds)`) }
  if (qPars.INCLUDE_INSTALLATION_UNIT === false) {
    conditions.push(`CLUNITS.PRODUCTION = 1`)
  }
  conditions.push(`CLIENTS.PERMS_C LIKE '%[C]%'`)
  sentence += ' WHERE ' + conditions.join(' AND ')

  return sqldb.query<{
    ASSET_CAPACITY_POWER: number
    ASSET_CAPACITY_UNIT: string
    MACHINE_ID: number
  }>(sentence, qPars)
}

export function getClientMachinesHealthPower(qPars: {
  excludeClient?: number,
  clientIds?: number[],
  stateIds?: string[],
  cityIds?: string[],
  unitIds?: number[],
  INCLUDE_INSTALLATION_UNIT?: boolean
}) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DAC_ID,
      COALESCE(CONDENSERS.MACHINE_KW, EVAPORATORS.MACHINE_KW, ASSET_HEAT_EXCHANGERS.MACHINE_KW) as MACHINE_KW,
      COALESCE(CONDENSERS.CAPACITY_POWER, EVAPORATORS.CAPACITY_POWER, ASSET_HEAT_EXCHANGERS.CAPACITY_POWER) AS ASSET_CAPACITY_POWER,
      COALESCE(CONDENSERS.CAPACITY_UNIT, EVAPORATORS.CAPACITY_UNIT, ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT) AS ASSET_CAPACITY_UNIT,
      ASSETS_HEALTH_HIST.H_INDEX
  `
  sentence += `
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      INNER JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      INNER JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN ASSETS ON (ASSETS.ID = COALESCE(CONDENSERS.ASSET_ID, EVAPORATORS.ASSET_ID, ASSET_HEAT_EXCHANGERS.ASSET_ID))
      LEFT JOIN ASSETS_HEALTH ON (ASSETS_HEALTH.ASSET_ID = ASSETS.ID)
      LEFT JOIN ASSETS_HEALTH_HIST ON (ASSETS_HEALTH_HIST.ID = ASSETS_HEALTH.HEALTH_HIST_ID)
      LEFT JOIN MACHINES ON (MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID))
  `
  if (qPars.stateIds || qPars.cityIds || qPars.INCLUDE_INSTALLATION_UNIT === false) { sentence += ' INNER JOIN CLUNITS ON (DEVICES_UNITS.UNIT_ID = CLUNITS.UNIT_ID) ' }
  if (qPars.stateIds) {
    sentence += `
    INNER JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
    LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
    `
  }

  const conditions: string[] = []
  conditions.push(`MACHINES.ID IS NOT NULL`)
  if (qPars.excludeClient) { conditions.push(`DEVICES_CLIENTS.CLIENT_ID <> :excludeClient`) }
  if (qPars.clientIds) { conditions.push(`DEVICES_CLIENTS.CLIENT_ID IN (:clientIds)`) }
  if (qPars.stateIds) { conditions.push(`STATEREGION.ID IN (:stateIds)`) }
  if (qPars.cityIds) { conditions.push(`CLUNITS.CITY_ID IN (:cityIds)`) }
  if (qPars.unitIds) { conditions.push(`DEVICES_UNITS.UNIT_ID IN (:unitIds)`) }
  if (qPars.INCLUDE_INSTALLATION_UNIT === false) {
    conditions.push(`CLUNITS.PRODUCTION = 1`)
  }
  conditions.push(`CLIENTS.PERMS_C LIKE '%[C]%'`)
  sentence += ' WHERE ' + conditions.join(' AND ')

  return sqldb.query<{
    DAC_ID: string
    MACHINE_KW: number
    ASSET_CAPACITY_UNIT: string
    ASSET_CAPACITY_POWER: number
    H_INDEX: number
  }>(sentence, qPars)
}

export function getClientMachinesHealthPowerAtDate(qPars: {
  DATELIMIT: number,
  excludeClient?: number,
  clientIds?: number[],
  stateIds?: string[],
  cityIds?: string[],
  unitIds?: number[],
  INCLUDE_INSTALLATION_UNIT?: boolean
}) {
  let sentence = `
  WITH ULTS AS (
    SELECT MAX(AHH2.DAT_REPORT) AS MAX_DAT, DEVICES.DEVICE_CODE AS DAC_ID
    FROM 
        ASSETS_HEALTH_HIST AHH2
        LEFT JOIN ASSETS ON (ASSETS.ID = AHH2.ASSET_ID)
        LEFT JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
        LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.CONDENSER_ID = CONDENSERS.ID)
        LEFT JOIN EVAPORATORS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
        LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
        LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ASSET_ID = ASSETS.ID)
        LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
        INNER JOIN DACS_DEVICES ON (DACS_DEVICES.ID = COALESCE(DACS_CONDENSERS.DAC_DEVICE_ID, DACS_EVAPORATORS.DAC_DEVICE_ID, DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID))
        INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
    WHERE AHH2.DAT_REPORT <= :DATELIMIT
    GROUP BY DEVICES.DEVICE_CODE
  ) 
    SELECT
      DEVICES.DEVICE_CODE AS DAC_ID,
      CASE
        WHEN CONDENSERS.CAPACITY_UNIT IS NOT NULL THEN CONDENSERS.CAPACITY_UNIT
        WHEN EVAPORATORS.CAPACITY_UNIT IS NOT NULL THEN EVAPORATORS.CAPACITY_UNIT
        WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT
        ELSE NULL
      END AS ASSET_CAPACITY_UNIT,
      CASE
        WHEN CONDENSERS.CAPACITY_POWER IS NOT NULL THEN CONDENSERS.CAPACITY_POWER
        WHEN EVAPORATORS.CAPACITY_POWER IS NOT NULL THEN EVAPORATORS.CAPACITY_POWER
        WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER
        ELSE NULL
      END AS ASSET_CAPACITY_POWER,
      ASSETS_HEALTH_HIST.H_INDEX
  `
  sentence += `
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      INNER JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      INNER JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
	    LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN ASSETS ON (ASSETS.ID = COALESCE(CONDENSERS.ASSET_ID, EVAPORATORS.ASSET_ID, ASSET_HEAT_EXCHANGERS.ASSET_ID))
      LEFT JOIN MACHINES ON (MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID))
      INNER JOIN ULTS ON (ULTS.DAC_ID = DEVICES.DEVICE_CODE)
      INNER JOIN ASSETS_HEALTH_HIST ON (ASSETS_HEALTH_HIST.ASSET_ID = ASSETS.ID AND ASSETS_HEALTH_HIST.DAT_REPORT = ULTS.MAX_DAT)
  `
  if (qPars.stateIds || qPars.cityIds || qPars.INCLUDE_INSTALLATION_UNIT === false) { sentence += ' INNER JOIN CLUNITS ON (DEVICES_UNITS.UNIT_ID = CLUNITS.UNIT_ID) ' }
  if (qPars.stateIds) {
    sentence += `
    INNER JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
    LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
    `
  }

  const conditions: string[] = []
  conditions.push(`MACHINES.ID IS NOT NULL`)
  if (qPars.excludeClient) { conditions.push(`DEVICES_CLIENTS.CLIENT_ID <> :excludeClient`) }
  if (qPars.clientIds) { conditions.push(`DEVICES_CLIENTS.CLIENT_ID IN (:clientIds)`) }
  if (qPars.stateIds) { conditions.push(`STATEREGION.ID IN (:stateIds)`) }
  if (qPars.cityIds) { conditions.push(`CLUNITS.CITY_ID IN (:cityIds)`) }
  if (qPars.unitIds) { conditions.push(`DEVICES_UNITS.UNIT_ID IN (:unitIds)`) }
  if (qPars.INCLUDE_INSTALLATION_UNIT === false) {
    conditions.push(`CLUNITS.PRODUCTION = 1`)
  }
  conditions.push(`CLIENTS.PERMS_C LIKE '%[C]%'`)
  sentence += ' WHERE ' + conditions.join(' AND ')

  return sqldb.query<{
    DAC_ID: string
    ASSET_CAPACITY_UNIT: number
    ASSET_CAPACITY_POWER: number
    H_INDEX: number
  }>(sentence, qPars)
}

export function getWithMachineAndAut(qPars: { CLIENT_IDS?: number[] }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DAC_ID,
      MACHINES.ID AS MACHINE_ID,
      (CASE WHEN DACS_AUTOMATIONS.ID IS NOT NULL THEN DEVICES.DEVICE_CODE ELSE NULL END) AS DAC_AS_DAM,
      DACS_AUTOMATIONS.DISAB AS DAC_AUT_DISABLED
  `
  sentence += `
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DACS_AUTOMATIONS ON (DACS_AUTOMATIONS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      INNER JOIN MACHINES ON (MACHINES.ID = DACS_AUTOMATIONS.MACHINE_ID)
  `

  const conditions: string[] = []
  if (qPars.CLIENT_IDS) { conditions.push(`DEVICES_CLIENTS.CLIENT_ID IN (:CLIENT_IDS)`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    DAC_ID: string
    MACHINE_ID: number
    DAC_AS_DAM: string
    DAC_AUT_DISABLED: number
  }>(sentence, qPars)
}

export function getExtraInfoList(qPars: {
  DAC_ID?: string,
  MACHINE_ID?: number,
  clientIds?: number[],
  unitIds?: number[],
  LAST_CFG_MODIF?: string,
}, admPars: {
  addUnownedDevs?: boolean
  onlyComis?: boolean
  faultscfg?: boolean
}) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DAC_ID,
      DEVICES_CLIENTS.CLIENT_ID,
      DEVICES_UNITS.UNIT_ID,
      MACHINES.ID AS GROUP_ID,
      MACHINES.FLUID_TYPE,
      CASE
        WHEN DACS_DEVICES.T0 IS NULL OR DACS_DEVICES.T1 IS NULL OR DACS_DEVICES.T2 IS NULL THEN NULL
        ELSE CONCAT('["', CONCAT_WS('", "', DACS_DEVICES.T0, DACS_DEVICES.T1, DACS_DEVICES.T2), '"]')
      END AS T0_T1_T2,
      DACS_DEVICES.P0_POSITN,
      DACS_DEVICES.P0_SENSOR,
      DACS_DEVICES.P1_POSITN,
      DACS_DEVICES.P1_SENSOR,
      SFC_P0.MULT_QUAD AS P0_MULT_QUAD,
      SFC_P0.MULT_LIN AS P0_MULT_LIN,
      SFC_P0.OFST AS P0_OFST,
      SFC_P1.MULT_QUAD AS P1_MULT_QUAD,
      SFC_P1.MULT_LIN AS P1_MULT_LIN,
      SFC_P1.OFST AS P1_OFST,
      ASSETS_HEALTH_HIST.H_INDEX,
      CASE WHEN DACS_DEVICES.DATE_COMIS IS NOT NULL THEN '1' ELSE '0' END AS DAC_COMIS,
      DEVICES.DAT_BEGMON,
      COALESCE(CONDENSERS.APPL_CFG, EVAPORATORS.APPL_CFG, ASSET_HEAT_EXCHANGERS.APPL_CFG) AS DAC_APPL,
      COALESCE(CONDENSERS.TYPE_CFG, EVAPORATORS.TYPE_CFG, ASSET_HEAT_EXCHANGERS.TYPE_CFG) AS DAC_TYPE,
      FAULTS_DATAS.DATA AS FAULTS_DATA,
      NULL AS FAULTSCFG,
      DACS_AUTOMATIONS.DISAB AS DAM_DISABLED,
      DEVICES.LAST_CFG_MODIF,
      MACHINES.PERFORMANCE_COEFFICIENT AS DAC_COP,
      CASE
        WHEN CONDENSERS.MACHINE_KW IS NOT NULL THEN CONDENSERS.MACHINE_KW
        WHEN EVAPORATORS.MACHINE_KW IS NOT NULL THEN EVAPORATORS.MACHINE_KW
        WHEN ASSET_HEAT_EXCHANGERS.MACHINE_KW IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.MACHINE_KW
        ELSE NULL
      END AS DAC_KW,
      DACS_DEVICES.DESCRIPTION AS DAC_DESC,
      L1_SOURCE.SELECTED_L1_SIM AS SELECTED_L1_SIM
  `
  sentence += `
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      LEFT JOIN DEVFWVERS ON (DEVICES.DEVICE_CODE=DEVFWVERS.DEV_ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN DACS_AUTOMATIONS ON (DACS_AUTOMATIONS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN SENSORS AS P0S ON (P0S.SENSOR_ID = DACS_DEVICES.P0_SENSOR)
      LEFT JOIN SENSOR_FIRMWARE_CURVES SFC_P0
        ON SFC_P0.SENSOR_ID=P0S.SENSOR_ID AND (DEVFWVERS.V_MAJOR, DEVFWVERS.V_MINOR, DEVFWVERS.V_PATCH) >= (SFC_P0.V_MAJOR, SFC_P0.V_MINOR, SFC_P0.V_PATCH)
      LEFT JOIN SENSOR_FIRMWARE_CURVES SFC_P0_MAX
		    ON SFC_P0_MAX.SENSOR_ID=P0S.SENSOR_ID
          AND (SFC_P0_MAX.V_MAJOR, SFC_P0_MAX.V_MINOR, SFC_P0_MAX.V_PATCH) > (SFC_P0.V_MAJOR, SFC_P0.V_MINOR, SFC_P0.V_PATCH)
          AND (SFC_P0_MAX.V_MAJOR, SFC_P0_MAX.V_MINOR, SFC_P0_MAX.V_PATCH) < (DEVFWVERS.V_MAJOR, DEVFWVERS.V_MINOR, DEVFWVERS.V_PATCH)
      LEFT JOIN SENSORS AS P1S ON (P1S.SENSOR_ID = DACS_DEVICES.P1_SENSOR)
      LEFT JOIN SENSOR_FIRMWARE_CURVES SFC_P1
        ON SFC_P1.SENSOR_ID=P1S.SENSOR_ID AND (DEVFWVERS.V_MAJOR, DEVFWVERS.V_MINOR, DEVFWVERS.V_PATCH) >= (SFC_P1.V_MAJOR, SFC_P1.V_MINOR, SFC_P1.V_PATCH)
      LEFT JOIN SENSOR_FIRMWARE_CURVES SFC_P1_MAX
		    ON SFC_P1_MAX.SENSOR_ID=P1S.SENSOR_ID
          AND (SFC_P1_MAX.V_MAJOR, SFC_P1_MAX.V_MINOR, SFC_P1_MAX.V_PATCH) > (SFC_P1.V_MAJOR, SFC_P1.V_MINOR, SFC_P1.V_PATCH)
          AND (SFC_P1_MAX.V_MAJOR, SFC_P1_MAX.V_MINOR, SFC_P1_MAX.V_PATCH) < (DEVFWVERS.V_MAJOR, DEVFWVERS.V_MINOR, DEVFWVERS.V_PATCH)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN MACHINES ON MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID)
      LEFT JOIN ASSETS ON (ASSETS.ID = COALESCE(CONDENSERS.ASSET_ID, EVAPORATORS.ASSET_ID, ASSET_HEAT_EXCHANGERS.ASSET_ID))
      LEFT JOIN ASSETS_HEALTH ON (ASSETS_HEALTH.ASSET_ID = ASSETS.ID)
      LEFT JOIN FAULTS_DATAS ON (FAULTS_DATAS.ASSET_HEALTH_ID = ASSETS_HEALTH.ID)
      LEFT JOIN ASSETS_HEALTH_HIST ON (ASSETS_HEALTH_HIST.ID = ASSETS_HEALTH.HEALTH_HIST_ID)
      LEFT JOIN L1_SOURCE ON (L1_SOURCE.DAC_DEVICE_ID = DACS_DEVICES.ID)
  `

  const conditions: string[] = [
    "(DACS_DEVICES.P0_SENSOR IS NULL OR SFC_P0_MAX.ID IS NULL)", // logical consequence: "if P0_SENSOR is not NULL then SFC_P0_MAX.ID is NULL" in the form (NOT A OR B)
		"(DACS_DEVICES.P1_SENSOR IS NULL OR SFC_P1_MAX.ID IS NULL)", // logical consequence: if P1_SENSOR is not NULL then SFC_P1_MAX.ID is NULL
  ];
  if (qPars.DAC_ID) { conditions.push(`DEVICES.DEVICE_CODE = :DAC_ID`) }
  if (qPars.unitIds) { conditions.push(`DEVICES_UNITS.UNIT_ID IN (:unitIds)`) }
  if (qPars.MACHINE_ID) { conditions.push(`MACHINES.ID = :MACHINE_ID`) }
  if (qPars.clientIds && admPars.addUnownedDevs) { conditions.push(`(DEVICES_CLIENTS.CLIENT_ID IN (:clientIds) OR DEVICES_CLIENTS.CLIENT_ID IS NULL)`) }
  if (qPars.clientIds && !admPars.addUnownedDevs) { conditions.push(`(DEVICES_CLIENTS.CLIENT_ID IN (:clientIds))`) }
  if (qPars.LAST_CFG_MODIF) { conditions.push(`DEVICES.LAST_CFG_MODIF >= :LAST_CFG_MODIF`) }
  if (admPars.onlyComis) { conditions.push(`DACS_DEVICES.DATE_COMIS IS NOT NULL`) }
  if (admPars.faultscfg) {
    conditions.push(`DEVICES_CLIENTS.CLIENT_ID IS NOT NULL`)
    conditions.push(`DEVICES_UNITS.UNIT_ID IS NOT NULL`)
  }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    DAC_ID: string
    CLIENT_ID: number
    UNIT_ID: number
    GROUP_ID: number
    FLUID_TYPE: string
    T0_T1_T2: string
    P0_POSITN: string
    P0_SENSOR: string
    P1_POSITN: string
    P1_SENSOR: string
    P0_MULT_QUAD: number
    P0_MULT_LIN: number
    P0_OFST: number
    P1_MULT_QUAD: number
    P1_MULT_LIN: number
    P1_OFST: number
    H_INDEX: number
    DAC_COMIS: string
    DAT_BEGMON: string
    DAC_APPL: string
    DAC_TYPE: string
    FAULTS_DATA: string
    FAULTSCFG: string
    DAM_DISABLED: number
    LAST_CFG_MODIF: string
    DAC_COP: number
    DAC_KW: number
    DAC_DESC: string
    SELECTED_L1_SIM: string
  }>(sentence, qPars)
}

export function getExtraInfoListByMachine(qPars: {
  MACHINE_ID?: number,
}) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DAC_ID,
      DACS_DEVICES.P0_POSITN,
      DACS_DEVICES.P0_SENSOR,
      DACS_DEVICES.P1_POSITN,
      DACS_DEVICES.P1_SENSOR,
      MACHINES.PERFORMANCE_COEFFICIENT AS DAC_COP,
      CASE
        WHEN CONDENSERS.MACHINE_KW IS NOT NULL THEN CONDENSERS.MACHINE_KW
        WHEN EVAPORATORS.MACHINE_KW IS NOT NULL THEN EVAPORATORS.MACHINE_KW
        WHEN ASSET_HEAT_EXCHANGERS.MACHINE_KW IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.MACHINE_KW
        ELSE NULL
      END AS DAC_KW 
  `
  sentence += `
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN MACHINES ON MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID)
  `

  const conditions: string[] = []
  if (qPars.MACHINE_ID) { conditions.push(`MACHINES.ID = :MACHINE_ID`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    DAC_ID: string
    P0_POSITN: string
    P0_SENSOR: string
    P1_POSITN: string
    P1_SENSOR: string
    DAC_COP: number
    DAC_KW: number
  }>(sentence, qPars)
}

export function getExtraInfoListByUnit(qPars: {
  UNIT_ID: number,
}) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DAC_ID,
      MACHINES.ID AS MACHINE_ID,
      DACS_DEVICES.P0_POSITN,
      DACS_DEVICES.P0_SENSOR,
      DACS_DEVICES.P1_POSITN,
      DACS_DEVICES.P1_SENSOR,
      MACHINES.PERFORMANCE_COEFFICIENT AS DAC_COP,
      CASE
        WHEN CONDENSERS.MACHINE_KW IS NOT NULL THEN CONDENSERS.MACHINE_KW
        WHEN EVAPORATORS.MACHINE_KW IS NOT NULL THEN EVAPORATORS.MACHINE_KW
        WHEN ASSET_HEAT_EXCHANGERS.MACHINE_KW IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.MACHINE_KW
        ELSE NULL
      END AS DAC_KW 
  `
  sentence += `
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      INNER JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN MACHINES ON MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID)
  `

  const conditions: string[] = []
  conditions.push(`DEVICES_UNITS.UNIT_ID = :UNIT_ID`)
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    DAC_ID: string
    MACHINE_ID: number
    P0_POSITN: string
    P0_SENSOR: string
    P1_POSITN: string
    P1_SENSOR: string
    DAC_COP: number
    DAC_KW: number
  }>(sentence, qPars)
}

export function getListBasic1(qPars: { clientIds?: number[], unitIds?: number[] }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DAC_ID,
      MACHINES.ID AS MACHINE_ID,
      MACHINES.NAME AS MACHINE_NAME,
      ${selectDevAutMachine} AS DEV_AUT,
      DEVICES_UNITS.UNIT_ID,
      ASSETS_HEALTH_HIST.H_INDEX,
      ASSETS.DAT_CODE AS DAT_ID,
      ASSETS_HEALTH_HIST.H_DESC,
      ASSETS_HEALTH_HIST.H_DATE
  `
  sentence += `
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN MACHINES ON MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID)
      LEFT JOIN ASSETS ON (ASSETS.ID = COALESCE(CONDENSERS.ASSET_ID, EVAPORATORS.ASSET_ID, ASSET_HEAT_EXCHANGERS.ASSET_ID))
      LEFT JOIN ASSETS_HEALTH ON (ASSETS_HEALTH.ASSET_ID = ASSETS.ID)
      LEFT JOIN ASSETS_HEALTH_HIST ON (ASSETS_HEALTH_HIST.ID = ASSETS_HEALTH.HEALTH_HIST_ID)
    `

  const conditions: string[] = []
  if (qPars.clientIds != null) { conditions.push(`(DEVICES_CLIENTS.CLIENT_ID IN (:clientIds))`) }
  if (qPars.unitIds != null) { conditions.push(`(DEVICES_UNITS.UNIT_ID IN (:unitIds))`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    H_DATE: string
    H_DESC: string
    DAC_ID: string
    DEV_AUT: string
    MACHINE_ID: number
    MACHINE_NAME: string
    UNIT_ID: number
    H_INDEX: number
    DAT_ID: string
  }>(sentence, qPars)
}

export function getExtraInfo(qPars: { DAC_ID: string }) {
  let sentence = `
    SELECT
      DACS_DEVICES.ID AS DAC_DEVICE_ID,
      DEVICES.DEVICE_CODE AS DAC_ID,
      DEVICES_CLIENTS.CLIENT_ID,
      DEVICES_UNITS.UNIT_ID,
      MACHINES.ID AS GROUP_ID,
      MACHINES.FLUID_TYPE,
      CASE
        WHEN DACS_DEVICES.T0 IS NULL OR DACS_DEVICES.T1 IS NULL OR DACS_DEVICES.T2 IS NULL THEN NULL
        ELSE CONCAT('["', CONCAT_WS('", "', DACS_DEVICES.T0, DACS_DEVICES.T1, DACS_DEVICES.T2), '"]')
      END AS T0_T1_T2,
      DACS_DEVICES.P0_POSITN,
      DACS_DEVICES.P0_SENSOR,
      DACS_DEVICES.P1_POSITN,
      DACS_DEVICES.P1_SENSOR,
      SFC_P0.MULT_QUAD AS P0_MULT_QUAD,
      SFC_P0.MULT_LIN AS P0_MULT_LIN,
      SFC_P0.OFST AS P0_OFST,
      SFC_P1.MULT_QUAD AS P1_MULT_QUAD,
      SFC_P1.MULT_LIN AS P1_MULT_LIN,
      SFC_P1.OFST AS P1_OFST,
      ASSETS_HEALTH_HIST.H_DESC,
      ASSETS_HEALTH_HIST.H_INDEX,
      ASSETS_HEALTH_HIST.DAT_REPORT AS H_DAT_REPORT,
      TYPEHEALTHCHANGE.TYPECHANGE AS H_TYPECHANGE,
      DEVICES.DAT_BEGMON,
      CASE WHEN DACS_DEVICES.DATE_COMIS IS NOT NULL THEN '1' ELSE '0' END AS DAC_COMIS,
      MACHINES.NAME AS GROUP_NAME,
      COALESCE(CONDENSERS.APPL_CFG, EVAPORATORS.APPL_CFG, ASSET_HEAT_EXCHANGERS.APPL_CFG) AS DAC_APPL,
      COALESCE(CONDENSERS.TYPE_CFG, EVAPORATORS.TYPE_CFG, ASSET_HEAT_EXCHANGERS.TYPE_CFG) AS DAC_TYPE,
      FAULTS_DATAS.DATA AS FAULTS_DATA,
      NULL AS FAULTSCFG,
      CASE 
        WHEN CONDENSERS.ID IS NOT NULL THEN ASSETS.NAME
        ELSE NULL
      END AS DAC_NAME,
      L1_SOURCE.SELECTED_L1_SIM,
      CLUNITS.UNIT_NAME,
      CLIENTS.NAME AS CLIENT_NAME,
      DACS_AUTOMATIONS.DISAB AS DAM_DISABLED,
      ASSETS.ID AS ASSET_ID,
      DEVICES.ID AS DEVICE_ID,
      HEAT_EXCHANGERS.ID AS HEAT_EXCHANGER_ID,
      CASE
        WHEN CONDENSERS.ID IS NOT NULL THEN 'CONDENSER'
        WHEN ASSET_HEAT_EXCHANGERS.ID IS NOT NULL THEN 'HEAT EXCHANGER'
        ELSE 'EVAPORATOR' END AS ASSET_ROLE
  `
  sentence += `
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      LEFT JOIN DEVFWVERS ON (DEVICES.DEVICE_CODE=DEVFWVERS.DEV_ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN SENSORS AS P0S ON (P0S.SENSOR_ID = DACS_DEVICES.P0_SENSOR)
      LEFT JOIN SENSOR_FIRMWARE_CURVES SFC_P0
        ON SFC_P0.SENSOR_ID=P0S.SENSOR_ID AND (DEVFWVERS.V_MAJOR, DEVFWVERS.V_MINOR, DEVFWVERS.V_PATCH) >= (SFC_P0.V_MAJOR, SFC_P0.V_MINOR, SFC_P0.V_PATCH)
      LEFT JOIN SENSOR_FIRMWARE_CURVES SFC_P0_MAX
		    ON SFC_P0_MAX.SENSOR_ID=P0S.SENSOR_ID
          AND (SFC_P0_MAX.V_MAJOR, SFC_P0_MAX.V_MINOR, SFC_P0_MAX.V_PATCH) > (SFC_P0.V_MAJOR, SFC_P0.V_MINOR, SFC_P0.V_PATCH)
          AND (SFC_P0_MAX.V_MAJOR, SFC_P0_MAX.V_MINOR, SFC_P0_MAX.V_PATCH) < (DEVFWVERS.V_MAJOR, DEVFWVERS.V_MINOR, DEVFWVERS.V_PATCH)
      LEFT JOIN SENSORS AS P1S ON (P1S.SENSOR_ID = DACS_DEVICES.P1_SENSOR)
      LEFT JOIN SENSOR_FIRMWARE_CURVES SFC_P1
        ON SFC_P1.SENSOR_ID=P1S.SENSOR_ID AND (DEVFWVERS.V_MAJOR, DEVFWVERS.V_MINOR, DEVFWVERS.V_PATCH) >= (SFC_P1.V_MAJOR, SFC_P1.V_MINOR, SFC_P1.V_PATCH)
      LEFT JOIN SENSOR_FIRMWARE_CURVES SFC_P1_MAX
		    ON SFC_P1_MAX.SENSOR_ID=P1S.SENSOR_ID
          AND (SFC_P1_MAX.V_MAJOR, SFC_P1_MAX.V_MINOR, SFC_P1_MAX.V_PATCH) > (SFC_P1.V_MAJOR, SFC_P1.V_MINOR, SFC_P1.V_PATCH)
          AND (SFC_P1_MAX.V_MAJOR, SFC_P1_MAX.V_MINOR, SFC_P1_MAX.V_PATCH) < (DEVFWVERS.V_MAJOR, DEVFWVERS.V_MINOR, DEVFWVERS.V_PATCH)
      LEFT JOIN L1_SOURCE ON (L1_SOURCE.DAC_DEVICE_ID = DACS_DEVICES.ID )
      LEFT JOIN DACS_AUTOMATIONS ON (DACS_AUTOMATIONS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
      LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN HEAT_EXCHANGERS ON (HEAT_EXCHANGERS.ID = ASSET_HEAT_EXCHANGERS.HEAT_EXCHANGER_ID)
      LEFT JOIN ASSETS ON (ASSETS.ID = COALESCE(CONDENSERS.ASSET_ID, EVAPORATORS.ASSET_ID, ASSET_HEAT_EXCHANGERS.ASSET_ID))
      LEFT JOIN ASSETS_HEALTH ON (ASSETS_HEALTH.ASSET_ID = ASSETS.ID)
      LEFT JOIN ASSETS_HEALTH_HIST ON (ASSETS_HEALTH_HIST.ID = ASSETS_HEALTH.HEALTH_HIST_ID)
      LEFT JOIN TYPEHEALTHCHANGE ON (TYPEHEALTHCHANGE.ID = ASSETS_HEALTH_HIST.CT_ID)
      LEFT JOIN FAULTS_DATAS ON (FAULTS_DATAS.ASSET_HEALTH_ID = ASSETS_HEALTH.ID)
      LEFT JOIN MACHINES ON MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID)
  `
  const conditions = [
    "DEVICES.DEVICE_CODE = :DAC_ID",
    "(DACS_DEVICES.P0_SENSOR IS NULL OR SFC_P0_MAX.ID IS NULL)",
    "(DACS_DEVICES.P1_SENSOR IS NULL OR SFC_P1_MAX.ID IS NULL)",
  ];

  sentence += ` WHERE ${conditions.join(' AND ')} GROUP BY DEVICES.DEVICE_CODE `

  return sqldb.querySingle<{
    DAC_DEVICE_ID: number
    DAC_ID: string
    CLIENT_ID: number
    UNIT_ID: number
    GROUP_ID: number
    FLUID_TYPE: string
    T0_T1_T2: string
    P0_POSITN: string
    P0_SENSOR: string
    P1_POSITN: string
    P1_SENSOR: string
    P0_MULT_QUAD: number
    P0_MULT_LIN: number
    P0_OFST: number
    P1_MULT_QUAD: number
    P1_MULT_LIN: number
    P1_OFST: number
    H_DESC: string
    H_INDEX: number
    H_DAT_REPORT: number
    H_TYPECHANGE: string
    DAC_COMIS: string
    DAT_BEGMON: string
    DAC_APPL: string
    DAC_TYPE: string
    FAULTS_DATA: string
    FAULTSCFG: string
    DAC_NAME: string
    SELECTED_L1_SIM: string,
    UNIT_NAME: string
    GROUP_NAME: string
    CLIENT_NAME: string
    DAM_DISABLED: number
    ASSET_ID: number
    DEVICE_ID: number
    HEAT_EXCHANGER_ID: number
    ASSET_ROLE: string
  }>(sentence, qPars)
}

export function getListInfoExport() {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DAC_ID,
      CASE
        WHEN CONDENSERS.ASSET_ID IS NOT NULL THEN ASSETS.NAME
        ELSE NULL
      END AS DAC_NAME,
      DEVICES_CLIENTS.CLIENT_ID,
      DACS_DEVICES.DESCRIPTION AS DAC_DESCRIPTION,
      ASSETS.MODEL AS ASSET_MODEL,
      CASE
        WHEN CONDENSERS.CAPACITY_UNIT IS NOT NULL THEN CONDENSERS.CAPACITY_UNIT
        WHEN EVAPORATORS.CAPACITY_UNIT IS NOT NULL THEN EVAPORATORS.CAPACITY_UNIT
        WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT
        ELSE NULL
      END AS ASSET_CAPACITY_UNIT,
      CASE
        WHEN CONDENSERS.CAPACITY_POWER IS NOT NULL THEN CONDENSERS.CAPACITY_POWER
        WHEN EVAPORATORS.CAPACITY_POWER IS NOT NULL THEN EVAPORATORS.CAPACITY_POWER
        WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER
        ELSE NULL
      END AS ASSET_CAPACITY_POWER,
      MACHINES.PERFORMANCE_COEFFICIENT AS MACHINE_COP,
      CASE
        WHEN CONDENSERS.MACHINE_KW IS NOT NULL THEN CONDENSERS.MACHINE_KW
        WHEN EVAPORATORS.MACHINE_KW IS NOT NULL THEN EVAPORATORS.MACHINE_KW
        WHEN ASSET_HEAT_EXCHANGERS.MACHINE_KW IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.MACHINE_KW
        ELSE NULL
      END AS MACHINE_KW,
      MACHINES.FLUID_TYPE AS MACHINE_FLUID_TYPE,
      MACHINES.ID AS MACHINE_ID,
      MACHINES.APPLICATION AS MACHINE_APPLICATION,
      MACHINES.TYPE AS MACHINE_TYPE,
      NULL AS DAC_ENV,
      0 AS DAC_MODIF,
      CASE WHEN DACS_DEVICES.DATE_COMIS IS NOT NULL THEN '1' ELSE '0' END AS DAC_COMIS,
      MACHINES.BRAND AS MACHINE_BRAND,
      DEVICES_UNITS.UNIT_ID,
      CITY.NAME AS CITY_NAME,
      STATEREGION.NAME AS STATE_ID,
      CLUNITS.UNIT_NAME,
      MACHINES.NAME AS MACHINE_NAME,
      DACS_AUTOMATIONS.DISAB AS DAM_DISABLED,
      DACS_DEVICES.P0_POSITN,
      DACS_DEVICES.P0_SENSOR,
      DACS_DEVICES.P1_POSITN,
      DACS_DEVICES.P1_SENSOR,
      CLIENTS.NAME AS CLIENT_NAME
  `
  sentence += `
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
      LEFT JOIN DACS_AUTOMATIONS ON (DACS_AUTOMATIONS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
      LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN MACHINES ON MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID)
      LEFT JOIN ASSETS ON (ASSETS.ID = COALESCE(CONDENSERS.ASSET_ID, EVAPORATORS.ASSET_ID, ASSET_HEAT_EXCHANGERS.ASSET_ID))
  `

  return sqldb.query<{
    DAC_ID: string
    DAC_NAME: string
    CLIENT_ID: number
    DAC_DESC: string
    ASSET_MODEL: string
    ASSET_CAPACITY_UNIT: string
    ASSET_CAPACITY_POWER: number
    MACHINE_COP: number
    MACHINE_KW: number
    MACHINE_FLUID_TYPE: string
    MACHINE_ID: number
    MACHINE_APPLICATION: string
    MACHINE_TYPE: string
    DAC_ENV: string
    DAC_MODIF: string
    DAC_COMIS: string
    MACHINE_BRAND: string
    UNIT_ID: number
    CITY_NAME: string
    STATE_ID: string
    UNIT_NAME: string
    MACHINE_NAME: string
    DAM_DISABLED: number
    P0_POSITN: string
    P0_SENSOR: string
    P1_POSITN: string
    P1_SENSOR: string
    CLIENT_NAME: string
  }>(sentence)
}

export function getExtraInfoFull(qPars: { DAC_ID: string }) {
  let sentence = `
    SELECT
      dacDevice.DEVICE_CODE AS DAC_ID,
      dacDevice.BT_ID,
      CASE
        WHEN CONDENSERS.ASSET_ID IS NOT NULL THEN ASSETS.NAME
        ELSE NULL
      END AS DAC_NAME,
      DEVICES_CLIENTS.CLIENT_ID,
      DACS_DEVICES.DESCRIPTION AS DAC_DESC,
      ASSETS.MODEL AS DAC_MODEL,
      CASE
        WHEN CONDENSERS.CAPACITY_UNIT IS NOT NULL THEN CONDENSERS.CAPACITY_UNIT
        WHEN EVAPORATORS.CAPACITY_UNIT IS NOT NULL THEN EVAPORATORS.CAPACITY_UNIT
        WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.CAPACITY_UNIT
        ELSE NULL
      END AS CAPACITY_UNIT,
      CASE
        WHEN CONDENSERS.CAPACITY_POWER IS NOT NULL THEN CONDENSERS.CAPACITY_POWER
        WHEN EVAPORATORS.CAPACITY_POWER IS NOT NULL THEN EVAPORATORS.CAPACITY_POWER
        WHEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.CAPACITY_POWER
        ELSE NULL
      END AS CAPACITY_PWR,
      MACHINES.PERFORMANCE_COEFFICIENT AS DAC_COP,
      CASE
        WHEN CONDENSERS.MACHINE_KW IS NOT NULL THEN CONDENSERS.MACHINE_KW
        WHEN EVAPORATORS.MACHINE_KW IS NOT NULL THEN EVAPORATORS.MACHINE_KW
        WHEN ASSET_HEAT_EXCHANGERS.MACHINE_KW IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.MACHINE_KW
        ELSE NULL
      END AS DAC_KW,
      CASE
        WHEN CONDENSERS.COMPRESSOR_NOMINAL_CURRENT IS NOT NULL THEN CONDENSERS.COMPRESSOR_NOMINAL_CURRENT
        WHEN EVAPORATORS.COMPRESSOR_NOMINAL_CURRENT IS NOT NULL THEN EVAPORATORS.COMPRESSOR_NOMINAL_CURRENT
        WHEN ASSET_HEAT_EXCHANGERS.COMPRESSOR_NOMINAL_CURRENT IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.COMPRESSOR_NOMINAL_CURRENT
        ELSE NULL
      END AS COMPRESSOR_NOMINAL_CURRENT,
      CASE
        WHEN CONDENSERS.INSUFFLATION_SPEED IS NOT NULL THEN CONDENSERS.INSUFFLATION_SPEED
        WHEN EVAPORATORS.INSUFFLATION_SPEED IS NOT NULL THEN EVAPORATORS.INSUFFLATION_SPEED
        ELSE NULL
      END AS INSUFFLATION_SPEED,
      CASE
        WHEN CONDENSERS.EQUIPMENT_POWER IS NOT NULL THEN CONDENSERS.EQUIPMENT_POWER
        WHEN EVAPORATORS.EQUIPMENT_POWER IS NOT NULL THEN EVAPORATORS.EQUIPMENT_POWER
        WHEN ASSET_HEAT_EXCHANGERS.EQUIPMENT_POWER IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.EQUIPMENT_POWER
        ELSE NULL
      END AS EQUIPMENT_POWER,
      CASE
        WHEN CONDENSERS.EVAPORATOR_MODEL_ID IS NOT NULL THEN CONDENSERS.EVAPORATOR_MODEL_ID
        WHEN EVAPORATORS.EVAPORATOR_MODEL_ID IS NOT NULL THEN EVAPORATORS.EVAPORATOR_MODEL_ID
        WHEN ASSET_HEAT_EXCHANGERS.EVAPORATOR_MODEL_ID IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.EVAPORATOR_MODEL_ID
        ELSE NULL
      END AS EVAPORATOR_MODEL_ID,
      EVAPORATORS_MODELS.EVAPORATOR_MODEL,
      MACHINES.FLUID_TYPE AS FLUID_TYPE,
      dacDevice.DAT_BEGMON,
      MACHINES.ID AS GROUP_ID,
      DEVICES_UNITS.UNIT_ID,
      COALESCE(CONDENSERS.APPL_CFG, EVAPORATORS.APPL_CFG, ASSET_HEAT_EXCHANGERS.APPL_CFG) AS DAC_APPL,
      COALESCE(CONDENSERS.TYPE_CFG, EVAPORATORS.TYPE_CFG, ASSET_HEAT_EXCHANGERS.TYPE_CFG) AS DAC_TYPE,
      NULL AS DAC_ENV,
      0 AS DAC_MODIF,
      CASE WHEN DACS_DEVICES.DATE_COMIS IS NOT NULL THEN '1' ELSE '0' END AS DAC_COMIS,
      MACHINES.BRAND AS DAC_BRAND,
      L1_SOURCE.SELECTED_L1_SIM,
      CONCAT('["', CONCAT_WS('", "', DACS_DEVICES.T0, DACS_DEVICES.T1, DACS_DEVICES.T2), '"]') AS T0_T1_T2,
      CLUNITS.CITY_ID,
      STATEREGION.NAME AS STATE_ID,
      CITY.NAME AS CITY_NAME,
      CLUNITS.UNIT_NAME,
      MACHINES.NAME AS GROUP_NAME,
      CLUNITS.LAT,
      CLUNITS.LON,
      DACS_AUTOMATIONS.DISAB AS DAM_DISABLED,
      DACS_DEVICES.P0_POSITN,
      DACS_DEVICES.P0_SENSOR,
      DACS_DEVICES.P1_POSITN,
      DACS_DEVICES.P1_SENSOR,
      SFC_P0.MULT_QUAD AS P0_MULT_QUAD,
      SFC_P0.MULT_LIN AS P0_MULT_LIN,
      SFC_P0.OFST AS P0_OFST,
      SFC_P1.MULT_QUAD AS P1_MULT_QUAD,
      SFC_P1.MULT_LIN AS P1_MULT_LIN,
      SFC_P1.OFST AS P1_OFST,
      (SELECT AV_OPTS.OPT_LABEL FROM AV_OPTS WHERE AV_OPTS.OPT_ID = COALESCE(CONDENSERS.APPL_CFG, EVAPORATORS.APPL_CFG, ASSET_HEAT_EXCHANGERS.APPL_CFG)) AS DAC_APPL_DESC,
      (SELECT AV_OPTS.OPT_LABEL FROM AV_OPTS WHERE AV_OPTS.OPT_ID = COALESCE(CONDENSERS.TYPE_CFG, EVAPORATORS.TYPE_CFG, ASSET_HEAT_EXCHANGERS.TYPE_CFG)) AS DAC_TYPE_DESC,
      NULL AS DAC_ENV_DESC,
      (SELECT AV_OPTS.OPT_LABEL FROM AV_OPTS WHERE AV_OPTS.OPT_ID = MACHINES.BRAND) AS DAC_BRAND_DESC,
      (SELECT AV_OPTS.OPT_LABEL FROM AV_OPTS WHERE AV_OPTS.OPT_ID = MACHINES.FLUID_TYPE) AS FLUID_TYPE_DESC,
      HEAT_EXCHANGERS.ID AS HEAT_EXCHANGER_ID,
      relatedDUTs.DEVICE_CODE AS REL_DUT_ID
  `
  sentence += `
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES dacDevice ON (dacDevice.ID = DACS_DEVICES.DEVICE_ID)
      LEFT JOIN DEVFWVERS ON dacDevice.DEVICE_CODE=DEVFWVERS.DEV_ID
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = dacDevice.ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = dacDevice.ID)
      LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
      LEFT JOIN DACS_AUTOMATIONS ON (DACS_AUTOMATIONS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN SENSORS AS P0S ON (P0S.SENSOR_ID = DACS_DEVICES.P0_SENSOR)
      LEFT JOIN SENSOR_FIRMWARE_CURVES SFC_P0
        ON SFC_P0.SENSOR_ID=P0S.SENSOR_ID AND (DEVFWVERS.V_MAJOR, DEVFWVERS.V_MINOR, DEVFWVERS.V_PATCH) >= (SFC_P0.V_MAJOR, SFC_P0.V_MINOR, SFC_P0.V_PATCH)
      LEFT JOIN SENSOR_FIRMWARE_CURVES SFC_P0_MAX
		    ON SFC_P0_MAX.SENSOR_ID=P0S.SENSOR_ID
          AND (SFC_P0_MAX.V_MAJOR, SFC_P0_MAX.V_MINOR, SFC_P0_MAX.V_PATCH) > (SFC_P0.V_MAJOR, SFC_P0.V_MINOR, SFC_P0.V_PATCH)
          AND (SFC_P0_MAX.V_MAJOR, SFC_P0_MAX.V_MINOR, SFC_P0_MAX.V_PATCH) < (DEVFWVERS.V_MAJOR, DEVFWVERS.V_MINOR, DEVFWVERS.V_PATCH)
      LEFT JOIN SENSORS AS P1S ON (P1S.SENSOR_ID = DACS_DEVICES.P1_SENSOR)
      LEFT JOIN SENSOR_FIRMWARE_CURVES SFC_P1
        ON SFC_P1.SENSOR_ID=P1S.SENSOR_ID AND (DEVFWVERS.V_MAJOR, DEVFWVERS.V_MINOR, DEVFWVERS.V_PATCH) >= (SFC_P1.V_MAJOR, SFC_P1.V_MINOR, SFC_P1.V_PATCH)
      LEFT JOIN SENSOR_FIRMWARE_CURVES SFC_P1_MAX
		    ON SFC_P1_MAX.SENSOR_ID=P1S.SENSOR_ID
          AND (SFC_P1_MAX.V_MAJOR, SFC_P1_MAX.V_MINOR, SFC_P1_MAX.V_PATCH) > (SFC_P1.V_MAJOR, SFC_P1.V_MINOR, SFC_P1.V_PATCH)
          AND (SFC_P1_MAX.V_MAJOR, SFC_P1_MAX.V_MINOR, SFC_P1_MAX.V_PATCH) < (DEVFWVERS.V_MAJOR, DEVFWVERS.V_MINOR, DEVFWVERS.V_PATCH)
      LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
      LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN HEAT_EXCHANGERS ON (HEAT_EXCHANGERS.ID=ASSET_HEAT_EXCHANGERS.HEAT_EXCHANGER_ID)
      LEFT JOIN EVAPORATORS_MODELS ON (EVAPORATORS_MODELS.ID = COALESCE(EVAPORATORS.EVAPORATOR_MODEL_ID, CONDENSERS.EVAPORATOR_MODEL_ID, ASSET_HEAT_EXCHANGERS.EVAPORATOR_MODEL_ID))
      LEFT JOIN MACHINES ON MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID)
      LEFT JOIN DUTS_REFERENCE ON MACHINES.ID=DUTS_REFERENCE.MACHINE_ID
      LEFT JOIN DUTS_MONITORING ON DUTS_MONITORING.ID=DUTS_REFERENCE.DUT_MONITORING_ID
      LEFT JOIN DUTS_DEVICES ON DUTS_DEVICES.ID=DUTS_MONITORING.DUT_DEVICE_ID
      LEFT JOIN DEVICES relatedDUTs on relatedDUTs.ID=DUTS_DEVICES.DEVICE_ID
      LEFT JOIN ASSETS ON (ASSETS.ID = COALESCE(CONDENSERS.ASSET_ID, EVAPORATORS.ASSET_ID, ASSET_HEAT_EXCHANGERS.ASSET_ID))
      LEFT JOIN L1_SOURCE ON (L1_SOURCE.DAC_DEVICE_ID = DACS_DEVICES.ID)
  `

  sentence += ` WHERE dacDevice.DEVICE_CODE = :DAC_ID `
  sentence += ` AND (DACS_DEVICES.P0_SENSOR IS NULL OR SFC_P0_MAX.ID IS NULL) `
  sentence += ` AND (DACS_DEVICES.P1_SENSOR IS NULL OR SFC_P1_MAX.ID IS NULL) `
  sentence += ` GROUP BY dacDevice.DEVICE_CODE`

  return sqldb.querySingle<{
    DAC_ID: string
    BT_ID: string
    DAC_NAME: string
    CLIENT_ID: number
    DAC_DESC: string
    DAC_MODEL: string
    CAPACITY_UNIT: string
    CAPACITY_PWR: number
    DAC_COP: number
    DAC_KW: number
    FLUID_TYPE: string
    DAT_BEGMON: string
    GROUP_ID: number
    UNIT_ID: number
    DAC_APPL: string
    DAC_TYPE: string
    DAC_ENV: string
    DAC_MODIF: string
    DAC_COMIS: string
    DAC_BRAND: string
    SELECTED_L1_SIM: string
    T0_T1_T2: string
    CITY_ID: string
    STATE_ID: string
    CITY_NAME: string
    UNIT_NAME: string
    GROUP_NAME: string
    LAT: string
    LON: string
    DAM_DISABLED: number
    P0_POSITN: string
    P0_SENSOR: string
    P1_POSITN: string
    P1_SENSOR: string
    P0_MULT_QUAD: number
    P0_MULT_LIN: number
    P0_OFST: number
    P1_MULT_QUAD: number
    P1_MULT_LIN: number
    P1_OFST: number;
    DAC_APPL_DESC: string
    DAC_TYPE_DESC: string
    DAC_ENV_DESC: string
    DAC_BRAND_DESC: string
    FLUID_TYPE_DESC: string
    EVAPORATOR_MODEL: string
    EVAPORATOR_MODEL_ID: string
    COMPRESSOR_NOMINAL_CURRENT: number
    INSUFFLATION_SPEED: number
    EQUIPMENT_POWER: string
    HEAT_EXCHANGER_ID: number
    REL_DUT_ID: string
  }>(sentence, qPars)
}

export function getExtraInfoFullToUnified(qPars: { DAC_ID: string }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DAC_ID,
      DACS_DEVICES.DESCRIPTION AS DAC_DESC,
      MACHINES.PERFORMANCE_COEFFICIENT AS DAC_COP,
      CASE
        WHEN CONDENSERS.MACHINE_KW IS NOT NULL THEN CONDENSERS.MACHINE_KW
        WHEN EVAPORATORS.MACHINE_KW IS NOT NULL THEN EVAPORATORS.MACHINE_KW
        WHEN ASSET_HEAT_EXCHANGERS.MACHINE_KW IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.MACHINE_KW
        ELSE NULL
      END AS DAC_KW,
      CASE
        WHEN CONDENSERS.COMPRESSOR_NOMINAL_CURRENT IS NOT NULL THEN CONDENSERS.COMPRESSOR_NOMINAL_CURRENT
        WHEN EVAPORATORS.COMPRESSOR_NOMINAL_CURRENT IS NOT NULL THEN EVAPORATORS.COMPRESSOR_NOMINAL_CURRENT
        WHEN ASSET_HEAT_EXCHANGERS.COMPRESSOR_NOMINAL_CURRENT IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.COMPRESSOR_NOMINAL_CURRENT
        ELSE NULL
      END AS COMPRESSOR_NOMINAL_CURRENT,
      CASE
        WHEN CONDENSERS.INSUFFLATION_SPEED IS NOT NULL THEN CONDENSERS.INSUFFLATION_SPEED
        WHEN EVAPORATORS.INSUFFLATION_SPEED IS NOT NULL THEN EVAPORATORS.INSUFFLATION_SPEED
        ELSE NULL
      END AS INSUFFLATION_SPEED,
      CASE
        WHEN CONDENSERS.EQUIPMENT_POWER IS NOT NULL THEN CONDENSERS.EQUIPMENT_POWER
        WHEN EVAPORATORS.EQUIPMENT_POWER IS NOT NULL THEN EVAPORATORS.EQUIPMENT_POWER
        WHEN ASSET_HEAT_EXCHANGERS.EQUIPMENT_POWER IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.EQUIPMENT_POWER
        ELSE NULL
      END AS EQUIPMENT_POWER,
      EVAPORATORS_MODELS.EVAPORATOR_MODEL,
      DACS_DEVICES.P0_POSITN,
      DACS_DEVICES.P0_SENSOR,
      DACS_DEVICES.P1_POSITN,
      DACS_DEVICES.P1_SENSOR
  `
  sentence += `
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN EVAPORATORS_MODELS ON (EVAPORATORS_MODELS.ID = COALESCE(EVAPORATORS.EVAPORATOR_MODEL_ID, CONDENSERS.EVAPORATOR_MODEL_ID, ASSET_HEAT_EXCHANGERS.EVAPORATOR_MODEL_ID))
      LEFT JOIN MACHINES ON MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID)
  `

  sentence += ` WHERE DEVICES.DEVICE_CODE = :DAC_ID `
  sentence += ` GROUP BY DEVICES.DEVICE_CODE`

  return sqldb.querySingle<{
    DAC_ID: string
    DAC_DESC: string
    DAC_COP: number
    DAC_KW: number
    P0_POSITN: string
    P0_SENSOR: string
    P1_POSITN: string
    P1_SENSOR: string
    EVAPORATOR_MODEL: string
    COMPRESSOR_NOMINAL_CURRENT: number
    INSUFFLATION_SPEED: number
    EQUIPMENT_POWER: string
  }>(sentence, qPars)
}

export function getMachineDam(qPars: { DEV_AUT: string }) {
  let sentence = `
  WITH CTE_AUTOM AS (
		SELECT
			MACHINES.ID AS MACHINE_ID,
      DEVICES.DEVICE_CODE
		FROM
			DEVICES
      LEFT JOIN DUTS_DEVICES ON (DUTS_DEVICES.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DUTS_AUTOMATION ON (DUTS_AUTOMATION.DUT_DEVICE_ID = DUTS_DEVICES.ID)
      LEFT JOIN DAMS_DEVICES ON (DAMS_DEVICES.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DAMS_AUTOMATIONS ON (DAMS_AUTOMATIONS.DAM_DEVICE_ID = DAMS_DEVICES.ID)
      LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DACS_AUTOMATIONS ON (DACS_AUTOMATIONS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN MACHINES ON (MACHINES.ID = COALESCE(DUTS_AUTOMATION.MACHINE_ID, DAMS_AUTOMATIONS.MACHINE_ID, DACS_AUTOMATIONS.MACHINE_ID))
    `
  const conditions: string[] = []
  if (qPars.DEV_AUT !== undefined) { conditions.push(`DEVICES.DEVICE_CODE = :DEV_AUT`) }
  
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  sentence += `) `
  sentence += `      
    SELECT
      DEVICES.DEVICE_CODE AS DAC_ID,
      CTE_AUTOM.MACHINE_ID AS MACHINE_ID,
      CTE_AUTOM.DEVICE_CODE AS DEV_AUT
  `
  sentence += `
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      INNER JOIN CTE_AUTOM ON (CTE_AUTOM.MACHINE_ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID))
  `

  return sqldb.query<{
    DAC_ID: string
    MACHINE_ID: number
    DEV_AUT: string
  }>(sentence, qPars)
}

export function getAutomatedDacs(qPars: { unitId?: number, DEV_AUT?: string, DUT_ID?: string }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DAC_ID,
      MACHINES.ID AS MACHINE_ID,
      ${selectDevAutMachine} as DEV_AUT,
      ${selectDutIdMachine} as DUT_ID
  `
  sentence += `
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN DUTS_REFERENCE ON (DUTS_REFERENCE.MACHINE_ID = COALESCE(EVAPORATORS.MACHINE_ID, CONDENSERS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID))
      LEFT JOIN DUTS_MONITORING ON (DUTS_MONITORING.ID = DUTS_REFERENCE.DUT_MONITORING_ID)
      LEFT JOIN DUTS_DEVICES ON (DUTS_DEVICES.ID = DUTS_MONITORING.DUT_DEVICE_ID)
      LEFT JOIN DEVICES DEVICES_DUT ON (DEVICES_DUT.ID = DUTS_DEVICES.DEVICE_ID)
      LEFT JOIN DUTS_AUTOMATION ON (DUTS_AUTOMATION.DUT_DEVICE_ID = DUTS_DEVICES.ID)
      LEFT JOIN MACHINES ON (MACHINES.ID = COALESCE(EVAPORATORS.MACHINE_ID, CONDENSERS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID))
  `

  const conditions: string[] = []
  if (qPars.unitId !== undefined) { conditions.push(`DEVICES_UNITS.UNIT_ID = :unitId`) }
  if (qPars.DEV_AUT !== undefined) { conditions.push(`${selectDevAutMachine} = :DEV_AUT`) }
  if (qPars.DUT_ID !== undefined) { conditions.push(`DEVICES_DUT.DEVICE_CODE = :DUT_ID`) }
  conditions.push(`(DEVICES_DUT.DEVICE_CODE IS NOT NULL OR DUTS_AUTOMATION.DISAB = 0)`)
  sentence += ' WHERE ' + conditions.join(' AND ')

  return sqldb.query<{
    DAC_ID: string
    MACHINE_ID: number
    DEV_AUT: string
    DUT_ID: string
  }>(sentence, qPars)
}

export function getDacsList_dacsAndAssets(qPars: {
  clientIds?: number[],
  stateIds?: string[],
  cityIds?: string[],
  unitIds?: number[],
  machineIds?: number[],
  healthIndexes?: number[],
  INCLUDE_INSTALLATION_UNIT?: boolean
}, admPars: {
  addUnownedDevs?: boolean
}) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DAC_ID,
      CITY.NAME AS CITY_NAME,
      STATEREGION.NAME AS STATE_ID,
      MACHINES.ID AS GROUP_ID,
      MACHINES.NAME AS GROUP_NAME,
      DEVICES_UNITS.UNIT_ID,
      CLUNITS.UNIT_NAME,
      ASSETS_HEALTH_HIST.H_INDEX,
      CLIENTS.NAME AS CLIENT_NAME,
      DEVICES_CLIENTS.CLIENT_ID,
      CASE WHEN DACS_DEVICES.DATE_COMIS IS NOT NULL THEN '1' ELSE '0' END AS DAC_COMIS,
      ASSETS_HEALTH_HIST.H_DESC,
      ASSETS.DAT_CODE AS DAT_ID,
      ASSETS.NAME AS AST_DESC,
      ASSETS.ID AS ASSET_ID,
      TIME_ZONES.ID AS TIMEZONE_ID,
      TIME_ZONES.AREA AS TIMEZONE_AREA,
      TIME_ZONES.TIME_ZONE_OFFSET as TIMEZONE_OFFSET
  `
  sentence += `
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
      LEFT JOIN TIME_ZONES ON (TIME_ZONES.ID = CLUNITS.TIMEZONE_ID)
      LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
      LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
      LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN  MACHINES ON MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID)
      LEFT JOIN ASSETS ON (ASSETS.ID = COALESCE(CONDENSERS.ASSET_ID, EVAPORATORS.ASSET_ID, ASSET_HEAT_EXCHANGERS.ASSET_ID))
      LEFT JOIN ASSETS_HEALTH ON (ASSETS_HEALTH.ASSET_ID = ASSETS.ID)
      LEFT JOIN ASSETS_HEALTH_HIST ON (ASSETS_HEALTH_HIST.ID = ASSETS_HEALTH.HEALTH_HIST_ID)
  `

  const conditions: string[] = []
  if (qPars.clientIds?.length && admPars.addUnownedDevs) { conditions.push(`(DEVICES_CLIENTS.CLIENT_ID IN (:clientIds) OR DEVICES_CLIENTS.CLIENT_ID IS NULL)`) }
  if (qPars.clientIds?.length && !admPars.addUnownedDevs) { conditions.push(`(DEVICES_CLIENTS.CLIENT_ID IN (:clientIds))`) }
  if (qPars.stateIds?.length) { conditions.push(`STATEREGION.ID IN (:stateIds)`) }
  if (qPars.cityIds?.length) { conditions.push(`CLUNITS.CITY_ID IN (:cityIds)`) }
  if (qPars.unitIds?.length) { conditions.push(`DEVICES_UNITS.UNIT_ID IN (:unitIds)`) }
  if (qPars.machineIds?.length) { conditions.push(`MACHINES.ID IN (:machineIds)`) }
  if (qPars.INCLUDE_INSTALLATION_UNIT === false) {
    conditions.push(`CLUNITS.PRODUCTION = 1`)
  }
  if (qPars.healthIndexes?.length) { conditions.push(`ASSETS_HEALTH_HIST.H_INDEX IN (:healthIndexes)`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    DAC_ID: string
    CITY_NAME: string
    STATE_ID: string
    GROUP_ID: number
    GROUP_NAME: string
    UNIT_ID: number
    UNIT_NAME: string
    H_INDEX: number
    CLIENT_NAME: string
    CLIENT_ID: number
    DAC_COMIS: string
    H_DESC: string
    DAT_ID: string
    AST_DESC: string
    ASSET_ID: number
    TIMEZONE_ID: number
    TIMEZONE_AREA: string
    TIMEZONE_OFFSET: number
  }>(sentence, qPars)
}

export function getDacsFromList(qPars: { devIds: string[] }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DAC_ID,
      DEVICES_CLIENTS.CLIENT_ID,
      DEVICES_UNITS.UNIT_ID,
      MACHINES.ID AS GROUP_ID,
      COALESCE(CONDENSERS.APPL_CFG, EVAPORATORS.APPL_CFG, ASSET_HEAT_EXCHANGERS.APPL_CFG) AS DAC_APPL,
      MACHINES.NAME AS GROUP_NAME,
      CLUNITS.UNIT_NAME,
      CLIENTS.NAME AS CLIENT_NAME
  `

  sentence += `
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN MACHINES ON MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
      WHERE DEVICES.DEVICE_CODE IN (:devIds)
  `
  return sqldb.query<{
    DAC_ID: string,
    CLIENT_ID: number,
    UNIT_ID: number,
    GROUP_ID: number,
    DAC_APPL: string,
    GROUP_NAME: string,
    UNIT_NAME: string,
    CLIENT_NAME: string,
  }>(sentence, qPars);
}

//Busca todos os dacs que estão em uma unidade que está em instalacao
export function getAllDacsWithUnitInInstall() {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DAC_ID,
      DEVICES_UNITS.UNIT_ID,
      ASSETS_HEALTH_HIST.H_INDEX,
      CLUNITS.UNIT_NAME
  `

  sentence += `
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      INNER JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      INNER JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN ASSETS ON (ASSETS.ID = COALESCE(EVAPORATORS.ASSET_ID, CONDENSERS.ASSET_ID, ASSET_HEAT_EXCHANGERS.ASSET_ID))
      LEFT JOIN ASSETS_HEALTH ON (ASSETS_HEALTH.ASSET_ID = ASSETS.ID)
      LEFT JOIN ASSETS_HEALTH_HIST ON (ASSETS_HEALTH_HIST.ID = ASSETS_HEALTH.HEALTH_HIST_ID)
      WHERE (CLUNITS.PRODUCTION = 0 AND ASSETS_HEALTH_HIST.H_INDEX IS NULL)
      OR (CLUNITS.PRODUCTION_TIMESTAMP > DATE_SUB(NOW(), INTERVAL 1 DAY) AND ASSETS_HEALTH_HIST.H_INDEX IS NULL)
  `

  return sqldb.query<{
    DAC_ID: string,
    UNIT_ID: number,
    UNIT_NAME: string,
    H_INDEX: number,
  }>(sentence);
}

//Busca todos os dacs que estão em uma unidade que está em produção nas últimas 24 horas
export function getAllDacsWithUnitInProduction() {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DAC_ID,
      DEVICES_UNITS.UNIT_ID,
      ASSETS_HEALTH_HIST.H_INDEX,
      CLUNITS.UNIT_NAME
  `

  sentence += `
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      INNER JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      INNER JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN ASSETS ON (ASSETS.ID = COALESCE(EVAPORATORS.ASSET_ID, CONDENSERS.ASSET_ID, ASSET_HEAT_EXCHANGERS.ASSET_ID))
      LEFT JOIN ASSETS_HEALTH ON (ASSETS_HEALTH.ASSET_ID = ASSETS.ID)
      LEFT JOIN ASSETS_HEALTH_HIST ON (ASSETS_HEALTH_HIST.ID = ASSETS_HEALTH.HEALTH_HIST_ID)

      WHERE (CLUNITS.PRODUCTION_TIMESTAMP IS NOT NULL AND CLUNITS.PRODUCTION_TIMESTAMP < DATE_SUB(NOW(), INTERVAL 1 DAY))
      AND (ASSETS_HEALTH_HIST.H_INDEX = 1 OR ASSETS_HEALTH_HIST.H_INDEX IS NULL)
  `

  return sqldb.query<{
    DAC_ID: string,
    UNIT_ID: number,
    UNIT_NAME: string,
    H_INDEX: number,
  }>(sentence);
}

export async function getDacDeviceIdByDeviceCode(qPars: { DEVICE_CODE: string }) {
  const sentence = `
    SELECT
      DACS_DEVICES.ID AS DAC_DEVICE_ID,
      DEVICES.ID AS DEVICE_ID,
      dc.ID AS CONDENSER_ID,
      de.ID AS EVAPORATOR_ID,
      da.ID AS ASSET_HEAT_EXCHANGER_ID 
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      LEFT JOIN DACS_CONDENSERS dc ON (dc.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN DACS_EVAPORATORS de ON (de.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS da ON (da.DAC_DEVICE_ID = DACS_DEVICES.ID)
    WHERE 
      DEVICES.DEVICE_CODE = :DEVICE_CODE
  `
  return sqldb.querySingle<{
    DAC_DEVICE_ID: number
    DEVICE_ID: number
    CONDENSER_ID: number
    EVAPORATOR_ID: number
    ASSET_HEAT_EXCHANGER_ID: number
  }>(sentence, qPars)
}

export async function getDamAutomationFromDac(qPars: { DEVICE_CODE: string }) {
  const sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DAC_CODE,
      d2.DEVICE_CODE AS DAM_AUTOMATION_CODE
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      LEFT JOIN DACS_AUTOMATIONS ON (DACS_AUTOMATIONS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN MACHINES ON MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID)
      LEFT JOIN DAMS_AUTOMATIONS ON (MACHINES.ID = DAMS_AUTOMATIONS.MACHINE_ID)
      LEFT JOIN DAMS_DEVICES ON (DAMS_DEVICES.ID = DAMS_AUTOMATIONS.DAM_DEVICE_ID)
      LEFT JOIN DEVICES d2 ON (d2.ID = DAMS_DEVICES.DEVICE_ID)
    WHERE DEVICES.DEVICE_CODE = :DEVICE_CODE GROUP BY DEVICES.DEVICE_CODE;
  `
  return sqldb.querySingle<{
    DAC_CODE: string
    DAM_AUTOMATION_CODE: string
  }>(sentence, qPars)
}

export async function getDriAutomationFromDac(qPars: { DEVICE_CODE: string }) {
  const sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DAC_CODE,
      d2.DEVICE_CODE AS DRI_AUTOMATION_CODE
    FROM
      DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN MACHINES ON MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID)
      LEFT JOIN DRIS_AUTOMATIONS ON (MACHINES.ID = DRIS_AUTOMATIONS.MACHINE_ID)
      LEFT JOIN DRIS_DEVICES ON (DRIS_DEVICES.ID = DRIS_AUTOMATIONS.DRI_DEVICE_ID)
      LEFT JOIN DEVICES d2 ON (d2.ID = DRIS_DEVICES.DEVICE_ID)
    WHERE DEVICES.DEVICE_CODE = :DEVICE_CODE GROUP BY DEVICES.DEVICE_CODE;
  `
  return sqldb.querySingle<{
    DAC_CODE: string
    DRI_AUTOMATION_CODE: string
  }>(sentence, qPars)
}

export async function getDacsByUnit(qPars: { UNIT_ID: number }) {
  const sentence = `
    SELECT
      DEVICES.DEVICE_CODE
    FROM DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      INNER JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
    WHERE DEVICES_UNITS.UNIT_ID = :UNIT_ID
  `

  return sqldb.query<{
    DEVICE_CODE: string
  }>(sentence, qPars)
} 

export async function getDacsByUnitWithMachineInfo(qPars: { UNIT_ID: number }) {
  const sentence = `
    SELECT
      DEVICES.DEVICE_CODE,
      MACHINES.ID AS MACHINE_ID,
      MACHINES.NAME AS MACHINE_NAME,
      CASE
        WHEN CONDENSERS.MACHINE_KW IS NOT NULL THEN CONDENSERS.MACHINE_KW
        WHEN EVAPORATORS.MACHINE_KW IS NOT NULL THEN EVAPORATORS.MACHINE_KW
        WHEN ASSET_HEAT_EXCHANGERS.MACHINE_KW IS NOT NULL THEN ASSET_HEAT_EXCHANGERS.MACHINE_KW
        ELSE NULL
      END AS MACHINE_KW,
      MACHINES.FLUID_TYPE,
      CONDENSERS.APPL_CFG AS DAC_APPL,
      CONDENSERS.TYPE_CFG AS DAC_TYPE,
      SFC_P0.MULT_QUAD AS P0_MULT_QUAD,
      SFC_P0.MULT_LIN AS P0_MULT_LIN,
      SFC_P0.OFST AS P0_OFST,
      SFC_P1.MULT_QUAD AS P1_MULT_QUAD,
      SFC_P1.MULT_LIN AS P1_MULT_LIN,
      SFC_P1.OFST AS P1_OFST,
      DACS_DEVICES.P0_POSITN,
      DACS_DEVICES.P1_POSITN,
      DACS_DEVICES.P0_SENSOR,
      DACS_DEVICES.P1_SENSOR,
      CONCAT('["', CONCAT_WS('", "', DACS_DEVICES.T0, DACS_DEVICES.T1, DACS_DEVICES.T2), '"]') AS T0_T1_T2,
      (COALESCE(DAMS_DEVICES.DISAB, DACS_AUTOMATIONS.DISAB, 1)) AS DAM_DISABLED,
      L1_SOURCE.SELECTED_L1_SIM,
      ASSETS.ID AS ASSET_ID,
      ASSETS.NAME AS ASSET_NAME,
      DEVFWVERS.V_MAJOR
    FROM DACS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      LEFT JOIN DEVFWVERS ON (DEVICES.DEVICE_CODE=DEVFWVERS.DEV_ID)
      INNER JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN MACHINES ON (MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID))
      LEFT JOIN SENSORS AS P0S ON (P0S.SENSOR_ID = DACS_DEVICES.P0_SENSOR)
      LEFT JOIN SENSOR_FIRMWARE_CURVES SFC_P0
        ON SFC_P0.SENSOR_ID=P0S.SENSOR_ID AND (DEVFWVERS.V_MAJOR, DEVFWVERS.V_MINOR, DEVFWVERS.V_PATCH) >= (SFC_P0.V_MAJOR, SFC_P0.V_MINOR, SFC_P0.V_PATCH)
      LEFT JOIN SENSOR_FIRMWARE_CURVES SFC_P0_MAX
		    ON SFC_P0_MAX.SENSOR_ID=P0S.SENSOR_ID
          AND (SFC_P0_MAX.V_MAJOR, SFC_P0_MAX.V_MINOR, SFC_P0_MAX.V_PATCH) > (SFC_P0.V_MAJOR, SFC_P0.V_MINOR, SFC_P0.V_PATCH)
          AND (SFC_P0_MAX.V_MAJOR, SFC_P0_MAX.V_MINOR, SFC_P0_MAX.V_PATCH) < (DEVFWVERS.V_MAJOR, DEVFWVERS.V_MINOR, DEVFWVERS.V_PATCH)
      LEFT JOIN SENSORS AS P1S ON (P1S.SENSOR_ID = DACS_DEVICES.P1_SENSOR)
      LEFT JOIN SENSOR_FIRMWARE_CURVES SFC_P1
        ON SFC_P1.SENSOR_ID=P1S.SENSOR_ID AND (DEVFWVERS.V_MAJOR, DEVFWVERS.V_MINOR, DEVFWVERS.V_PATCH) >= (SFC_P1.V_MAJOR, SFC_P1.V_MINOR, SFC_P1.V_PATCH)
      LEFT JOIN SENSOR_FIRMWARE_CURVES SFC_P1_MAX
		    ON SFC_P1_MAX.SENSOR_ID=P1S.SENSOR_ID
          AND (SFC_P1_MAX.V_MAJOR, SFC_P1_MAX.V_MINOR, SFC_P1_MAX.V_PATCH) > (SFC_P1.V_MAJOR, SFC_P1.V_MINOR, SFC_P1.V_PATCH)
          AND (SFC_P1_MAX.V_MAJOR, SFC_P1_MAX.V_MINOR, SFC_P1_MAX.V_PATCH) < (DEVFWVERS.V_MAJOR, DEVFWVERS.V_MINOR, DEVFWVERS.V_PATCH)
      LEFT JOIN L1_SOURCE ON (L1_SOURCE.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN DAMS_DEVICES ON (DAMS_DEVICES.DEVICE_ID = DEVICES.ID)      
      LEFT JOIN DACS_AUTOMATIONS ON (DACS_AUTOMATIONS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      LEFT JOIN ASSETS on (ASSETS.ID = COALESCE(CONDENSERS.ASSET_ID, EVAPORATORS.ASSET_ID, ASSET_HEAT_EXCHANGERS.ASSET_ID))
    WHERE DEVICES_UNITS.UNIT_ID = :UNIT_ID
      AND (DACS_DEVICES.P0_SENSOR IS NULL OR SFC_P0_MAX.ID IS NULL)
      AND (DACS_DEVICES.P1_SENSOR IS NULL OR SFC_P1_MAX.ID IS NULL)
  `

  return sqldb.query<{
    DEVICE_CODE: string
    MACHINE_ID: number
    MACHINE_NAME: string
    MACHINE_KW: number
    FLUID_TYPE: string
    DAC_APPL: string
    DAC_TYPE: string
    P0_MULT_QUAD: number
    P0_MULT_LIN: number
    P0_OFST: number
    P1_MULT_QUAD: number
    P1_MULT_LIN: number
    P1_OFST: number
    P0_POSITN: string
    P1_POSITN: string
    P0_SENSOR: string
    P1_SENSOR: string
    T0_T1_T2: string
    DAM_DISABLED: number
    SELECTED_L1_SIM: string
    ASSET_ID: number
    ASSET_NAME: string
    V_MAJOR: number
  }>(sentence, qPars)
} 

export function getAllDacsByUnit(qPars: { UNIT_ID: number }) {
  let sentence = `
  SELECT
    DEVICES.DEVICE_CODE,
    DEVICES_UNITS.UNIT_ID
`
sentence += `
  FROM DACS_DEVICES
    INNER JOIN DEVICES ON (DACS_DEVICES.DEVICE_ID = DEVICES.ID)
    INNER JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
  `
sentence += ` WHERE DEVICES_UNITS.UNIT_ID = :UNIT_ID`;

return sqldb.query<{
  DEVICE_CODE: string
  UNIT_ID: number
}>(sentence, qPars);
}

export function getList (qPars: { clientIds: number[], unitIds: number[] }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE
  `

  sentence += `
    FROM
      DACS_DEVICES  
      INNER JOIN DEVICES ON (DEVICES.ID = DACS_DEVICES.DEVICE_ID)
      INNER JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      INNER JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
  `
  const conditions: string[] = []
  if (qPars.clientIds) { conditions.push(`DEVICES_CLIENTS.CLIENT_ID IN (:clientIds)`) }
  if (qPars.unitIds) { conditions.push(`DEVICES_UNITS.UNIT_ID IN (:unitIds)`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    DEVICE_CODE: string
 }>(sentence, qPars);
} 