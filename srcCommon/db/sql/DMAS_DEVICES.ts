import * as sqldb from '../connectSql'
import { saveOperationLog, OperationLogData } from '../dbModifLog'
import { dbLogger } from '../../../srcCommon/helpers/logger'

/* @IFHELPER:FUNC insert = INSERT
  FROM DMAS_DEVICES
  FIELD DMAS_DEVICES.DEVICE_ID
  FIELD DMAS_DEVICES.WATER_ID
*/
export async function w_insertIgnore (qPars: {DEVICE_ID: number, WATER_ID?: number, LEAK_ANALYSIS_ID?: number }, operationLogData: OperationLogData) {
  const fields: string[] = []

  fields.push('DEVICE_ID');
  if(qPars.WATER_ID !== undefined) fields.push('WATER_ID'); 

  const sentence = `INSERT IGNORE INTO DMAS_DEVICES (${fields.join(', ')}) VALUES (:${fields.join(', :')})`

  if (operationLogData) {
    await saveOperationLog('DMAS_DEVICES', sentence, qPars, operationLogData);
    dbLogger('DMAS_DEVICES', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

/* @IFHELPER:FUNC updateInfo = UPDATE
  FROM DMAS_DEVICES
  FIELD [[IFOWNPROP {:WATER_ID}]] DMAS_DEVICES.WATER_ID
  FIELD [[IFOWNPROP {:INSTALLATION_LOCATION}]] DMAS_DEVICES.INSTALLATION_LOCATION
  FIELD [[IFOWNPROP {:INSTALLATION_DATE}]] DMAS_DEVICES.INSTALLATION_DATE

  WHERE {DEVICES.DEVICE_CODE} = {:DEVICE_CODE}
*/
export async function w_update (
  qPars: { DEVICE_CODE: string, WATER_ID?: number, LEAK_ANALYSIS_ID?: number, INSTALLATION_LOCATION?: string, INSTALLATION_DATE?: string }, operationLogData: OperationLogData
) {
  const fields: string[] = []
  if (qPars.WATER_ID !== undefined) { fields.push('WATER_ID = :WATER_ID') }
  if (qPars.LEAK_ANALYSIS_ID !== undefined) { fields.push('LEAK_ANALYSIS_ID = :LEAK_ANALYSIS_ID') }
  if (qPars.INSTALLATION_LOCATION !== undefined) { fields.push('INSTALLATION_LOCATION = :INSTALLATION_LOCATION') }
  if (qPars.INSTALLATION_DATE !== undefined) { fields.push('INSTALLATION_DATE = :INSTALLATION_DATE') }

  if (!fields.length) throw Error('No fields to update').HttpStatus(500).DebugInfo({ qPars })

  const join = ` 
  INNER JOIN DEVICES ON (DEVICES.ID = DMAS_DEVICES.DEVICE_ID)
`;

  let sentence = `UPDATE DMAS_DEVICES ${join} SET ${fields.join(', ')} WHERE DEVICES.DEVICE_CODE = :DEVICE_CODE`

  if (operationLogData) {
    await saveOperationLog('DMAS_DEVICES', sentence, qPars, operationLogData);
    dbLogger('DMAS_DEVICES', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

/* @IFHELPER:FUNC getList = SELECT LIST
  PARAM clientIds?: {DEVICES_CLIENTS.CLIENT_ID}[]
  PARAM stateIds?: {STATEREGION.ID}[]
  PARAM cityIds?: {CLUNITS.CITY_ID}[]
  PARAM unitIds?: {DEVICES_UNITS.UNIT_ID}[]

  FROM DMAS_DEVICES
  INNER JOIN (DEVICES.ID = DMAS_DEVICES.DEVICE_ID)
  LEFT JOIN (CLIENTS.CLIENT_ID = DEVICES.CLIENT_ID)
  LEFT JOIN (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
  LEFT JOIN (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
  LEFT JOIN (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
  LEFT JOIN (CITY.CITY_ID = CLUNITS.CITY_ID)
  LEFT JOIN (STATEREGION.ID = CITY.STATE_ID)

  SELECT DEVICES.DEVICE_CODE AS DMA_ID,
  SELECT DEVICES_UNITS.UNIT_ID,
  SELECT DEVICES_CLIENTS.CLIENT_ID,
  SELECT CLUNITS.UNIT_NAME,
  SELECT STATEREGION.NAME AS STATE_ID,
  SELECT CITY.NAME AS CITY_NAME,
  SELECT CLIENTS.NAME AS CLIENT_NAME

  WHERE [[IFJS {:clientIds}]] {DEVICES_CLIENTS.CLIENT_ID} IN ({:clientIds})
  WHERE [[IFJS {:stateIds}]] {STATEREGION.ID} IN ({:stateIds})
  WHERE [[IFJS {:cityIds}]] {CLUNITS.CITY_ID} IN ({:cityIds})
  WHERE [[IFJS {:unitIds}]] {DEVICES_UNITS.UNIT_ID} IN ({:unitIds})
*/
export function getList (qPars: { clientIds?: number[], stateIds?: string[], cityIds?: string[], unitIds?: number[], INCLUDE_INSTALLATION_UNIT?: boolean }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DMA_ID,
      WATERS.UNIT_ID,
      CLUNITS.CLIENT_ID,
      CLUNITS.UNIT_NAME,
      STATEREGION.ID AS STATE_ID,
      STATEREGION.NAME AS STATE_NAME,
      CITY.NAME AS CITY_NAME,
      CITY.CITY_ID AS CITY_ID,
      CLIENTS.NAME AS CLIENT_NAME
  `
  sentence += `
    FROM
    DMAS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DMAS_DEVICES.DEVICE_ID) 
      
      LEFT JOIN WATERS ON (DMAS_DEVICES.WATER_ID = WATERS.ID)            
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = WATERS.UNIT_ID)
      LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = CLUNITS.CLIENT_ID)
      LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
      LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
  `

  const conditions: string[] = []
  if (qPars.clientIds) { conditions.push(`CLIENTS.CLIENT_ID IN (:clientIds)`) }
  if (qPars.stateIds) { conditions.push(`STATEREGION.ID IN (:stateIds)`) }
  if (qPars.cityIds) { conditions.push(`CLUNITS.CITY_ID IN (:cityIds)`) }
  if (qPars.unitIds) { conditions.push(`WATERS.UNIT_ID IN (:unitIds)`) }
  if (qPars.INCLUDE_INSTALLATION_UNIT === false) {
    conditions.push(`CLUNITS.PRODUCTION = 1`)
  }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    DMA_ID: string
    UNIT_ID: number
    CLIENT_ID: number
    UNIT_NAME: string
    STATE_NAME: string
    STATE_ID: number
    CITY_ID: string
    CITY_NAME: string
    CLIENT_NAME: string
  }>(sentence, qPars)
}

/* @IFHELPER:FUNC getExtraInfo = SELECT ROW
  PARAM DEVICE_CODE: {DEVICES.DEVICE_CODE}

  FROM DMAS_DEVICES
  INNER JOIN DEVICES ON (DEVICES.ID = DMAS_DEVICES.DEVICE_ID)
  INNER JOIN WATERS ON (WATERS.ID = DMAS_DEVICES.WATER_ID)
  INNER JOIN HYDROMETER_MODELS ON (HYDROMETER_MODELS.ID = WATERS.HYDROMETER_MODELS_ID)
  LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
  LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
  LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
  LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
  LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
  LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)

    
    SELECT DEVICES.DEVICE_CODE AS DMA_ID,
    SELECT DEVICES_UNITS.UNIT_ID,
    SELECT DMAS_DEVICES.INSTALLATION_LOCATION,
    SELECT DMAS_DEVICES.INSTALLATION_DATE,
    SELECT WATERS.TOTAL_CAPACITY,
    SELECT WATERS.QUANTITY_OF_RESERVOIRS,
    SELECT HYDROMETER_MODELS.HYDROMETER_MODEL,
    SELECT CLUNITS.UNIT_NAME,
    SELECT CLIENTS.NAME AS CLIENT_NAME,
    SELECT CLIENTS.CLIENT_ID,
    SELECT CITY.NAME AS CITY_NAME,
    SELECT STATEREGION.NAME AS STATE_ID

  WHERE {DEVICES.DEVICE_CODE} = {:DEVICE_CODE}
*/
export function getExtraInfo (qPars: { DEVICE_CODE: string }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DMA_ID,
      DEVICES.ID AS DEVICE_ID,
      WATERS.UNIT_ID,
      DMAS_DEVICES.WATER_ID,
      DMAS_DEVICES.LEAK_ANALYSIS_ID,
      DMAS_DEVICES.INSTALLATION_LOCATION,
      DMAS_DEVICES.INSTALLATION_DATE,
      WATERS.TOTAL_CAPACITY,
      WATERS.QUANTITY_OF_RESERVOIRS,
      HYDROMETER_MODELS.HYDROMETER_MODEL,
      CLUNITS.UNIT_NAME,
      CLIENTS.NAME AS CLIENT_NAME,
      CLIENTS.CLIENT_ID,
      CITY.NAME AS CITY_NAME,
      STATEREGION.NAME AS STATE_ID,
      TIME_ZONES.AREA AS TIMEZONE_AREA,
      TIME_ZONES.TIME_ZONE_OFFSET AS TIMEZONE_OFFSET
  `
  sentence += `
    FROM
      DMAS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DMAS_DEVICES.DEVICE_ID)
      LEFT JOIN WATERS ON (WATERS.ID = DMAS_DEVICES.WATER_ID)
      LEFT JOIN HYDROMETER_MODELS ON (HYDROMETER_MODELS.ID = WATERS.HYDROMETER_MODELS_ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = WATERS.UNIT_ID)
      LEFT JOIN TIME_ZONES ON (CLUNITS.TIMEZONE_ID = TIME_ZONES.ID)
      LEFT JOIN CLIENTS ON (CLUNITS.CLIENT_ID = CLIENTS.CLIENT_ID)
      LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
      LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
  `

  sentence += ` WHERE DEVICES.DEVICE_CODE = :DEVICE_CODE `

  return sqldb.querySingle<{
    DMA_ID: string
    DEVICE_ID: number
    UNIT_ID: number
    WATER_ID: number,
    LEAK_ANALYSIS_ID: number,
    INSTALLATION_LOCATION: string
    INSTALLATION_DATE: string
    TOTAL_CAPACITY: number
    QUANTITY_OF_RESERVOIRS: number
    HYDROMETER_MODEL: string
    UNIT_NAME: string
    CLIENT_NAME: string
    CLIENT_ID: number
    CITY_NAME: string
    STATE_ID: string
    TIMEZONE_AREA: string
    TIMEZONE_OFFSET: number
  }>(sentence, qPars)
}

/* @IFHELPER:FUNC deleteRow = DELETE
  PARAM ID: {DMAS_DEVICES.ID}
  FROM DMAS_DEVICES
  WHERE {DMAS_DEVICES.ID} = {:ID}
*/
export async function w_deleteRow (qPars: { ID: number}, operationLogData: OperationLogData) {

  const sentence = `DELETE FROM DMAS_DEVICES WHERE DMAS_DEVICES.ID = :ID`;

  if (operationLogData) {
    await saveOperationLog('DMAS_DEVICES', sentence, qPars, operationLogData);
    dbLogger('DMAS_DEVICES', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

export async function w_deleteFromDma (qPars: { DEVICE_CODE: string }, operationLogData: OperationLogData) {

  const join = " INNER JOIN DEVICES ON (DEVICES.ID = DMAS_DEVICES.DEVICE_ID)";

  const sentence = `DELETE DMAS_DEVICES FROM DMAS_DEVICES ${join} WHERE DEVICES.DEVICE_CODE = :DEVICE_CODE`;
  
  if (operationLogData) {
    await saveOperationLog('DMAS_DEVICES', sentence, qPars, operationLogData);
    dbLogger('DMAS_DEVICES', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

/* @IFHELPER:FUNC w_deleteFromClient = DELETE
  PARAM CLIENT_ID
  INNER JOIN (WATERS.ID = DMAS_DEVICES.WATER_ID)
  INNER JOIN (CLUNITS.UNIT_ID = WATERS.UNIT_ID)
  INNER JOIN (CLIENTS.CLIENT_ID = CLUNITS.CLIENT_ID)

  FROM DMA_DEVICES
  WHERE CLIENTS.CLIENT_ID = :CLIENT_ID
*/
export async function w_deleteFromClient (qPars: { CLIENT_ID: number }, operationLogData: OperationLogData) {
  const join = ` 
    INNER JOIN WATERS ON (WATERS.ID = DMAS_DEVICES.WATER_ID)
    INNER JOIN CLUNITS ON (CLUNITS.UNIT_ID = WATERS.UNIT_ID)
    INNER JOIN CLIENTS ON (CLIENTS.CLIENT_ID = CLUNITS.CLIENT_ID)`;

  const sentence = `DELETE DMAS_DEVICES FROM DMAS_DEVICES ${join} WHERE CLIENTS.CLIENT_ID = :CLIENT_ID`;

  if (operationLogData) {
    await saveOperationLog('DMAS_DEVICES', sentence, qPars, operationLogData);
    dbLogger('DMAS_DEVICES', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

export async function w_deleteFromUnit (qPars: { UNIT_ID: number }, operationLogData: OperationLogData) {
  const join = ` 
    INNER JOIN WATERS ON (DMAS_DEVICES.WATER_ID = WATERS.ID)
`;

  const sentence = `DELETE DMAS_DEVICES FROM DMAS_DEVICES ${join} WHERE WATERS.UNIT_ID = :UNIT_ID`;

  if (operationLogData) {
    await saveOperationLog('DMAS_DEVICES', sentence, qPars, operationLogData);
    dbLogger('DMAS_DEVICES', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

export function getBasicInfo (qPars: { DEVICE_CODE: string, clientId?: number }) {
  let sentence = `
    SELECT
      CLUNITS.CLIENT_ID,
      DEVICES.ID AS DEVICE_ID,
      WATERS.UNIT_ID,
      DEVICES.DEVICE_CODE AS DMA_ID,
      DATE_FORMAT(DEVICES.DAT_BEGMON, '%Y-%m-%d %H:%i:%S') AS DAT_BEGMON,
      DATE_FORMAT(DMAS_DEVICES.INSTALLATION_DATE, '%d/%m/%Y') AS INSTALLATION_DATE,
      DATE_FORMAT(DMAS_DEVICES.INSTALLATION_DATE, '%Y/%m/%d') AS INSTALLATION_DATE_YMD,
      HYDROMETER_MODELS.HYDROMETER_MODEL
  `
  sentence += `
    FROM
      DMAS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DMAS_DEVICES.DEVICE_ID)
      LEFT JOIN WATERS ON (WATERS.ID = DMAS_DEVICES.WATER_ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = WATERS.UNIT_ID)
      LEFT JOIN HYDROMETER_MODELS ON (HYDROMETER_MODELS.ID = WATERS.HYDROMETER_MODELS_ID)
  
  `

  const conditions: string[] = []
  conditions.push(`DEVICES.DEVICE_CODE = :DEVICE_CODE`)
  if (qPars.clientId !== undefined) { conditions.push(`CLUNITS.CLIENT_ID = :clientId`) }
  sentence += ' WHERE ' + conditions.join(' AND ')

  return sqldb.querySingle<{
    CLIENT_ID: number
    DEVICE_ID: number
    UNIT_ID: number
    DMA_ID: string
    DAT_BEGMON: string
    INSTALLATION_DATE: string
    INSTALLATION_DATE_YMD: string
    HYDROMETER_MODEL: string
  }>(sentence, qPars)
}

/* @IFHELPER:FUNC getDevExtraInfo = SELECT ROW
  PARAM DEVICE_CODE: {DEVICES.DEVICE_CODE}
  PARAM CLIENT_ID?: {DEVICES_CLIENTS.CLIENT_ID}

  FROM DMAS_DEVICES    
  INNER JOIN DEVICES ON (DEVICES.ID = DMAS_DEVICES.DEVICE_ID)
  INNER JOIN WATERS ON (WATERS.ID = DMAS_DEVICES.WATER_ID)
  INNER JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DMAS_DEVICES.DEVICE_ID)
  INNER JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DMAS_DEVICES.DEVICE_ID)
  INNER JOIN HYDROMETER_MODELS ON (HYDROMETER_MODELS.ID = WATERS.HYDROMETER_MODELS_ID)
  LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
  LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
  LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
  LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)

  SELECT DEVICES.DEVICE_CODE AS DMA_ID,
  SELECT DEVICES.BT_ID,
  SELECT DEVICES.DAT_BEGMON,
  SELECT DMAS_DEVICES.INSTALLATION_LOCATION,
  SELECT DMAS_DEVICES.INSTALLATION_DATE,
  SELECT WATERS.TOTAL_CAPACITY,
  SELECT WATERS.QUANTITY_OF_RESERVOIRS,
  SELECT HYDROMETER_MODELS.HYDROMETER_MODEL,
  SELECT DEVICES_UNITS.UNIT_ID,
  SELECT DEVICES_UNITS.CLIENT_ID,
  SELECT CLUNITS.CITY_ID,
  SELECT CITY.STATE_ID,
  SELECT CITY.NAME AS CITY_NAME,
  SELECT CLUNITS.UNIT_NAME,
  SELECT CLUNITS.LAT,
  SELECT CLUNITS.LON,

  WHERE {DEVICES.DEVICE_CODE} = {:DEVICE_CODE}
  WHERE [[IFJS qPars.CLIENT_ID != null]] {DEVICES_CLIENTS.CLIENT_ID} = {:CLIENT_ID}
*/
export function getDevExtraInfo (qPars: { DEVICE_CODE: string, CLIENT_ID?: number }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DMA_ID,
      DEVICES.BT_ID,
      WATERS.ID AS WATER_ID,
      DEVICES.DAT_BEGMON,
      DMAS_DEVICES.INSTALLATION_LOCATION,
      DMAS_DEVICES.INSTALLATION_DATE,
      WATERS.TOTAL_CAPACITY,
      WATERS.QUANTITY_OF_RESERVOIRS,
      HYDROMETER_MODELS.HYDROMETER_MODEL,
      WATERS.UNIT_ID,
      CLUNITS.CLIENT_ID,
      CLUNITS.CITY_ID,
      STATEREGION.NAME AS STATE_ID,
      CITY.NAME AS CITY_NAME,
      CLUNITS.UNIT_NAME,
      CLUNITS.LAT,
      CLUNITS.LON
  `
  sentence += `
    FROM
      DMAS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DMAS_DEVICES.DEVICE_ID)
      LEFT JOIN WATERS ON (WATERS.ID = DMAS_DEVICES.WATER_ID)      
      LEFT JOIN HYDROMETER_MODELS ON (HYDROMETER_MODELS.ID = WATERS.HYDROMETER_MODELS_ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = WATERS.UNIT_ID)
      LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = CLUNITS.CLIENT_ID)
      LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
      LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
  `

  const conditions: string[] = []
  conditions.push(`DEVICES.DEVICE_CODE = :DEVICE_CODE`)
  if (qPars.CLIENT_ID != null) { conditions.push(`CLUNITS.CLIENT_ID = :CLIENT_ID`) }
  sentence += ' WHERE ' + conditions.join(' AND ')

  return sqldb.querySingle<{
    DMA_ID: string
    BT_ID: string
    WATER_ID: number
    HYDROMETER_MODEL?: string
    INSTALLATION_LOCATION?: string
    INSTALLATION_DATE?: string
    TOTAL_CAPACITY?: number
    QUANTITY_OF_RESERVOIRS?: number
    UNIT_ID: number
    CLIENT_ID: number
    CITY_ID: string
    STATE_ID: string
    CITY_NAME: string
    UNIT_NAME: string
    LAT: string
    LON: string
  }>(sentence, qPars)
}

/* @IFHELPER:FUNC getIntegrId = SELECT ROW
  PARAM UNIT_ID: {DEVICES_UNITS.UNIT_ID}

  FROM DMAS_DEVICES
  INNER JOIN DEVICES ON (DEVICES.ID = DMAS_DEVICES.DEVICE_ID)
  INNER JOIN DEVICES ON (DEVICES_UNITS.DEVICE_ID = DMAS_DEVICES.DEVICE_ID)

  SELECT DEVICES.DEVICE_CODE AS DMA_ID

  WHERE {DEVICES_UNITS.UNIT_ID} = {:UNIT_ID}
*/
export function getIntegrId (qPars: { UNIT_ID: number }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DMA_ID
  `
  sentence += `
    FROM
      DMAS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DMAS_DEVICES.DEVICE_ID)
      INNER JOIN WATERS ON (DMAS_DEVICES.WATER_ID = WATERS.ID)
  `

  sentence += ` WHERE WATERS.UNIT_ID = :UNIT_ID `

  return sqldb.querySingle<{
    DMA_ID: string
  }>(sentence, qPars)
}

/* @IFHELPER:FUNC getDisassociatedDmas = SELECT ROWS

  FROM DMAS_DEVICES
  INNER JOIN DEVICES ON (DEVICES.ID = DMAS_DEVICES.DEVICE_ID)
  INNER JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DMAS_DEVICES.DEVICE_ID)

  SELECT DEVICES.DEVICE_CODE AS DMA_ID

  WHERE DEVICES_UNITS.UNIT_ID IS NULL
*/
export function getDisassociatedDmas() {
  let sentence = `
  SELECT
    DEVICES.DEVICE_CODE AS DMA_ID
  FROM
    DMAS_DEVICES
    INNER JOIN DEVICES ON (DEVICES.ID = DMAS_DEVICES.DEVICE_ID)
    LEFT JOIN WATERS ON (DMAS_DEVICES.WATER_ID = WATERS.ID)
  
  WHERE WATERS.UNIT_ID IS NULL`


  return sqldb.query<{
    DMA_ID: string
  }>(sentence, {});
}


/* @IFHELPER:FUNC getListWithLeakAlgorithmInfo = SELECT LIST

  FROM DMAS_DEVICES
  INNER JOIN DEVICES ON (DEVICES.ID = DMAS_DEVICES.DEVICE_ID)
  INNER JOIN WATERS ON (WATERS.ID = DMAS_DEVICES.WATER_ID)
  INNER JOIN HYDROMETER_MODELS ON (HYDROMETER_MODELS.ID = WATERS.HYDROMETER_MODELS_ID)
  INNER JOIN LEAK_ANALYSIS ON (LEAK_ANALYSIS.ID = DMAS_DEVICES.LEAK_ANALYSIS_ID)
  INNER JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DMAS_DEVICES.DEVICE_ID)
  INNER JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DMAS_DEVICES.DEVICE_ID)      
  LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
  LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)

  SELECT DEVICES.DEVICE_CODE AS DMA_ID,
  SELECT HYDROMETER_MODELS.HYDROMETER_MODEL AS HYDROMETER_MODEL,
  SELECT WATERS.TOTAL_CAPACITY,
  SELECT LEAK_ANALYSIS.LEAK_ANALYSIS,
  SELECT LEAK_ANALYSIS.CONTINUOUS_CONSUMPTION,
  SELECT LEAK_ANALYSIS.CONTINUOUS_CONSUMPTION_TIME_INTERVAL,
  SELECT LEAK_ANALYSIS.CONTINUOUS_CONSUMPTION_MIN_VALUE,
  SELECT LEAK_ANALYSIS.HISTORY_CONSUMPTION,
  SELECT LEAK_ANALYSIS.HISTORY_CONSUMPTION_TIMES,
  SELECT LEAK_ANALYSIS.CAPACITY_CONSUMPTION,
  SELECT LEAK_ANALYSIS.CAPACITY_CONSUMPTION_TIMES,
  SELECT DEVICES_UNITS.UNIT_ID,
  SELECT DEVICES_CLIENTS.CLIENT_ID,
  SELECT CLUNITS.UNIT_NAME,
  SELECT CLIENTS.NAME AS CLIENT_NAME

*/
export function getListWithLeakAlgorithmInfo (qPars: {clientIds?: number[], unitIds?: number[]}) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DMA_ID,
      HYDROMETER_MODELS.HYDROMETER_MODEL,
      WATERS.TOTAL_CAPACITY,
      LEAK_ANALYSIS.LEAK_ANALYSIS AS LEAK_ANALYSIS,
      LEAK_ANALYSIS.CONTINUOUS_CONSUMPTION AS LA_CONTINUOUS_CONSUMPTION,
      LEAK_ANALYSIS.CONTINUOUS_CONSUMPTION_TIME_INTERVAL AS LA_CONTINUOUS_CONSUMPTION_TIME_INTERVAL,
      LEAK_ANALYSIS.CONTINUOUS_CONSUMPTION_MIN_VALUE AS LA_CONTINUOUS_CONSUMPTION_MIN_VALUE,
      LEAK_ANALYSIS.HISTORY_CONSUMPTION AS LA_HISTORY_CONSUMPTION,
      LEAK_ANALYSIS.HISTORY_CONSUMPTION_TIMES AS LA_HISTORY_CONSUMPTION_TIMES,
      LEAK_ANALYSIS.CAPACITY_CONSUMPTION AS LA_CAPACITY_CONSUMPTION,
      LEAK_ANALYSIS.CAPACITY_CONSUMPTION_TIMES AS LA_CAPACITY_CONSUMPTION_TIMES,
      WATERS.UNIT_ID,
      CLIENTS.CLIENT_ID,
      CLUNITS.UNIT_NAME,
      CLIENTS.NAME AS CLIENT_NAME
  `
  sentence += `
    FROM
      DMAS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DMAS_DEVICES.DEVICE_ID)
      INNER JOIN LEAK_ANALYSIS ON (LEAK_ANALYSIS.ID = DMAS_DEVICES.LEAK_ANALYSIS_ID)
      LEFT JOIN WATERS ON (WATERS.ID = DMAS_DEVICES.WATER_ID)
      LEFT JOIN HYDROMETER_MODELS ON (HYDROMETER_MODELS.ID = WATERS.HYDROMETER_MODELS_ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = WATERS.UNIT_ID)
      LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = CLUNITS.CLIENT_ID)
  `

  const conditions: string[] = []
  if (qPars.clientIds) { conditions.push(`CLIENTS.CLIENT_ID IN (:clientIds)`) }
  if (qPars.unitIds) { conditions.push(`WATERS.UNIT_ID IN (:unitIds)`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    DMA_ID: string
    HYDROMETER_MODEL: string
    TOTAL_CAPACITY: number
    LEAK_ANALYSIS: boolean
    LA_CONTINUOUS_CONSUMPTION: boolean
    LA_CONTINUOUS_CONSUMPTION_TIME_INTERVAL: number
    LA_CONTINUOUS_CONSUMPTION_MIN_VALUE: number
    LA_HISTORY_CONSUMPTION: boolean
    LA_HISTORY_CONSUMPTION_TIMES: number
    LA_CAPACITY_CONSUMPTION: boolean
    LA_CAPACITY_CONSUMPTION_TIMES: number
    UNIT_ID: number
    CLIENT_ID: number
    UNIT_NAME: string
    CLIENT_NAME: string
  }>(sentence, qPars)
}


/* @IFHELPER:FUNC getDmaInfoByUnit = SELECT ROW

  FROM DMAS_DEVICES
  INNER JOIN DEVICES ON (DEVICES.ID = DMAS_DEVICES.DEVICE_ID)
  INNER JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DMAS_DEVICES.DEVICE_ID)
  INNER JOIN HYDROMETER ON (HYDROMETER_MODELS.ID = DMAS_DEVICES.HYDROMETER_ID)

  SELECT DEVICES.DEVICE_CODE AS DMA_ID
  SELECT DMAS_DEVICES.INSTALLATION_DATE
  SELECT DMAS_DEVICES.INSTALLATION_LOCATION
  SELECT DMAS_DEVICES.QUANTITY_OF_RESERVOIRS,
  SELECT DMAS_DEVICES.TOTAL_CAPACITY
  SELECT HYDROMETER_MODELS.HYDROMETER_MODEL

  WHERE {DEVICES_UNITS.UNIT_ID } = {:UNIT_ID}
*/
export function getDmaInfoByUnit (qPars: { UNIT_ID: number }){
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DMA_ID,
      DATE_FORMAT(DMAS_DEVICES.INSTALLATION_DATE, '%d/%m/%Y') AS INSTALLATION_DATE,
      DATE_FORMAT(DMAS_DEVICES.INSTALLATION_DATE, '%Y/%m/%d') AS INSTALLATION_DATE_YMD,
      DMAS_DEVICES.INSTALLATION_LOCATION,
      WATERS.QUANTITY_OF_RESERVOIRS,
      WATERS.TOTAL_CAPACITY,
      HYDROMETER_MODELS.HYDROMETER_MODEL

    FROM
      DMAS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DMAS_DEVICES.DEVICE_ID)
      INNER JOIN WATERS ON (WATERS.ID = DMAS_DEVICES.WATER_ID)
      LEFT JOIN HYDROMETER_MODELS ON (HYDROMETER_MODELS.ID = WATERS.HYDROMETER_MODELS_ID)

    WHERE WATERS.UNIT_ID = :UNIT_ID 
  `
    
    return sqldb.querySingle<{
      DMA_ID: string
      INSTALLATION_DATE: string
      INSTALLATION_DATE_YMD: string
      INSTALLATION_LOCATION: string
      QUANTITY_OF_RESERVOIRS: number
      TOTAL_CAPACITY: number
      HYDROMETER_MODEL: string
    }>(sentence, qPars)
}

export function getDmaInfoByClient (qPars: { CLIENT_ID: number }){
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DMA_ID,
      DMAS_DEVICES.WATER_ID,
      DMAS_DEVICES.LEAK_ANALYSIS_ID,
      DATE_FORMAT(DMAS_DEVICES.INSTALLATION_DATE, '%d/%m/%Y') AS INSTALLATION_DATE,
      DMAS_DEVICES.INSTALLATION_LOCATION,
      WATERS.QUANTITY_OF_RESERVOIRS,
      WATERS.TOTAL_CAPACITY,
      HYDROMETER_MODELS.HYDROMETER_MODEL,
      STATEREGION.FULL_NAME AS STATE_NAME,
      CITY.NAME AS CITY_NAME,
      CLUNITS.UNIT_NAME,
      CLUNITS.AMOUNT_PEOPLE,
      CLUNITS.CLIENT_ID,
      CLUNITS.UNIT_ID
    FROM
      DMAS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DMAS_DEVICES.DEVICE_ID)
      INNER JOIN WATERS ON (WATERS.ID = DMAS_DEVICES.WATER_ID)
      LEFT JOIN HYDROMETER_MODELS ON (HYDROMETER_MODELS.ID = WATERS.HYDROMETER_MODELS_ID)
      LEFT JOIN CLUNITS ON (WATERS.UNIT_ID = CLUNITS.UNIT_ID)
      LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
      LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
    WHERE CLUNITS.CLIENT_ID = :CLIENT_ID 
  `
    
    return sqldb.query<{
      DMA_ID: string
      WATER_ID: number
      LEAK_ANALYSIS_ID: number
      INSTALLATION_DATE: string
      INSTALLATION_LOCATION: string
      QUANTITY_OF_RESERVOIRS: number
      TOTAL_CAPACITY: number
      HYDROMETER_MODEL: string
      STATE_NAME: string
      CITY_NAME: string
      UNIT_NAME: string
      AMOUNT_PEOPLE: number
      CLIENT_ID: number
      UNIT_ID: number
    }>(sentence, qPars)
}

export function getDmaIdByCode (qPars: { DEVICE_CODE: string }){
  let sentence = `
    SELECT
      DMAS_DEVICES.ID
    FROM
      DMAS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DMAS_DEVICES.DEVICE_ID)

    WHERE DEVICES.DEVICE_CODE = :DEVICE_CODE 
  `
    
    return sqldb.querySingle<{
      ID: number
    }>(sentence, qPars)
}

export function getListToOverview (qPars: { clientIds?: number[], unitIds?: number[], INCLUDE_INSTALLATION_UNIT?: boolean }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DMA_ID,
      WATERS.UNIT_ID,
      CLUNITS.CLIENT_ID,
      CLUNITS.UNIT_NAME,
      CLIENTS.NAME AS CLIENT_NAME
  `
  sentence += `
     FROM
    DMAS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DMAS_DEVICES.DEVICE_ID) 
      LEFT JOIN WATERS ON (DMAS_DEVICES.WATER_ID = WATERS.ID)            
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = WATERS.UNIT_ID)
      LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = CLUNITS.CLIENT_ID)
  `

  const conditions: string[] = []
  if (qPars.clientIds.length > 0) { conditions.push(`CLIENTS.CLIENT_ID IN (:clientIds)`) }
  if (qPars.unitIds.length > 0) { conditions.push(`WATERS.UNIT_ID IN (:unitIds)`) }
  if (qPars.INCLUDE_INSTALLATION_UNIT === false) {
    conditions.push(`CLUNITS.PRODUCTION = 1`)
  }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    DMA_ID: string
    UNIT_ID: number
    CLIENT_ID: number
    UNIT_NAME: string
    CLIENT_NAME: string
  }>(sentence, qPars)
}

