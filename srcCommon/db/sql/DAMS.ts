import * as sqldb from '../connectSql'
import { saveOperationLog, OperationLogData } from '../dbModifLog'
import { dbLogger } from '../../../srcCommon/helpers/logger'

export function getDevExtraInfo (qPars: { DAM_ID: string }) {
  const isDam = qPars.DAM_ID.startsWith('DAM');
  let sentence = '';
  if (isDam) {
    sentence = `SELECT DISTINCT
                  DEVICES.DEVICE_CODE AS DAM_ID,
                  DEVICES.BT_ID AS BT_ID,
                  CURRENT_AUTOMATIONS_PARAMETERS.FU_NOM AS FU_NOM,
                  DEVICES_UNITS.UNIT_ID AS UNIT_ID,
                  DEVICES_CLIENTS.CLIENT_ID AS CLIENT_ID,
                  CLUNITS.UNIT_NAME AS UNIT_NAME,
                  CLUNITS.CITY_ID AS CITY_ID,
                  CLUNITS.LAT AS LAT,
                  CLUNITS.LON AS LON,
                  STATEREGION.NAME AS STATE_ID,
                  CITY.NAME AS CITY_NAME,
                  CLIENTS.NAME AS CLIENT_NAME,
                  DEVFWVERS.CURRFW_MSG AS CURRFW_MSG,
                  DEVFWVERS.CURRFW_VERS AS CURRFW_VERS,
                  CURRENT_AUTOMATIONS_PARAMETERS.DESIRED_PROG AS DERISEDPROG,
                  CURRENT_AUTOMATIONS_PARAMETERS.LAST_PROG AS LASTPROG,
                  CURRENT_AUTOMATIONS_PARAMETERS.FAULTS_DATA AS FAULTSDATA,
                  CURRENT_AUTOMATIONS_PARAMETERS.ENABLE_ECO AS ENABLE_ECO,
                  CURRENT_AUTOMATIONS_PARAMETERS.ENABLE_ECO_LOCAL AS ENABLE_ECO_LOCAL,
                  DAMS_DEVICES.FW_MODE AS FW_MODE,
                  DAMS_DEVICES.PLACEMENT AS PLACEMENT,
                  DAMS_DEVICES.T0_POSITION AS T0_POSITION,
                  DAMS_DEVICES.T1_POSITION AS T1_POSITION,
                  DAMS_DEVICES.INSTALLATION_LOCATION,
                  DAMS_DEVICES.THERSMOSTAT_CFG,
                  DAMS_DEVICES.DISAB,
                  CURRENT_AUTOMATIONS_PARAMETERS.ECO_CFG AS ECO_CFG,
                  CURRENT_AUTOMATIONS_PARAMETERS.SETPOINT AS SETPOINT,
                  CURRENT_AUTOMATIONS_PARAMETERS.LTC AS LTC,
                  CURRENT_AUTOMATIONS_PARAMETERS.LTI AS LTI,
                  CURRENT_AUTOMATIONS_PARAMETERS.UPPER_HYSTERESIS AS UPPER_HYSTERESIS,
                  CURRENT_AUTOMATIONS_PARAMETERS.LOWER_HYSTERESIS AS LOWER_HYSTERESIS,
                  CURRENT_AUTOMATIONS_PARAMETERS.SELF_REFERENCE AS SELF_REFERENCE,
                  CURRENT_AUTOMATIONS_PARAMETERS.MINIMUM_TEMPERATURE AS MINIMUM_TEMPERATURE,
                  CURRENT_AUTOMATIONS_PARAMETERS.MAXIMUM_TEMPERATURE AS MAXIMUM_TEMPERATURE,
                  CURRENT_AUTOMATIONS_PARAMETERS.ECO_INT_TIME AS ECO_INT_TIME,
                  CURRENT_AUTOMATIONS_PARAMETERS.SETPOINT_ECO_REAL_TIME AS SETPOINT_ECO_REAL_TIME,
                  DAMS_DEVICES.CAN_SELF_REFERENCE AS CAN_SELF_REFERENCE,
                  CURRENT_AUTOMATIONS_PARAMETERS.ECO_OFST_START AS ECO_OFST_START,
                  CURRENT_AUTOMATIONS_PARAMETERS.ECO_OFST_END AS ECO_OFST_END,
                  DAMS_AUTOMATIONS.ID AS DEVICE_AUTOMATION_ID
                  `
    sentence += `
                FROM
                  DAMS_DEVICES
                  LEFT JOIN DAMS_AUTOMATIONS ON (DAMS_AUTOMATIONS.DAM_DEVICE_ID = DAMS_DEVICES.ID)
                  LEFT JOIN DAMS_ILLUMINATIONS ON (DAMS_ILLUMINATIONS.DAM_DEVICE_ID = DAMS_DEVICES.ID)
                  INNER JOIN DEVICES ON (DAMS_DEVICES.DEVICE_ID = DEVICES.ID)
                  LEFT JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID = DAMS_AUTOMATIONS.MACHINE_ID)
                  LEFT JOIN ILLUMINATIONS_CURRENT_AUTOMATIONS_PARAMETERS ON (ILLUMINATIONS_CURRENT_AUTOMATIONS_PARAMETERS.ILLUMINATION_ID = DAMS_ILLUMINATIONS.ILLUMINATION_ID)
                  LEFT JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (
                    CURRENT_AUTOMATIONS_PARAMETERS.ID = COALESCE(MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID, ILLUMINATIONS_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)
                  )  
                  LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
                  LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
                  LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
                  LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
                  LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
                  LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
                  LEFT JOIN DEVFWVERS ON (DEVFWVERS.DEV_ID = DEVICES.DEVICE_CODE)
                `;
  }
  else {
    sentence = `SELECT DISTINCT
                  DEVICES.DEVICE_CODE AS DAM_ID,
                  DEVICES.BT_ID AS BT_ID,
                  CURRENT_AUTOMATIONS_PARAMETERS.FU_NOM AS FU_NOM,
                  DEVICES_UNITS.UNIT_ID AS UNIT_ID,
                  DEVICES_CLIENTS.CLIENT_ID AS CLIENT_ID,
                  CLUNITS.UNIT_NAME AS UNIT_NAME,
                  CLUNITS.CITY_ID AS CITY_ID,
                  CLUNITS.LAT AS LAT,
                  CLUNITS.LON AS LON,
                  STATEREGION.NAME AS STATE_ID,
                  CITY.NAME AS CITY_NAME,
                  CLIENTS.NAME AS CLIENT_NAME,
                  DEVFWVERS.CURRFW_MSG AS CURRFW_MSG,
                  DEVFWVERS.CURRFW_VERS AS CURRFW_VERS,
                  CURRENT_AUTOMATIONS_PARAMETERS.DESIRED_PROG AS DERISEDPROG,
                  CURRENT_AUTOMATIONS_PARAMETERS.LAST_PROG AS LASTPROG,
                  CURRENT_AUTOMATIONS_PARAMETERS.FAULTS_DATA AS FAULTSDATA,
                  CURRENT_AUTOMATIONS_PARAMETERS.ENABLE_ECO AS ENABLE_ECO,
                  CURRENT_AUTOMATIONS_PARAMETERS.ENABLE_ECO_LOCAL AS ENABLE_ECO_LOCAL,
                  DACS_AUTOMATIONS.FW_MODE AS FW_MODE,
                  NULL AS PLACEMENT,
                  NULL AS T0_POSITION,
                  NULL AS T1_POSITION,
                  NULL AS INSTALLATION_LOCATION,
                  NULL AS THERSMOSTAT_CFG,
                  NULL AS DISAB,
                  CURRENT_AUTOMATIONS_PARAMETERS.ECO_CFG AS ECO_CFG,
                  CURRENT_AUTOMATIONS_PARAMETERS.SETPOINT AS SETPOINT,
                  CURRENT_AUTOMATIONS_PARAMETERS.LTC AS LTC,
                  CURRENT_AUTOMATIONS_PARAMETERS.LTI AS LTI,
                  CURRENT_AUTOMATIONS_PARAMETERS.UPPER_HYSTERESIS AS UPPER_HYSTERESIS,
                  CURRENT_AUTOMATIONS_PARAMETERS.LOWER_HYSTERESIS AS LOWER_HYSTERESIS,
                  CURRENT_AUTOMATIONS_PARAMETERS.SELF_REFERENCE AS SELF_REFERENCE,
                  CURRENT_AUTOMATIONS_PARAMETERS.MINIMUM_TEMPERATURE AS MINIMUM_TEMPERATURE,
                  CURRENT_AUTOMATIONS_PARAMETERS.MAXIMUM_TEMPERATURE AS MAXIMUM_TEMPERATURE,
                  CURRENT_AUTOMATIONS_PARAMETERS.ECO_INT_TIME AS ECO_INT_TIME,
                  CURRENT_AUTOMATIONS_PARAMETERS.SETPOINT_ECO_REAL_TIME AS SETPOINT_ECO_REAL_TIME,
                  0 AS CAN_SELF_REFERENCE,
                  CURRENT_AUTOMATIONS_PARAMETERS.ECO_OFST_START AS ECO_OFST_START,
                  CURRENT_AUTOMATIONS_PARAMETERS.ECO_OFST_END AS ECO_OFST_END,
                  DACS_AUTOMATIONS.ID AS DEVICE_AUTOMATION_ID`
      sentence += `
                FROM
                  DACS_AUTOMATIONS 
                  INNER JOIN DACS_DEVICES ON (DACS_AUTOMATIONS.DAC_DEVICE_ID = DACS_DEVICES.ID)
                  INNER JOIN DEVICES ON (DACS_DEVICES.DEVICE_ID = DEVICES.ID)
                  LEFT JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID = DACS_AUTOMATIONS.MACHINE_ID)
                  LEFT JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (
                    CURRENT_AUTOMATIONS_PARAMETERS.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID
                  )  
                  LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
                  LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
                  LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
                  LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
                  LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
                  LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
                  LEFT JOIN DEVFWVERS ON (DEVFWVERS.DEV_ID = DEVICES.DEVICE_CODE)
                `
  }

  sentence += ` WHERE DEVICES.DEVICE_CODE = :DAM_ID `

  return sqldb.querySingle<{
    DAM_ID: string
    BT_ID: string
    FU_NOM: number
    UNIT_ID: number
    CLIENT_ID: number
    UNIT_NAME: string
    CITY_ID: string
    LAT: string
    LON: string
    STATE_ID: string
    CITY_NAME: string
    CLIENT_NAME: string
    CURRFW_MSG: string
    CURRFW_VERS: string
    DESIREDPROG: string
    LASTPROG: string
    FAULTSDATA: string
    ENABLE_ECO: number
    ENABLE_ECO_LOCAL: number
    FW_MODE: string
    ECO_CFG: string
    SETPOINT: number
    LTC: number
    LTI: number
    UPPER_HYSTERESIS: number
    LOWER_HYSTERESIS: number
    SELF_REFERENCE: number
    MINIMUM_TEMPERATURE: number
    MAXIMUM_TEMPERATURE: number
    ECO_INT_TIME: number
    SETPOINT_ECO_REAL_TIME: number
    CAN_SELF_REFERENCE: number
    ECO_OFST_START: number
    ECO_OFST_END: number
    PLACEMENT: 'RETURN'|'DUO'
    T0_POSITION: 'RETURN'|'INSUFFLATION'
    T1_POSITION: 'RETURN'|'INSUFFLATION'
    INSTALLATION_LOCATION: string
    THERSMOSTAT_CFG: string
    DISAB: number
    DEVICE_AUTOMATION_ID: number
  }>(sentence, qPars)
}

export function getDamsList (qPars: {
  clientIds?: number[],
  stateIds?: string[],
  cityIds?: string[],
  unitIds?: number[],
  SKIP?: number,
  LIMIT?: number,
  INCLUDE_INSTALLATION_UNIT?: boolean
  removeIlluminations?: boolean
}, admPars: {
  includeDacs?: boolean,
  includeFaultsData?: boolean
}) {
  let sentence = `
    WITH CTE_DAMS_DACS AS (
      SELECT
        DAMS_DEVICES.DEVICE_ID AS DEVICE_ID,
        DAMS_DEVICES.DISAB AS DISAB,
        DAMS_AUTOMATIONS.MACHINE_ID AS MACHINE_ID,
        DAMS_ILLUMINATIONS.ILLUMINATION_ID AS ILLUMINATION_ID,
        DAMS_DEVICES.CAN_SELF_REFERENCE AS CAN_SELF_REFERENCE
      FROM
        DAMS_DEVICES
        LEFT JOIN DAMS_AUTOMATIONS ON (DAMS_AUTOMATIONS.DAM_DEVICE_ID = DAMS_DEVICES.ID)
        LEFT JOIN DAMS_ILLUMINATIONS ON (DAMS_ILLUMINATIONS.DAM_DEVICE_ID = DAMS_DEVICES.ID)
      UNION
      SELECT
        DACS_DEVICES.DEVICE_ID AS DEVICE_ID,
        DACS_AUTOMATIONS.DISAB AS DISAB,
        DACS_AUTOMATIONS.MACHINE_ID AS MACHINE_ID,
        0 AS ILLUMINATION_ID,
        0 AS CAN_SELF_REFERENCE
      FROM
        DACS_AUTOMATIONS 
        INNER JOIN DACS_DEVICES ON (DACS_AUTOMATIONS.DAC_DEVICE_ID = DACS_DEVICES.ID)
    )
    SELECT DISTINCT
      DEVICES.DEVICE_CODE AS DAM_ID,
      DEVICES.BT_ID AS bt_id,
      DEVICES_UNITS.UNIT_ID,
      CTE_DAMS_DACS.DISAB,
      CURRENT_AUTOMATIONS_PARAMETERS.ENABLE_ECO, 
      CTE_DAMS_DACS.CAN_SELF_REFERENCE,
      CURRENT_AUTOMATIONS_PARAMETERS.SELF_REFERENCE AS DAM_SELF_REFERENCE,
      CURRENT_AUTOMATIONS_PARAMETERS.MINIMUM_TEMPERATURE,
      CURRENT_AUTOMATIONS_PARAMETERS.MAXIMUM_TEMPERATURE,
      CURRENT_AUTOMATIONS_PARAMETERS.LAST_PROG,
      CLUNITS.UNIT_NAME,
      CLUNITS.CITY_ID,
      CLUNITS.LAT,
      CLUNITS.LON,
      CITY.NAME AS CITY_NAME,
      STATEREGION.NAME AS STATE_ID,
      STATEREGION.FULL_NAME AS STATE_NAME,
      COUNTRY.NAME AS COUNTRY_NAME,
      DEVICES_CLIENTS.CLIENT_ID,
      (CASE WHEN DACS_DEVICES.ID IS NOT NULL THEN DEVICES.DEVICE_CODE ELSE NULL END) AS AS_DAC,
      CLIENTS.NAME AS CLIENT_NAME
  `
  if (admPars.includeFaultsData) { sentence += ' ,CURRENT_AUTOMATIONS_PARAMETERS.FAULTS_DATA AS FAULTSDATA ' }
  sentence += `
    FROM
      CTE_DAMS_DACS
      INNER JOIN DEVICES ON (CTE_DAMS_DACS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
      LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
      LEFT JOIN COUNTRY ON (COUNTRY.ID = STATEREGION.COUNTRY_ID)
      LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
      LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.DEVICE_ID = CTE_DAMS_DACS.DEVICE_ID)
      LEFT JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID = CTE_DAMS_DACS.MACHINE_ID)
      LEFT JOIN ILLUMINATIONS_CURRENT_AUTOMATIONS_PARAMETERS ON (ILLUMINATIONS_CURRENT_AUTOMATIONS_PARAMETERS.ILLUMINATION_ID = CTE_DAMS_DACS.ILLUMINATION_ID)
      LEFT JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (
        CURRENT_AUTOMATIONS_PARAMETERS.ID = COALESCE(MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID, ILLUMINATIONS_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)
      )
    `

  const conditions: string[] = []
  if (admPars.includeDacs) { conditions.push(`(CTE_DAMS_DACS.DISAB IS NULL OR CTE_DAMS_DACS.DISAB = 0)`) }
  if (!admPars.includeDacs) { conditions.push(`CTE_DAMS_DACS.DISAB IS NULL`) }
  if (qPars.removeIlluminations) { conditions.push(`CTE_DAMS_DACS.ILLUMINATION_ID IS NULL`) }
  if (qPars.clientIds?.length) { conditions.push(`DEVICES_CLIENTS.CLIENT_ID IN (:clientIds)`) }
  if (qPars.stateIds?.length) { conditions.push(`STATEREGION.ID IN (:stateIds)`) }
  if (qPars.cityIds?.length) { conditions.push(`CLUNITS.CITY_ID IN (:cityIds)`) }
  if (qPars.unitIds?.length) { conditions.push(`DEVICES_UNITS.UNIT_ID IN (:unitIds)`) }
  if (qPars.INCLUDE_INSTALLATION_UNIT === false) { conditions.push(`CLUNITS.PRODUCTION = 1`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  sentence += ` ORDER BY DEVICES.DEVICE_CODE ASC `
  if (qPars.SKIP != null && qPars.LIMIT != null) { sentence += ` LIMIT :SKIP,:LIMIT ` }

  return sqldb.query<{
    DAM_ID: string
    bt_id: string
    UNIT_ID: number
    DISAB: number
    ENABLE_ECO: 0|1
    CAN_SELF_REFERENCE: 0|1
    DAM_SELF_REFERENCE: 0|1
    MINIMUM_TEMPERATURE: number
    MAXIMUM_TEMPERATURE: number
    UNIT_NAME: string
    CITY_ID: string
    LAT: string
    LON: string
    CITY_NAME: string
    STATE_ID: string
    STATE_NAME: string
    COUNTRY_NAME: string
    CLIENT_ID: number
    AS_DAC: string
    CLIENT_NAME: string
    FAULTSDATA?: string,
    LAST_PROG?: string,
  }>(sentence, qPars)
}

export function getListDacWithGroup (qPars: { clientId: number, unitId?: number }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DAM_ID,
      DACS_AUTOMATIONS.DISAB,
      DEVICES_CLIENTS.CLIENT_ID,
      DEVICES_UNITS.UNIT_ID,
      DACS_AUTOMATIONS.MACHINE_ID AS GROUP_ID
  `
  sentence += `
    FROM
      DACS_AUTOMATIONS
      INNER JOIN DACS_DEVICES ON (DACS_AUTOMATIONS.DAC_DEVICE_ID = DACS_DEVICES.ID)
      INNER JOIN DEVICES ON (DACS_DEVICES.DEVICE_ID = DEVICES.ID)
      INNER JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      INNER JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
  `

  const conditions: string[] = []
  if (qPars.clientId) { conditions.push(`DEVICES_CLIENTS.CLIENT_ID  = :clientId `) }
  if (qPars.unitId) { conditions.push(`DEVICES_UNITS.UNIT_ID  = :unitId `) }

  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    DAM_ID: string
    DISAB: number
    CLIENT_ID: number
    UNIT_ID: number
    GROUP_ID: number
  }>(sentence, qPars)
}

export function getListWithProgFU (qPars: { clientIds?: number[], damIds?: string[] }, admPars: { includeDacs?: boolean }) {
  let sentence = `
    WITH CTE_DAMS_DACS AS (
      SELECT
        DAMS_DEVICES.DEVICE_ID AS DEVICE_ID,
        DAMS_DEVICES.DISAB AS DISAB,
        DAMS_AUTOMATIONS.MACHINE_ID AS MACHINE_ID,
        DAMS_ILLUMINATIONS.ILLUMINATION_ID AS ILLUMINATION_ID
      FROM
        DAMS_DEVICES
        LEFT JOIN DAMS_AUTOMATIONS ON (DAMS_AUTOMATIONS.DAM_DEVICE_ID = DAMS_DEVICES.ID)
        LEFT JOIN DAMS_ILLUMINATIONS ON (DAMS_ILLUMINATIONS.DAM_DEVICE_ID = DAMS_DEVICES.ID)
      UNION
      SELECT
        DACS_DEVICES.DEVICE_ID AS DEVICE_ID,
        DACS_AUTOMATIONS.DISAB AS DISAB,
        DACS_AUTOMATIONS.MACHINE_ID AS MACHINE_ID,
        0 AS ILLUMINATION_ID
      FROM
        DACS_AUTOMATIONS
        INNER JOIN DACS_DEVICES ON (DACS_AUTOMATIONS.DAC_DEVICE_ID = DACS_DEVICES.ID)
    )
    SELECT DISTINCT
      DEVICES.DEVICE_CODE AS DAM_ID,
      CTE_DAMS_DACS.DISAB,
      DEVICES_UNITS.UNIT_ID,
      DEVICES_CLIENTS.CLIENT_ID,
      CURRENT_AUTOMATIONS_PARAMETERS.DESIRED_PROG AS DESIREDPROG,
      CURRENT_AUTOMATIONS_PARAMETERS.LAST_PROG AS LASTPROG,
      CURRENT_AUTOMATIONS_PARAMETERS.FU_NOM
  `
  sentence += `
    FROM
      CTE_DAMS_DACS
      INNER JOIN DEVICES ON (CTE_DAMS_DACS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID = CTE_DAMS_DACS.MACHINE_ID)
      LEFT JOIN ILLUMINATIONS_CURRENT_AUTOMATIONS_PARAMETERS ON (ILLUMINATIONS_CURRENT_AUTOMATIONS_PARAMETERS.ILLUMINATION_ID = CTE_DAMS_DACS.ILLUMINATION_ID)
      LEFT JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (
        CURRENT_AUTOMATIONS_PARAMETERS.ID = COALESCE(MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID, ILLUMINATIONS_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)
      )
    `

  const conditions: string[] = []
  if (admPars.includeDacs) { conditions.push(`(CTE_DAMS_DACS.DISAB IS NULL OR CTE_DAMS_DACS.DISAB = 0)`) }
  if (!admPars.includeDacs) { conditions.push(`CTE_DAMS_DACS.DISAB IS NULL`) }
  if (qPars.clientIds?.length) { conditions.push(`DEVICES_CLIENTS.CLIENT_ID IN (:clientIds)`) }
  if (qPars.damIds?.length) { conditions.push(`DEVICES.DEVICE_CODE IN (:damIds)`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  sentence += ` ORDER BY DEVICES.DEVICE_CODE ASC `

  return sqldb.query<{
    DAM_ID: string
    DISAB: number
    UNIT_ID: number
    CLIENT_ID: number
    DESIREDPROG: string
    LASTPROG: string
    FU_NOM: number
  }>(sentence, qPars)
}

export function getListBasic2 (qPars: { clientIds?: number[], unitIds?: number[] }, admPars: { includeDacs?: boolean }) {
  let sentence = `
    WITH CTE_DAMS_DACS AS (
      SELECT
        DAMS_DEVICES.DEVICE_ID AS DEVICE_ID,
        DAMS_DEVICES.DISAB AS DISAB
      FROM
        DAMS_DEVICES
      UNION
      SELECT
        DACS_DEVICES.DEVICE_ID AS DEVICE_ID,
        DACS_AUTOMATIONS.DISAB AS DISAB
      FROM
        DACS_AUTOMATIONS 
        INNER JOIN DACS_DEVICES ON (DACS_AUTOMATIONS.DAC_DEVICE_ID = DACS_DEVICES.ID)
    )
    SELECT
      DEVICES.DEVICE_CODE AS DAM_ID,
      DEVICES_UNITS.UNIT_ID
  `
  sentence += `
    FROM
      CTE_DAMS_DACS
      INNER JOIN DEVICES ON (DEVICES.ID = CTE_DAMS_DACS.DEVICE_ID)
      INNER JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_IDE = DEVICES.ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DACS_DEVICES ON (CTE_DAMS_DACS.DEVICE_ID = DACS_DEVICES.DEVICE_ID)
  `

  const conditions: string[] = []
  if (admPars.includeDacs) { conditions.push(`(DACS_DEVICES.DAC_ID IS NULL OR (DACS_DEVICES.DAC_ID IS NOT NULL AND CTE_DAMS_DACS.DISAB = 0))`) }
  if (!admPars.includeDacs) { conditions.push(`DACS_DEVICES.ID IS NULL`) }
  if (qPars.clientIds?.length) { conditions.push(`DEVICES_CLIENTS.CLIENT_ID IN (:clientIds)`) }
  if (qPars.unitIds?.length) { conditions.push(`DEVICES_UNITS.UNIT_ID IN (:unitIds)`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    DAM_ID: string
    UNIT_ID: number
  }>(sentence, qPars)
}

export function getDamBasicInfo (qPars: { devId: string }) {
  const isDam = qPars.devId.startsWith('DAM');
  let sentence = '';
  if (isDam) {
    sentence = `
        SELECT DISTINCT
          DEVICES.DEVICE_CODE AS DEV_ID,
          DEVICES.ID AS DEVICE_ID,
          DEVICES_CLIENTS.CLIENT_ID AS CLIENT_ID,
          DEVICES_UNITS.UNIT_ID AS UNIT_ID,
          DAMS_DEVICES.DISAB AS DISAB,
          CURRENT_AUTOMATIONS_PARAMETERS.ENABLE_ECO AS ENABLE_ECO,
          CURRENT_AUTOMATIONS_PARAMETERS.ECO_CFG AS ECO_CFG,
          CURRENT_AUTOMATIONS_PARAMETERS.DAT_BEGAUT AS DAT_BEGAUT,
          DEVFWVERS.CURRFW_VERS AS FWVERS
        FROM
          DAMS_DEVICES
          INNER JOIN DEVICES ON (DAMS_DEVICES.DEVICE_ID = DEVICES.ID)
          LEFT JOIN DAMS_AUTOMATIONS ON (DAMS_AUTOMATIONS.DAM_DEVICE_ID = DAMS_DEVICES.ID)
          LEFT JOIN DAMS_ILLUMINATIONS ON (DAMS_ILLUMINATIONS.DAM_DEVICE_ID = DAMS_ILLUMINATIONS.ID)
          LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
          LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
          LEFT JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID = DAMS_AUTOMATIONS.MACHINE_ID)
          LEFT JOIN ILLUMINATIONS_CURRENT_AUTOMATIONS_PARAMETERS ON (ILLUMINATIONS_CURRENT_AUTOMATIONS_PARAMETERS.ILLUMINATION_ID = DAMS_ILLUMINATIONS.ILLUMINATION_ID)
          LEFT JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (
            CURRENT_AUTOMATIONS_PARAMETERS.ID = COALESCE(MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID, ILLUMINATIONS_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)
          )
          LEFT JOIN DEVFWVERS ON (DEVFWVERS.DEV_ID = DEVICES.DEVICE_CODE)
        `;
  }
  else {
    sentence = `
      SELECT DISTINCT
        DEVICES.DEVICE_CODE AS DEV_ID,
        DEVICES.ID AS DEVICE_ID,
        DEVICES_CLIENTS.CLIENT_ID AS CLIENT_ID,
        DEVICES_UNITS.UNIT_ID AS UNIT_ID,
        DACS_AUTOMATIONS.DISAB AS DISAB,
        CURRENT_AUTOMATIONS_PARAMETERS.ENABLE_ECO AS ENABLE_ECO,
        CURRENT_AUTOMATIONS_PARAMETERS.ECO_CFG AS ECO_CFG,
        CURRENT_AUTOMATIONS_PARAMETERS.DAT_BEGAUT AS DAT_BEGAUT,
        DEVFWVERS.CURRFW_VERS AS FWVERS
      FROM
        DACS_DEVICES
        INNER JOIN DEVICES ON (DACS_DEVICES.DEVICE_ID = DEVICES.ID)
        LEFT JOIN DACS_AUTOMATIONS ON (DACS_AUTOMATIONS.DAC_DEVICE_ID = DACS_DEVICES.ID)
        LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
        LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
        LEFT JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID = DACS_AUTOMATIONS.MACHINE_ID)
        LEFT JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (
          CURRENT_AUTOMATIONS_PARAMETERS.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID
        )
        LEFT JOIN DEVFWVERS ON (DEVFWVERS.DEV_ID = DEVICES.DEVICE_CODE)`;
  }

  sentence += ` WHERE DEVICES.DEVICE_CODE = :devId `

  return sqldb.querySingle<{
    DEV_ID: string
    DEVICE_ID: number
    CLIENT_ID: number
    UNIT_ID: number
    DISAB: number
    ENABLE_ECO: number
    ECO_CFG: string
    DAT_BEGAUT: string
    FWVERS: string
  }>(sentence, qPars)
}

export function getDamsBasicInfo (qPars: { DAM_ID?: string, UNIT_ID?: number, clientIds?: number[] }) {
  let sentence = `
    WITH CTE_DAMS_DACS AS (
      SELECT
        DAMS_DEVICES.DEVICE_ID AS DEVICE_ID
      FROM
        DAMS_DEVICES
      UNION
      SELECT
        DACS_DEVICES.DEVICE_ID AS DEVICE_ID
      FROM
        DACS_AUTOMATIONS 
        INNER JOIN DACS_DEVICES ON (DACS_DEVICES.ID = DACS_AUTOMATIONS.DAC_DEVICE_ID)
    )
    SELECT
      DEVICES.DEVICE_CODE AS DAM_ID,
      DEVICES_UNITS.UNIT_ID,
      DEVICES_CLIENTS.CLIENT_ID
  `
  sentence += `
    FROM
      CTE_DAMS_DACS
      INNER JOIN DEVICES ON (CTE_DAMS_DACS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
  `

  const conditions: string[] = []
  if (qPars.DAM_ID) { conditions.push(`DEVICES.DEVICE_CODE = :DAM_ID`) }
  if (qPars.UNIT_ID) { conditions.push(`DEVICES_UNITS.UNIT_ID = :UNIT_ID`) }
  if (qPars.clientIds?.length) { conditions.push(`DEVICES_CLIENTS.CLIENT_ID IN (:clientIds)`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    DAM_ID: string
    UNIT_ID: number
    CLIENT_ID: number
  }>(sentence, qPars)
}

export function getListBasic (qPars: { CAN_SELF_REFERENCE?: number, FIRST_COMMANDS_ECO_SENT_LOWER_THAN?: number }) {
  let sentence = `
   WITH CTE_DAMS_DACS AS (
      SELECT
        DAMS_DEVICES.DEVICE_ID AS DEVICE_ID,
        DAMS_DEVICES.DISAB AS DISAB,
        DAMS_AUTOMATIONS.MACHINE_ID AS MACHINE_ID,
        DAMS_ILLUMINATIONS.ILLUMINATION_ID AS ILLUMINATION_ID,
        DAMS_DEVICES.CAN_SELF_REFERENCE AS CAN_SELF_REFERENCE,
        DAMS_DEVICES.FW_MODE,
        DAMS_DEVICES.FIRST_COMMANDS_ECO_SENT,
        DAMS_DEVICES.PLACEMENT AS PLACEMENT,
        DAMS_AUTOMATIONS.READ_DUT_TEMPERATURE_FROM_BROKER
      FROM
        DAMS_DEVICES
        LEFT JOIN DAMS_AUTOMATIONS ON (DAMS_AUTOMATIONS.DAM_DEVICE_ID = DAMS_DEVICES.ID)
        LEFT JOIN DAMS_ILLUMINATIONS ON (DAMS_ILLUMINATIONS.DAM_DEVICE_ID = DAMS_DEVICES.ID)
      UNION
      SELECT
        DACS_DEVICES.DEVICE_ID AS DEVICE_ID,
        DACS_AUTOMATIONS.DISAB AS DISAB,
        DACS_AUTOMATIONS.MACHINE_ID AS MACHINE_ID,
        0 AS ILLUMINATION_ID,
        0 AS CAN_SELF_REFERENCE,
        DACS_AUTOMATIONS.FW_MODE,
        0 AS FIRST_COMMANDS_ECO_SENT,
        '' AS PLACEMENT,
        0 AS READ_DUT_TEMPERATURE_FROM_BROKER
      FROM
        DACS_AUTOMATIONS 
        INNER JOIN DACS_DEVICES ON (DACS_AUTOMATIONS.DAC_DEVICE_ID = DACS_DEVICES.ID)
    )
    SELECT DISTINCT
      DEVICES.DEVICE_CODE AS DAM_ID,
      DEVICES_CLIENTS.CLIENT_ID,
      DEVICES_UNITS.UNIT_ID,
      CLUNITS.TIMEZONE_ID,
      CURRENT_AUTOMATIONS_PARAMETERS.ENABLE_ECO,
      CURRENT_AUTOMATIONS_PARAMETERS.ENABLE_ECO_LOCAL,
      CURRENT_AUTOMATIONS_PARAMETERS.ECO_CFG,
      CURRENT_AUTOMATIONS_PARAMETERS.ECO_OFST_START,
      CURRENT_AUTOMATIONS_PARAMETERS.ECO_OFST_END,
      CURRENT_AUTOMATIONS_PARAMETERS.ECO_INT_TIME,
      CURRENT_AUTOMATIONS_PARAMETERS.SCHEDULE_START_BEHAVIOR,
      CURRENT_AUTOMATIONS_PARAMETERS.SETPOINT,
      CURRENT_AUTOMATIONS_PARAMETERS.LTC,
      CURRENT_AUTOMATIONS_PARAMETERS.LTI,
      CURRENT_AUTOMATIONS_PARAMETERS.UPPER_HYSTERESIS,
      CURRENT_AUTOMATIONS_PARAMETERS.LOWER_HYSTERESIS,
      CURRENT_AUTOMATIONS_PARAMETERS.SELF_REFERENCE,
      CURRENT_AUTOMATIONS_PARAMETERS.MINIMUM_TEMPERATURE,
      CURRENT_AUTOMATIONS_PARAMETERS.MAXIMUM_TEMPERATURE,
      CURRENT_AUTOMATIONS_PARAMETERS.SETPOINT_ECO_REAL_TIME,
      CTE_DAMS_DACS.CAN_SELF_REFERENCE,
      CTE_DAMS_DACS.FIRST_COMMANDS_ECO_SENT,
      CTE_DAMS_DACS.PLACEMENT AS PLACEMENT,
      CTE_DAMS_DACS.READ_DUT_TEMPERATURE_FROM_BROKER AS READ_DUT_TEMPERATURE_FROM_BROKER
  `
  sentence += `
    FROM
      CTE_DAMS_DACS
      INNER JOIN DEVICES ON (CTE_DAMS_DACS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID = CTE_DAMS_DACS.MACHINE_ID)
      LEFT JOIN ILLUMINATIONS_CURRENT_AUTOMATIONS_PARAMETERS ON (ILLUMINATIONS_CURRENT_AUTOMATIONS_PARAMETERS.ILLUMINATION_ID = CTE_DAMS_DACS.ILLUMINATION_ID)
      LEFT JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (
        CURRENT_AUTOMATIONS_PARAMETERS.ID = COALESCE(MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID, ILLUMINATIONS_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)
      )
      LEFT JOIN DEVFWVERS ON (DEVFWVERS.DEV_ID = DEVICES.DEVICE_CODE)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
  `
  const conditions: string[] = []
  if (qPars.CAN_SELF_REFERENCE != null) { conditions.push(`CTE_DAMS_DACS.CAN_SELF_REFERENCE = :CAN_SELF_REFERENCE`) }
  if (qPars.FIRST_COMMANDS_ECO_SENT_LOWER_THAN != null) { conditions.push(`CTE_DAMS_DACS.FIRST_COMMANDS_ECO_SENT < :FIRST_COMMANDS_ECO_SENT_LOWER_THAN`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    DAM_ID: string
    CLIENT_ID: number
    UNIT_ID: number
    TIMEZONE_ID: number
    ENABLE_ECO: number
    ENABLE_ECO_LOCAL: number
    ECO_CFG: string
    ECO_OFST_START: number
    ECO_OFST_END: number
    ECO_INT_TIME: number
    SCHEDULE_START_BEHAVIOR: string
    SETPOINT: number
    LTC: number
    LTI: number
    UPPER_HYSTERESIS: number
    LOWER_HYSTERESIS: number
    SELF_REFERENCE: number
    MINIMUM_TEMPERATURE: number
    MAXIMUM_TEMPERATURE: number
    SETPOINT_ECO_REAL_TIME: number
    CAN_SELF_REFERENCE: number
    FIRST_COMMANDS_ECO_SENT: number
    PLACEMENT: string
    READ_DUT_TEMPERATURE_FROM_BROKER: number
  }>(sentence, qPars)
}

export function getListInfoExport () {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DAM_ID,
      DEVICES_CLIENTS.CLIENT_ID,
      DEVICES_UNITS.UNIT_ID,
      CLUNITS.UNIT_NAME,
      CLIENTS.NAME AS CLIENT_NAME,
      STATEREGION.NAME AS STATE_ID,
      CITY.NAME AS CITY_NAME
  `
  sentence += `
    FROM
      DAMS_DEVICES
      INNER JOIN DEVICES ON (DAMS_DEVICES.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
      LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
      LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
      LEFT JOIN COUNTRY ON (COUNTRY.ID = STATEREGION.COUNTRY_ID)
      LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
  `

  return sqldb.query<{
    DAM_ID: string
    CLIENT_ID: number
    UNIT_ID: number
    UNIT_NAME: string
    CLIENT_NAME: string
    STATE_ID: string
    CITY_NAME: string
  }>(sentence)
}

export function getDamInfosFR(qpars: {
  LAST_CFG_MODIF?: string,
}) {
  let sentence = `
    SELECT
        DEV_ID,
        GROUP_ID,
        DAM_DEVICE_CODE
    FROM (
        SELECT
            DAC.DEV_ID,
            DAC.GROUP_ID,
            (SELECT DEVICE_CODE FROM DEVICES WHERE DEVICES.ID = DAMS_DEVICES.DEVICE_ID) AS DAM_DEVICE_CODE
        FROM (
            SELECT
                DEVICES.DEVICE_CODE AS DEV_ID,
                ASSETS.ID AS ASSET_ID,
                MACHINES.ID AS GROUP_ID
            FROM
                DEVICES
            LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
            LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
            LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
            LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
            LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.DEVICE_ID = DEVICES.ID)
            LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
            LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.DAC_DEVICE_ID = DACS_DEVICES.ID)
            LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DACS_CONDENSERS.CONDENSER_ID)
            LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DACS_EVAPORATORS.EVAPORATOR_ID)
            LEFT JOIN ASSETS ON (ASSETS.ID = COALESCE(CONDENSERS.ASSET_ID, EVAPORATORS.ASSET_ID))
            LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID = DACS_DEVICES.ID)
            LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
            LEFT JOIN MACHINES ON MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID)
            WHERE ASSETS.ID IS NOT NULL
            GROUP BY DEVICES.DEVICE_CODE
        ) AS DAC
        LEFT JOIN DAMS_AUTOMATIONS ON (DAMS_AUTOMATIONS.MACHINE_ID = DAC.GROUP_ID)
        LEFT JOIN DAMS_DEVICES ON (DAMS_DEVICES.ID = DAMS_AUTOMATIONS.DAM_DEVICE_ID)
    ) AS subquery
    WHERE DAM_DEVICE_CODE IS NOT NULL;
  `;

  return sqldb.query<{
    DEV_ID: string,
    GROUP_ID: number,
    DAM_DEVICE_CODE: string
  }>(sentence, qpars);
}

export function getDamsByUnit(qPars: { UNIT_ID: number }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE
    FROM
      DAMS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DAMS_DEVICES.DEVICE_ID)
      INNER JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
    WHERE DEVICES_UNITS.UNIT_ID = :UNIT_ID
  `

  return sqldb.query<{
    DEVICE_CODE: string
  }>(sentence, qPars);
}