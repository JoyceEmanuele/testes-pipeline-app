import * as sqldb from '../connectSql'
import { OperationLogData, saveOperationLog } from '../dbModifLog'
import { dbLogger } from '../../helpers/logger'
// @IFHELPER:CONFIG DISABLE_MODIF_LOG

/* @IFHELPER:FUNC insert = INSERT
  FROM WATERS_MONTH_HISTORY_USAGE
  FIELD WATERS_MONTH_HISTORY_USAGE.WATER_ID
  FIELD WATERS_MONTH_HISTORY_USAGE.HISTORY_MONTH
  FIELD WATERS_MONTH_HISTORY_USAGE.HISTORY_YEAR
  FIELD WATERS_MONTH_HISTORY_USAGE.MONTH_USAGE
  FIELD WATERS_MONTH_HISTORY_USAGE.ESTIMATED_USAGE
  FIELD WATERS_MONTH_HISTORY_USAGE.RECORD_DATE
  FIELD WATERS_MONTH_HISTORY_USAGE.LAST_USAGE
*/
export function w_insert (qPars: { WATER_ID: number, HISTORY_MONTH: number, HISTORY_YEAR: number, MONTH_USAGE: number, ESTIMATED_USAGE: boolean, RECORD_DATE: string, LAST_USAGE: number}) {
  const fields: string[] = []
  fields.push('WATER_ID')
  fields.push('HISTORY_MONTH')
  fields.push('HISTORY_YEAR')
  fields.push('MONTH_USAGE')
  fields.push('ESTIMATED_USAGE')
  fields.push('RECORD_DATE')
  fields.push('LAST_USAGE')

  let sentence = `INSERT INTO WATERS_MONTH_HISTORY_USAGE (${fields.join(', ')}) VALUES (:${fields.join(', :')})`

  return sqldb.execute(sentence, qPars)
}


/* @IFHELPER:FUNC updateInfo = UPDATE
  FROM WATERS_MONTH_HISTORY_USAGE
  PARAM WATER_ID: {WATERS_MONTH_HISTORY_USAGE.WATER_ID}
  PARAM HISTORY_MONTH: {WATERS_MONTH_HISTORY_USAGE.HISTORY_MONTH}
  PARAM HISTORY_YEAR: {WATERS_MONTH_HISTORY_USAGE.HISTORY_YEAR}
  PARAM MONTH_USAGE: {WATERS_MONTH_HISTORY_USAGE.MONTH_USAGE}
  PARAM ESTIMATED_USAGE: {WATERS_MONTH_HISTORY_USAGE.ESTIMATED_USAGE}
  PARAM ESTIMATED_USAGE: {WATERS_MONTH_HISTORY_USAGE.ESTIMATED_USAGE}
  FIELD WATERS_MONTH_HISTORY_USAGE.WATER_ID
  FIELD WATERS_MONTH_HISTORY_USAGE.HISTORY_MONTH
  FIELD WATERS_MONTH_HISTORY_USAGE.HISTORY_YEAR
  FIELD WATERS_MONTH_HISTORY_USAGE.MONTH_USAGE
  FIELD WATERS_MONTH_HISTORY_USAGE.ESTIMATED_USAGE
  FIELD WATERS_MONTH_HISTORY_USAGE.LAST_USAGE
*/
export function w_updateInfo (qPars: { WATER_ID: number, HISTORY_MONTH: number, HISTORY_YEAR: number, MONTH_USAGE: number, ESTIMATED_USAGE: boolean, RECORD_DATE: string, LAST_USAGE: number}) {
  const fields: string[] = []
  fields.push("MONTH_USAGE = :MONTH_USAGE")
  fields.push("ESTIMATED_USAGE = :ESTIMATED_USAGE")
  fields.push("RECORD_DATE = :RECORD_DATE")
  fields.push("LAST_USAGE = :LAST_USAGE")

  const sentence = `UPDATE WATERS_MONTH_HISTORY_USAGE SET ${fields.join(', ')} WHERE HISTORY_MONTH = :HISTORY_MONTH AND HISTORY_YEAR = :HISTORY_YEAR AND WATER_ID = :WATER_ID`

  return sqldb.execute(sentence, qPars)
}

/* @IFHELPER:FUNC w_deleteRow = DELETE
  PARAM WATER_ID: {WATERS_MONTH_HISTORY_USAGE.WATER_ID}
  PARAM RECORD_DATE: {WATERS_MONTH_HISTORY_USAGE.RECORD_DATE}
  FROM WATERS_MONTH_HISTORY_USAGE
  WHERE {WATERS_MONTH_HISTORY_USAGE.WATER_ID} = {:WATER_ID}
  WHERE {WATERS_MONTH_HISTORY_USAGE.RECORD_DATE} = {:RECORD_DATE}
*/
export function w_deleteRow (qPars: { WATER_ID: number, MONTH_USAGE: string }) {

  const sentence = `DELETE WATERS_MONTH_HISTORY_USAGE FROM WATERS_MONTH_HISTORY_USAGE WHERE WATERS_MONTH_HISTORY_USAGE.WATER_ID = :WATER_ID AND WATERS_MONTH_HISTORY_USAGE.MONTH_USAGE = :MONTH_USAGE`;

  return sqldb.execute(sentence, qPars)
}
/* @IFHELPER:FUNC deleteFromUnit = DELETE
  PARAM UNIT_ID: {WATERS.UNIT_ID}
  FROM WATERS_MONTH_HISTORY_USAGE
  INNER JOIN WATERS ON (WATERS_MONTH_HISTORY_USAGE.WATER_ID = WATERS.ID)
  WHERE {WATERS.UNIT_ID} = {:UNIT_ID}
*/
export async function w_deleteFromUnit (qPars: { UNIT_ID: number }, operationLogData: OperationLogData) {

  const join = ` 
    INNER JOIN WATERS ON (WATERS_MONTH_HISTORY_USAGE.WATER_ID = WATERS.ID)
`;

  const sentence = `DELETE WATERS_MONTH_HISTORY_USAGE FROM WATERS_MONTH_HISTORY_USAGE ${join} WHERE WATERS.UNIT_ID = :UNIT_ID`;

  if (operationLogData) {
    await saveOperationLog('WATERS_MONTH_HISTORY_USAGE', sentence, qPars, operationLogData);
    dbLogger('WATERS_MONTH_HISTORY_USAGE', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

/* @IFHELPER:FUNC deleteFromClient = DELETE
  PARAM CLIENT_ID: {CLUNITS.CLIENT_ID}
  FROM WATERS_MONTH_HISTORY_USAGE
  INNER JOIN WATERS ON (WATERS_MONTH_HISTORY_USAGE.WATER_ID = WATERS.ID)
  INNER JOIN CLUNITS ON (WATERS.UNIT_ID = CLUNITS.UNIT_ID)
  WHERE {CLUNITS.CLIENT_ID} = {:CLIENT_ID}
*/
export async function w_deleteFromClient (qPars: { CLIENT_ID: number }, operationLogData: OperationLogData) {

  const join = ` 
    INNER JOIN WATERS ON (WATERS_MONTH_HISTORY_USAGE.WATER_ID = WATERS.ID)
    INNER JOIN CLUNITS ON (WATERS.UNIT_ID = CLUNITS.UNIT_ID)
`;

  const sentence = `DELETE WATERS_MONTH_HISTORY_USAGE FROM WATERS_MONTH_HISTORY_USAGE ${join} WHERE CLUNITS.CLIENT_ID = :CLIENT_ID`;
  
  if (operationLogData) {
    await saveOperationLog('WATERS_MONTH_HISTORY_USAGE', sentence, qPars, operationLogData);
    dbLogger('WATERS_MONTH_HISTORY_USAGE', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}
 
/* @IFHELPER:FUNC getRecordInfo = SELECT LIST
  PARAM LAAGER_CODE: {LAAGER.LAAGER_CODE}
  PARAM initial_date: {LAAGER_DAILY_HISTORY_USAGE.HISTORY_DATE}
  PARAM initial_date: {LAAGER_DAILY_HISTORY_USAGE.READING_TIME}

  FROM LAAGER_DAILY_HISTORY_USAGE

  SELECT LAAGER_DAILY_HISTORY_USAGE.LAAGER_CODE,
  SELECT LAAGER_DAILY_HISTORY_USAGE.HISTORY_DATE,
  SELECT LAAGER_DAILY_HISTORY_USAGE.READING_TIME,
  SELECT LAAGER_DAILY_HISTORY_USAGE.READING,
  SELECT LAAGER_DAILY_HISTORY_USAGE.USAGE_AT_READING_TIME,
  SELECT LAAGER_DAILY_HISTORY_USAGE.ESTIMATED_USAGE

  WHERE {LAAGER.LAAGER_CODE} = {:LAAGER_CODE}
  WHERE {LAAGER_DAILY_HISTORY_USAGE.HISTORY_DATE} = {:HISTORY_DATE}
  WHERE {LAAGER_DAILY_HISTORY_USAGE.READING_TIME} = {:READING_TIME}
*/
export function getRecordInfo (qPars: { WATER_ID: number, HISTORY_MONTH: number, HISTORY_YEAR: number  }) {
  let sentence = `
    SELECT
      WATERS_MONTH_HISTORY_USAGE.ID,
      WATERS_MONTH_HISTORY_USAGE.WATER_ID,
      WATERS_MONTH_HISTORY_USAGE.HISTORY_MONTH,
      WATERS_MONTH_HISTORY_USAGE.HISTORY_YEAR,
      WATERS_MONTH_HISTORY_USAGE.MONTH_USAGE
  `
  sentence += `
    FROM
      WATERS_MONTH_HISTORY_USAGE
  `

  const conditions: string[] = []
  conditions.push(`WATERS_MONTH_HISTORY_USAGE.WATER_ID = :WATER_ID`)
  conditions.push(`WATERS_MONTH_HISTORY_USAGE.HISTORY_MONTH = :HISTORY_MONTH`)
  conditions.push(`WATERS_MONTH_HISTORY_USAGE.HISTORY_YEAR = :HISTORY_YEAR`)
  sentence += ' WHERE ' + conditions.join(' AND ')

  return sqldb.querySingle<{
    ID: number
    WATER_ID: number
    HISTORY_MONTH: number
    HISTORY_YEAR: number
    MONTH_USAGE: number
  }>(sentence, qPars)
}

/* @IFHELPER:FUNC getLastData = SELECT ROW
  PARAM WATER_ID: {WATERS_MONTH_HISTORY_USAGE.WATER_ID}

  FROM WATERS_MONTH_HISTORY_USAGE

  SELECT WATERS_MONTH_HISTORY_USAGE.WATER_ID
  SELECT WATERS_MONTH_HISTORY_USAGE.RECORD_DATE
  SELECT WATERS_MONTH_HISTORY_USAGE.LAST_USAGE

  WHERE {WATERS_MONTH_HISTORY_USAGE.WATER_ID} = {:WATER_ID}

  ORDER BY WATERS_MONTH_HISTORY_USAGE.RECORD_DATE DESC
  LIMIT 1 OFFSET 0
*/
export function getLastData (qPars: { WATER_ID: number }) {
  let sentence = `
    SELECT
      WATERS_MONTH_HISTORY_USAGE.WATER_ID,
      WATERS_MONTH_HISTORY_USAGE.RECORD_DATE,
      WATERS_MONTH_HISTORY_USAGE.LAST_USAGE
  `
  sentence += `
    FROM
      WATERS_MONTH_HISTORY_USAGE
  `

  sentence += ` WHERE WATERS_MONTH_HISTORY_USAGE.WATER_ID = :WATER_ID `

  sentence += ` ORDER BY WATERS_MONTH_HISTORY_USAGE.RECORD_DATE DESC `
  sentence += ` LIMIT 0,1 `

  return sqldb.querySingle<{
    WATER_ID: number
    RECORD_DATE: string
    LAST_USAGE: number
  }>(sentence, qPars)
}

export function getListMonth (qPars: { clientIds?: number[], stateIds?: string[], cityIds?: string[], unitIds?: number[], HISTORY_MONTH: number, HISTORY_YEAR: number }) {
  let sentence = `
    SELECT
      WATERS_MONTH_HISTORY_USAGE.ID,
      WATERS_MONTH_HISTORY_USAGE.WATER_ID,
      WATERS_MONTH_HISTORY_USAGE.HISTORY_MONTH,
      WATERS_MONTH_HISTORY_USAGE.HISTORY_YEAR,
      WATERS_MONTH_HISTORY_USAGE.MONTH_USAGE
  `
  sentence += `
    FROM
      WATERS_MONTH_HISTORY_USAGE     
        LEFT JOIN WATERS ON (WATERS_MONTH_HISTORY_USAGE.WATER_ID = WATERS.ID)
        LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = WATERS.UNIT_ID)
        LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = CLUNITS.CLIENT_ID)
        LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
        LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
  `

  const conditions: string[] = []
  if (qPars.clientIds) { conditions.push(`CLIENTS.CLIENT_ID IN (:clientIds)`) }
  if (qPars.stateIds) { conditions.push(`STATEREGION.ID IN (:stateIds)`) }
  if (qPars.cityIds) { conditions.push(`CLUNITS.CITY_ID IN (:cityIds)`) }
  if (qPars.unitIds) { conditions.push(`WATERS.UNIT_ID IN (:unitIds)`) }
  conditions.push(`WATERS_MONTH_HISTORY_USAGE.HISTORY_MONTH = :HISTORY_MONTH`)
  conditions.push(`WATERS_MONTH_HISTORY_USAGE.HISTORY_YEAR = :HISTORY_YEAR`)
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    ID: number
    WATER_ID: number
    HISTORY_MONTH: number
    HISTORY_YEAR: number
    MONTH_USAGE: number
  }>(sentence, qPars)
}

export function getList (qPars: {}) {
  let sentence = `
    SELECT
      WATERS_MONTH_HISTORY_USAGE.WATER_ID,
      WATERS_MONTH_HISTORY_USAGE.MONTH_USAGE,
      WATERS_MONTH_HISTORY_USAGE.RECORD_DATE,
      WATERS_MONTH_HISTORY_USAGE.LAST_USAGE
  `
  sentence += `
    FROM
      WATERS_MONTH_HISTORY_USAGE
  `

  return sqldb.query<{
    WATER_ID: number
    MONTH_USAGE: number
    RECORD_DATE: string
    LAST_USAGE: number
  }>(sentence, qPars)
}



