import * as sqldb from '../connectSql'
import { saveOperationLog, OperationLogData } from '../dbModifLog'
import { dbLogger } from '../../helpers/logger'

export async function w_insert(qPars: {
  CT_ID: number
  DAT_REPORT: number,
  H_DESC: string,
  H_INDEX: number,
  H_DATE: string,
  P_CAUSE_ID: number,
  ASSET_ID: number,
}, operationLogData: OperationLogData) {
  const fields: string[] = []
  fields.push('CT_ID')
  fields.push('DAT_REPORT')
  fields.push('H_DESC')
  fields.push('H_INDEX')
  fields.push('H_DATE')
  fields.push('P_CAUSE_ID')
  fields.push('ASSET_ID')

  const sentence = `INSERT INTO ASSETS_HEALTH_HIST (${fields.join(', ')}) VALUES (:${fields.join(', :')})`

  if (operationLogData) {
    await saveOperationLog('ASSETS_HEALTH_HIST', sentence, qPars, operationLogData);
    dbLogger('ASSETS_HEALTH_HIST', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

export function getList(qPars: {
  clientIds?: number[],
  unitIds?: number[],
  machineId?: number,
  dacId?: string,
  assetId?: number,
  SKIP?: number,
  LIMIT?: number,
  since?: number
  withDatBegMon?: boolean,
}) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DEV_ID,
      ASSETS_HEALTH_HIST.DAT_REPORT,
      ASSETS_HEALTH_HIST.H_INDEX,
      ASSETS_HEALTH_HIST.H_DESC,
      P_CAUSES.ID AS P_CAUSES_ID,
      P_CAUSES.CAUSES AS P_CAUSES,
      ASSETS_HEALTH_HIST.CT_ID,
      TYPEHEALTHCHANGE.TYPECHANGE,
      DEVICES_UNITS.UNIT_ID,
      ASSETS_HEALTH_HIST.ID AS HEALTH_HIST_ID,
      ASSETS_HEALTH_HIST.ASSET_ID
  `

  if (qPars.withDatBegMon) { sentence += ' ,DEVICES.DAT_BEGMON' }

  sentence += `
    FROM
      ASSETS_HEALTH_HIST
      INNER JOIN TYPEHEALTHCHANGE ON (ASSETS_HEALTH_HIST.CT_ID = TYPEHEALTHCHANGE.ID)
      INNER JOIN ASSETS ON (ASSETS.ID = ASSETS_HEALTH_HIST.ASSET_ID)
      LEFT JOIN P_CAUSES ON (P_CAUSES.ID = ASSETS_HEALTH_HIST.P_CAUSE_ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN AIR_CURTAINS ON (AIR_CURTAINS.ASSET_ID = ASSETS.ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.CONDENSER_ID = CONDENSERS.ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
      LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = COALESCE(DACS_CONDENSERS.DAC_DEVICE_ID, DACS_EVAPORATORS.DAC_DEVICE_ID, DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID))
      LEFT JOIN DUTS_DUO_EVAPORATORS ON (DUTS_DUO_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
      LEFT JOIN DUTS_DUO_ASSET_HEAT_EXCHANGERS ON (DUTS_DUO_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
      LEFT JOIN DUTS_DUO_CONDENSERS ON (CONDENSERS.ID = DUTS_DUO_CONDENSERS.CONDENSER_ID)
      LEFT JOIN DUTS_DUO_AIR_CURTAINS ON (AIR_CURTAINS.ID = DUTS_DUO_AIR_CURTAINS.AIR_CURTAIN_ID)
      LEFT JOIN DUTS_DUO ON (DUTS_DUO.ID = COALESCE(DUTS_DUO_EVAPORATORS.DUT_DUO_ID, DUTS_DUO_ASSET_HEAT_EXCHANGERS.DUT_DUO_ID, DUTS_DUO_CONDENSERS.DUT_DUO_ID, DUTS_DUO_AIR_CURTAINS.DUT_DUO_ID))
      LEFT JOIN DUTS_DEVICES ON (DUTS_DUO.DUT_DEVICE_ID=DUTS_DEVICES.ID)
      INNER JOIN DEVICES ON (DEVICES.ID = COALESCE(DACS_DEVICES.DEVICE_ID, DUTS_DEVICES.DEVICE_ID))
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN MACHINES ON (MACHINES.ID = CONDENSERS.MACHINE_ID)
  `

  const conditions: string[] = []
  if (qPars.clientIds) { conditions.push(`DEVICES_CLIENTS.CLIENT_ID IN (:clientIds)`) }
  if (qPars.unitIds != null) { conditions.push(`DEVICES_UNITS.UNIT_ID IN (:unitIds)`) }
  if (qPars.machineId != null) { conditions.push(`MACHINES.ID = :machineId`) }
  if (qPars.dacId != null) { conditions.push(`DEVICES.DEVICE_CODE = :dacId`) }
  if (qPars.assetId != null) { conditions.push(`ASSETS_HEALTH_HIST.ASSET_ID = :assetId`) }
  if (qPars.since != null) { conditions.push(`ASSETS_HEALTH_HIST.DAT_REPORT >= :since`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  sentence += ` ORDER BY ASSETS_HEALTH_HIST.DAT_REPORT DESC `
  if (qPars.SKIP != null && qPars.LIMIT != null) { sentence += ` LIMIT :SKIP,:LIMIT ` }

  return sqldb.query<{
    DEV_ID: string
    DAT_REPORT: number
    H_INDEX: number
    H_DESC: string
    P_CAUSES_ID: number
    P_CAUSES: string
    CT_ID: number
    TYPECHANGE: string
    UNIT_ID: number
    DAT_BEGMON?: string
    HEALTH_HIST_ID: number
    ASSET_ID: number
  }>(sentence, qPars)
}

export function getListDurations(qPars: { DEV_ID: string }) {
  let sentence = `
  SELECT
    DEVICES.DEVICE_CODE AS DEV_ID,
    ASSETS_HEALTH_HIST.DAT_REPORT,
    ASSETS_HEALTH_HIST.DAT_UNTIL
	FROM DEVICES
		LEFT JOIN DACS_DEVICES ON DEVICES.ID=DACS_DEVICES.DEVICE_ID
		LEFT JOIN DACS_CONDENSERS ON DACS_DEVICES.ID=DACS_CONDENSERS.DAC_DEVICE_ID
		LEFT JOIN DACS_EVAPORATORS ON DACS_DEVICES.ID=DACS_EVAPORATORS.DAC_DEVICE_ID
		LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS dahe ON DACS_DEVICES.ID=dahe.DAC_DEVICE_ID
		LEFT JOIN DUTS_DEVICES ON DEVICES.ID=DUTS_DEVICES.DEVICE_ID
    LEFT JOIN DUTS_DUO ON DUTS_DEVICES.ID=DUTS_DUO.DUT_DEVICE_ID
    LEFT JOIN DUTS_DUO_EVAPORATORS ON DUTS_DUO_EVAPORATORS.DUT_DUO_ID = DUTS_DUO.ID
    LEFT JOIN DUTS_DUO_CONDENSERS ON DUTS_DUO_CONDENSERS.DUT_DUO_ID = DUTS_DUO.ID
    LEFT JOIN DUTS_DUO_AIR_CURTAINS ON DUTS_DUO_AIR_CURTAINS.DUT_DUO_ID = DUTS_DUO.ID
    LEFT JOIN DUTS_DUO_ASSET_HEAT_EXCHANGERS DDAHE ON DDAHE.DUT_DUO_ID = DUTS_DUO.ID
    LEFT JOIN ASSET_HEAT_EXCHANGERS ON ASSET_HEAT_EXCHANGERS.ID=COALESCE(dahe.ASSET_HEAT_EXCHANGER_ID, DDAHE.ASSET_HEAT_EXCHANGER_ID)
    LEFT JOIN CONDENSERS ON CONDENSERS.ID=COALESCE(DACS_CONDENSERS.CONDENSER_ID, DUTS_DUO_CONDENSERS.CONDENSER_ID)
    LEFT JOIN EVAPORATORS ON EVAPORATORS.ID=COALESCE(DACS_EVAPORATORS.EVAPORATOR_ID, DUTS_DUO_EVAPORATORS.EVAPORATOR_ID)
    LEFT JOIN AIR_CURTAINS ON DUTS_DUO_AIR_CURTAINS.AIR_CURTAIN_ID=AIR_CURTAINS.ID
		LEFT JOIN ASSETS ON ASSETS.ID=COALESCE(CONDENSERS.ASSET_ID, EVAPORATORS.ASSET_ID, ASSET_HEAT_EXCHANGERS.ASSET_ID, AIR_CURTAINS.ASSET_ID)
		LEFT JOIN ASSETS_HEALTH_HIST ON ASSETS.ID=ASSETS_HEALTH_HIST.ASSET_ID 
  `

  sentence += ` WHERE DEVICES.DEVICE_CODE = :DEV_ID `

  sentence += ` ORDER BY ASSETS_HEALTH_HIST.DAT_REPORT DESC `

  return sqldb.query<{
    DEV_ID: string
    DAT_REPORT: number
    DAT_UNTIL: number
  }>(sentence, qPars)
}

export function getLastGreen (qPars: { DAC_IDS?: string[] }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DAC_ID,
      greens.DAT_REPORT,
      greens.DAT_UNTIL
  `
  sentence += `
    FROM (SELECT ahh.ASSET_ID, ahh.DAT_REPORT, ahh.DAT_UNTIL FROM ASSETS_HEALTH_HIST ahh WHERE ahh.H_INDEX=100) greens
      LEFT JOIN (SELECT ahh.ASSET_ID, ahh.DAT_REPORT, ahh.DAT_UNTIL FROM ASSETS_HEALTH_HIST ahh WHERE ahh.H_INDEX=100) greens2 on greens.ASSET_ID=greens2.ASSET_ID and greens.DAT_REPORT<greens2.DAT_REPORT
      INNER JOIN ASSETS ON (ASSETS.ID = greens.ASSET_ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.CONDENSER_ID = CONDENSERS.ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
      LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = COALESCE(DACS_CONDENSERS.DAC_DEVICE_ID, DACS_EVAPORATORS.DAC_DEVICE_ID, DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID))
      LEFT JOIN DUTS_DUO_EVAPORATORS ON (DUTS_DUO_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
      LEFT JOIN DUTS_DUO_ASSET_HEAT_EXCHANGERS ON (DUTS_DUO_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
      LEFT JOIN DUTS_DUO ON (DUTS_DUO.ID = COALESCE(DUTS_DUO_EVAPORATORS.DUT_DUO_ID, DUTS_DUO_ASSET_HEAT_EXCHANGERS.DUT_DUO_ID))
      LEFT JOIN DUTS_DEVICES ON (DUTS_DUO.DUT_DEVICE_ID=DUTS_DEVICES.ID)
      INNER JOIN DEVICES ON (DEVICES.ID = COALESCE(DACS_DEVICES.DEVICE_ID, DUTS_DEVICES.DEVICE_ID))
  `

  const conditions: string[] = []
  conditions.push(`greens2.DAT_REPORT IS NULL`)
  if (qPars.DAC_IDS?.length) {
    conditions.push(`DEVICES.DEVICE_CODE IN (:DAC_IDS)`)
  }
  sentence += ' WHERE ' + conditions.join(' AND ')

  return sqldb.query<{
    DAC_ID: string
    DAT_REPORT: number
    DAT_UNTIL: number
  }>(sentence, qPars)
}

export async function w_removeAssetsFromClient(qPars: { CLIENT_ID: number }, operationLogData: OperationLogData) {
  const sentence = `
      DELETE
        ASSETS_HEALTH_HIST
      FROM
        ASSETS_HEALTH_HIST
          INNER JOIN ASSETS ON (ASSETS.ID = ASSETS_HEALTH_HIST.ASSET_ID)
          INNER JOIN CLUNITS ON (CLUNITS.UNIT_ID = ASSETS.UNIT_ID)
      WHERE CLUNITS.CLIENT_ID = :CLIENT_ID
  `

  if (operationLogData) {
      await saveOperationLog('AIR_CURTAINS', sentence, qPars, operationLogData);
      dbLogger('AIR_CURTAINS', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

export async function w_deleteByAssetId(qPars: { ASSET_ID: number, itemsDates?: number[] }, operationLogData: OperationLogData) {
  let sentence = `
      DELETE
        ASSETS_HEALTH_HIST
      FROM
        ASSETS_HEALTH_HIST
          INNER JOIN ASSETS ON (ASSETS.ID = ASSETS_HEALTH_HIST.ASSET_ID)
        
      WHERE ASSETS.ID = :ASSET_ID
  `

  if (qPars.itemsDates) { sentence += " AND ASSETS_HEALTH_HIST.DAT_REPORT IN (:itemsDates)" } 

  if (operationLogData) {
      await saveOperationLog('ASSETS_HEALTH_HIST', sentence, qPars, operationLogData);
      dbLogger('ASSETS_HEALTH_HIST', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

export async function w_removeAssetsFromUnit(qPars: { UNIT_ID: number }, operationLogData: OperationLogData) {
  const join = `
    INNER JOIN ASSETS ON (ASSETS.ID = ASSETS_HEALTH_HIST.ASSET_ID)
    INNER JOIN CLUNITS ON (CLUNITS.UNIT_ID = ASSETS.UNIT_ID)
    `

  const sentence = `DELETE ASSETS_HEALTH_HIST FROM ASSETS_HEALTH_HIST ${join} WHERE CLUNITS.UNIT_ID = :UNIT_ID`;

  if (operationLogData) {
    await saveOperationLog('ASSETS_HEALTH_HIST', sentence, qPars, operationLogData);
    dbLogger('ASSETS_HEALTH_HIST', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}


export async function w_deleteById(qPars: { ID: number }, operationLogData: OperationLogData) {
  const sentence = `DELETE FROM ASSETS_HEALTH_HIST WHERE ASSETS_HEALTH_HIST.ID = :ID`;
  if (operationLogData) {
    await saveOperationLog('ASSETS_HEALTH_HIST', sentence, qPars, operationLogData);
    dbLogger('ASSETS_HEALTH_HIST', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

export function w_deleteRow(qPars: { DAC_ID: string, itemsDates: number[] }) {
  const join = `
  INNER JOIN ASSETS ON (ASSETS.ID = ASSETS_HEALTH_HIST.ASSET_ID)
  LEFT JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
  LEFT JOIN EVAPORATORS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
  LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ASSET_ID = ASSETS.ID)
  LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
  LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.CONDENSER_ID = CONDENSERS.ID)
  LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
  LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = COALESCE(DACS_CONDENSERS.DAC_DEVICE_ID, DACS_EVAPORATORS.DAC_DEVICE_ID, DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID))
  LEFT JOIN DUTS_DUO_EVAPORATORS ON (DUTS_DUO_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
  LEFT JOIN DUTS_DUO_ASSET_HEAT_EXCHANGERS ON (DUTS_DUO_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
  LEFT JOIN DUTS_DUO ON (DUTS_DUO.ID = COALESCE(DUTS_DUO_EVAPORATORS.DUT_DUO_ID, DUTS_DUO_ASSET_HEAT_EXCHANGERS.DUT_DUO_ID))
  LEFT JOIN DUTS_DEVICES ON (DUTS_DUO.DUT_DEVICE_ID=DUTS_DEVICES.ID)
  INNER JOIN DEVICES ON (DEVICES.ID = COALESCE(DACS_DEVICES.DEVICE_ID, DUTS_DEVICES.DEVICE_ID))
  `
  const sentence = `DELETE ASSETS_HEALTH_HIST FROM ASSETS_HEALTH_HIST ${join} WHERE DEVICES.DEVICE_CODE = :DAC_ID AND ASSETS_HEALTH_HIST.DAT_REPORT IN (:itemsDates)`;

  return sqldb.execute(sentence, qPars)
}

export async function getAssetHealthHistInfo(qPars: { DAC_ID?: string, ASSET_ID?: number, itemDates: number[], healthIndex?: number }) {
  let sentence = `
    SELECT
      ASSETS_HEALTH_HIST.ID AS HEALTH_HIST_ID,
      ASSETS_HEALTH_HIST.DAT_REPORT,
      ASSETS_HEALTH_HIST.ASSET_ID,
      ASSETS_HEALTH_HIST.P_CAUSE_ID,
      ASSETS_HEALTH.ID AS ASSET_HEALTH_ID,
      ASSETS_HEALTH_HIST.CT_ID,
      ASSETS_HEALTH_HIST.H_INDEX,
      ASSETS_HEALTH_HIST.DAT_UNTIL,
      ASSETS_HEALTH_HIST.H_DESC
    FROM
      ASSETS_HEALTH_HIST
      INNER JOIN ASSETS ON (ASSETS.ID = ASSETS_HEALTH_HIST.ASSET_ID)
      LEFT JOIN ASSETS_HEALTH ON (ASSETS_HEALTH.HEALTH_HIST_ID = ASSETS_HEALTH_HIST.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ASSET_ID = ASSETS.ID)
      LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.CONDENSER_ID = CONDENSERS.ID)
      LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
      LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = COALESCE(DACS_CONDENSERS.DAC_DEVICE_ID, DACS_EVAPORATORS.DAC_DEVICE_ID, DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID))
      LEFT JOIN DUTS_DUO_EVAPORATORS ON (DUTS_DUO_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
      LEFT JOIN DUTS_DUO_ASSET_HEAT_EXCHANGERS ON (DUTS_DUO_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
      LEFT JOIN DUTS_DUO ON (DUTS_DUO.ID = COALESCE(DUTS_DUO_EVAPORATORS.DUT_DUO_ID, DUTS_DUO_ASSET_HEAT_EXCHANGERS.DUT_DUO_ID))
      LEFT JOIN DUTS_DEVICES ON (DUTS_DUO.DUT_DEVICE_ID=DUTS_DEVICES.ID)
      INNER JOIN DEVICES ON (DEVICES.ID = COALESCE(DACS_DEVICES.DEVICE_ID, DUTS_DEVICES.DEVICE_ID))
      `
  const conditions = []
  if (qPars.DAC_ID) { conditions.push("DEVICES.DEVICE_CODE = :DAC_ID") }
  if (qPars.ASSET_ID) { conditions.push("ASSETS_HEALTH_HIST.ASSET_ID = :ASSET_ID") }
  if (qPars.itemDates) { conditions.push("ASSETS_HEALTH_HIST.DAT_REPORT IN (:itemDates)") }
  if (qPars.healthIndex) { conditions.push("ASSETS_HEALTH_HIST.H_INDEX = :healthIndex") }

  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    DAT_REPORT: number
    CT_ID: number
    H_INDEX: number
    H_DESC: string
    DAT_UNTIL?: number
    HEALTH_HIST_ID?: number
    ASSET_ID?: number
    P_CAUSE_ID?: number
    ASSET_HEALTH_ID?: number
  }>(sentence, qPars)
}

/* @IFHELPER:FUNC updateDuration = UPDATE
  FROM ASSETS_HEALTH_HIST
  FIELD ASSETS_HEALTH_HIST.DAT_UNTIL
*/
export function w_updateDuration (qPars: { DAT_UNTIL: number, DAC_ID: string, DAT_REPORT: number }) {
  const sentence = `
  UPDATE 
    ASSETS_HEALTH_HIST
  SET
    DAT_UNTIL = :DAT_UNTIL
  WHERE 
    ASSET_ID IN (
      SELECT
        ASSETS.ID
      FROM 
        ASSETS
        LEFT JOIN CONDENSERS ON (CONDENSERS.ASSET_ID = ASSETS.ID)
        LEFT JOIN EVAPORATORS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
        LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ASSET_ID = ASSETS.ID)
        LEFT JOIN DACS_EVAPORATORS ON (DACS_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
        LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.CONDENSER_ID = CONDENSERS.ID)
        LEFT JOIN DACS_ASSET_HEAT_EXCHANGERS ON (DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
        LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = COALESCE(DACS_CONDENSERS.DAC_DEVICE_ID, DACS_EVAPORATORS.DAC_DEVICE_ID, DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID))
        LEFT JOIN DUTS_DUO_EVAPORATORS ON (DUTS_DUO_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID)
        LEFT JOIN DUTS_DUO_ASSET_HEAT_EXCHANGERS ON (DUTS_DUO_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID)
        LEFT JOIN DUTS_DUO ON (DUTS_DUO.ID = COALESCE(DUTS_DUO_EVAPORATORS.DUT_DUO_ID, DUTS_DUO_ASSET_HEAT_EXCHANGERS.DUT_DUO_ID))
        LEFT JOIN DUTS_DEVICES ON (DUTS_DUO.DUT_DEVICE_ID=DUTS_DEVICES.ID)
        INNER JOIN DEVICES ON (DEVICES.ID = COALESCE(DACS_DEVICES.DEVICE_ID, DUTS_DEVICES.DEVICE_ID))  
      WHERE
        DEVICES.DEVICE_CODE = :DAC_ID AND ASSETS_HEALTH_HIST.DAT_REPORT = :DAT_REPORT
    )
  `
  return sqldb.execute(sentence, qPars)
}


export async function w_updateById (qPars: { ID: number, DAT_UNTIL?: string }, operationLogData: OperationLogData) {
  const fields: string[] = []
  if (qPars.DAT_UNTIL !== undefined) { fields.push('DAT_UNTIL = :DAT_UNTIL') }
  if (!fields.length) throw Error('No fields to update').HttpStatus(500).DebugInfo({ qPars })

  const sentence = `UPDATE ASSETS_HEALTH_HIST SET ${fields.join(', ')} WHERE ID = :ID`

  if (operationLogData) {
    dbLogger('ASSETS_HEALTH_HIST', sentence, qPars, operationLogData)
    await saveOperationLog('ASSETS_HEALTH_HIST', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}