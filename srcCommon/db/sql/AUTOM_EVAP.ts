import * as sqldb from '../connectSql'
import { saveOperationLog, OperationLogData } from '../dbModifLog'
import { dbLogger } from '../../../srcCommon/helpers/logger'

export function getDevExtraInfo (qPars: { DUT_ID: string }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DUT_ID,
      DEVICES.BT_ID,
      DEVICES_UNITS.UNIT_ID,
      DEVICES_CLIENTS.CLIENT_ID,
      CLUNITS.UNIT_NAME,
      CLUNITS.CITY_ID,
      CLUNITS.LAT,
      CLUNITS.LON,
      STATEREGION.NAME AS STATE_ID,
      CITY.NAME AS CITY_NAME,
      CLIENTS.NAME AS CLIENT_NAME,
      DEVFWVERS.CURRFW_MSG,
      CURRENT_AUTOMATIONS_PARAMETERS.DESIRED_PROG AS DESIREDPROG,
      CURRENT_AUTOMATIONS_PARAMETERS.LAST_PROG AS LASTPROG,
      CURRENT_AUTOMATIONS_PARAMETERS.LTI AS LTI,
      CURRENT_AUTOMATIONS_PARAMETERS.MODE AS MODE,
      CURRENT_AUTOMATIONS_PARAMETERS.ACTION_MODE AS ACTION_MODE,
      CURRENT_AUTOMATIONS_PARAMETERS.ACTION_POST_BEHAVIOR AS ACTION_POST_BEHAVIOR,
      DUTS_AUTOMATION.DISAB,
      CURRENT_AUTOMATIONS_PARAMETERS.FU_NOM,
      ENVIRONMENTS_ROOM_TYPES.RTYPE_ID,
      ROOMTYPES.USEPERIOD,
      ROOMTYPES.TUSEMAX,
      ROOMTYPES.TUSEMIN
  `
  sentence += `
    FROM
      DUTS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DUTS_DEVICES.DEVICE_ID)
      LEFT JOIN DUTS_AUTOMATION ON (DUTS_AUTOMATION.DUT_DEVICE_ID = DUTS_DEVICES.ID)
      LEFT JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID = DUTS_AUTOMATION.MACHINE_ID)
      LEFT JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (CURRENT_AUTOMATIONS_PARAMETERS.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
      LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
      LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
      LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
      LEFT JOIN DEVFWVERS ON (DEVFWVERS.DEV_ID = DEVICES.DEVICE_CODE)
      LEFT JOIN DUTS_MONITORING ON (DUTS_MONITORING.DUT_DEVICE_ID = DUTS_DEVICES.ID)
      LEFT JOIN ENVIRONMENTS ON (ENVIRONMENTS.ID = DUTS_MONITORING.ENVIRONMENT_ID)
      LEFT JOIN ENVIRONMENTS_ROOM_TYPES ON (ENVIRONMENTS_ROOM_TYPES.ENVIRONMENT_ID = ENVIRONMENTS.ID)
      LEFT JOIN ROOMTYPES ON (ROOMTYPES.RTYPE_ID = ENVIRONMENTS_ROOM_TYPES.RTYPE_ID)
  `

  sentence += ` WHERE DEVICES.DEVICE_CODE = :DUT_ID GROUP BY DEVICES.DEVICE_CODE`

  return sqldb.querySingle<{
    DUT_ID: string
    BT_ID: string
    UNIT_ID: number
    CLIENT_ID: number
    UNIT_NAME: string
    CITY_ID: string
    LAT: string
    LON: string
    STATE_ID: string
    CITY_NAME: string
    CLIENT_NAME: string
    CURRFW_MSG: string
    DESIREDPROG: string
    LASTPROG: string
    DISAB: number
    FU_NOM: number
    RTYPE_ID: number
    USEPERIOD: string
    TUSEMAX: number
    TUSEMIN: number
    LTI: number
    MODE: string | null
    ACTION_MODE: string | null
    ACTION_POST_BEHAVIOR: string | null
  }>(sentence, qPars)
}

export function getList (qPars: {
  clientIds?: number[],
  stateId?: string,
  cityId?: string,
  unitId?: number,
  SKIP?: number,
  LIMIT?: number
}) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DUT_ID,
      DEVICES.BT_ID,
      DEVICES_UNITS.UNIT_ID,
      DUTS_AUTOMATION.DISAB,
      CLUNITS.UNIT_NAME,
      CLUNITS.CITY_ID,
      CLUNITS.LAT,
      CLUNITS.LON,
      CITY.NAME AS CITY_NAME,
      STATEREGION.NAME AS STATE_ID,
      DEVICES_CLIENTS.CLIENT_ID,
      CLIENTS.NAME AS CLIENT_NAME
  `
  sentence += `
    FROM
      DUTS_AUTOMATION
      INNER JOIN DUTS_DEVICES ON (DUTS_AUTOMATION.DUT_DEVICE_ID = DUTS_DEVICES.ID)
      INNER JOIN DEVICES ON (DEVICES.ID = DUTS_DEVICES.DEVICE_ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
      LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
      LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
      LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
  `

  const conditions: string[] = []
  conditions.push(`(DUTS_AUTOMATION.DISAB IS NULL OR DUTS_AUTOMATION.DISAB = 0)`)
  if (qPars.clientIds) { conditions.push(`DEVICES_CLIENTS.CLIENT_ID IN (:clientIds)`) }
  if (qPars.stateId !== undefined) { conditions.push(`CITY.STATE_ID = :stateId`) }
  if (qPars.cityId !== undefined) { conditions.push(`CLUNITS.CITY_ID = :cityId`) }
  if (qPars.unitId !== undefined) { conditions.push(`DEVICES_UNITS.UNIT_ID = :unitId`) }
  sentence += ' WHERE ' + conditions.join(' AND ')

  sentence += ` ORDER BY DEVICES.DEVICE_CODE ASC `
  if (qPars.SKIP != null && qPars.LIMIT != null) { sentence += ` LIMIT :SKIP,:LIMIT ` }

  return sqldb.query<{
    DUT_ID: string
    BT_ID: string
    UNIT_ID: number
    DISAB: number
    UNIT_NAME: string
    CITY_ID: string
    LAT: string
    LON: string
    CITY_NAME: string
    STATE_ID: string
    CLIENT_ID: number
    CLIENT_NAME: string
  }>(sentence, qPars)
}

export function getListWithProg (qPars: { clientIds?: number[], devIds?: string[] }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DUT_ID,
      DUTS_AUTOMATION.DISAB,
      DEVICES_CLIENTS.CLIENT_ID,
      CURRENT_AUTOMATIONS_PARAMETERS.DESIRED_PROG AS DESIREDPROG,
      CURRENT_AUTOMATIONS_PARAMETERS.LAST_PROG AS LASTPROG
  `
  sentence += `
    FROM
      DUTS_AUTOMATION
      INNER JOIN DUTS_DEVICES ON (DUTS_AUTOMATION.DUT_DEVICE_ID = DUTS_DEVICES.ID)
      INNER JOIN DEVICES ON (DEVICES.ID = DUTS_DEVICES.DEVICE_ID)
      LEFT JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID = DUTS_AUTOMATION.MACHINE_ID)
      LEFT JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (CURRENT_AUTOMATIONS_PARAMETERS.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
  `

  const conditions: string[] = []
  conditions.push(`(DUTS_AUTOMATION.DISAB IS NULL OR DUTS_AUTOMATION.DISAB = 0)`)
  if (qPars.clientIds) { conditions.push(`DEVICES_CLIENTS.CLIENT_ID IN (:clientIds)`) }
  if (qPars.devIds) { conditions.push(`DEVICES.DEVICE_CODE IN (:devIds)`) }
  sentence += ' WHERE ' + conditions.join(' AND ')

  sentence += ` ORDER BY DEVICES.DEVICE_CODE ASC `

  return sqldb.query<{
    DUT_ID: string
    DISAB: number
    CLIENT_ID: number
    DESIREDPROG: string
    LASTPROG: string
  }>(sentence, qPars)
}


export function getDevBasicInfo (qPars: { DUT_ID: string, MACHINE_ID?: number }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DEV_ID,
      DEVICES.ID AS DEVICE_ID,
      DEVICES_CLIENTS.CLIENT_ID,
      DEVICES_UNITS.UNIT_ID,
      COALESCE(DUTS_AUTOMATION.DISAB, 1) AS DISAB,
      CURRENT_AUTOMATIONS_PARAMETERS.SETPOINT AS TSETPOINT,
      CURRENT_AUTOMATIONS_PARAMETERS.LTC AS LTCRIT,
      CURRENT_AUTOMATIONS_PARAMETERS.RESENDPER,
      CURRENT_AUTOMATIONS_PARAMETERS.MODE AS CTRLOPER,
      CURRENT_AUTOMATIONS_PARAMETERS.DAT_BEGAUT,
      CURRENT_AUTOMATIONS_PARAMETERS.PORT_CFG AS PORTCFG,
      CURRENT_AUTOMATIONS_PARAMETERS.LTI AS LTINF,
      CURRENT_AUTOMATIONS_PARAMETERS.UPPER_HYSTERESIS,
      CURRENT_AUTOMATIONS_PARAMETERS.LOWER_HYSTERESIS,
      COALESCE(DUTS_DEVICES.TEMPERATURE_OFFSET, 0) AS TEMPERATURE_OFFSET,
      CURRENT_AUTOMATIONS_PARAMETERS.SCHEDULE_START_BEHAVIOR,
      CURRENT_AUTOMATIONS_PARAMETERS.SCHEDULE_END_BEHAVIOR,
      CURRENT_AUTOMATIONS_PARAMETERS.FORCED_BEHAVIOR,
      CURRENT_AUTOMATIONS_PARAMETERS.ACTION_MODE,
      CURRENT_AUTOMATIONS_PARAMETERS.ACTION_TIME,
      CURRENT_AUTOMATIONS_PARAMETERS.ACTION_POST_BEHAVIOR,
      DUTS_DEVICES.ID AS DUT_DEVICE_ID,
      DUTS_DEVICES.VARS
  `
  sentence += `
    FROM
      DUTS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DUTS_DEVICES.DEVICE_ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DUTS_AUTOMATION ON (DUTS_AUTOMATION.DUT_DEVICE_ID = DUTS_DEVICES.ID)
      LEFT JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID = DUTS_AUTOMATION.MACHINE_ID)
      LEFT JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (CURRENT_AUTOMATIONS_PARAMETERS.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)  
  `
  const conditions: string[] = []
  conditions.push(`DEVICES.DEVICE_CODE = :DUT_ID `);
  if (qPars.MACHINE_ID) { conditions.push(`DUTS_AUTOMATION.MACHINE_ID = :MACHINE_ID`); }
  sentence += ' WHERE ' + conditions.join(' AND ');

  sentence += ` GROUP BY DEVICES.DEVICE_CODE `;

  return sqldb.querySingle<{
    DEV_ID: string
    DEVICE_ID: number
    CLIENT_ID: number
    UNIT_ID: number
    DISAB: number
    TSETPOINT: number
    LTCRIT: number
    RESENDPER: number
    CTRLOPER: string
    DAT_BEGAUT: string
    PORTCFG: 'IR'|'RELAY'
    LTINF: number
    UPPER_HYSTERESIS: number
    LOWER_HYSTERESIS: number
    TEMPERATURE_OFFSET: number
    SCHEDULE_START_BEHAVIOR: string
    SCHEDULE_END_BEHAVIOR: string
    FORCED_BEHAVIOR: string
    ACTION_MODE: string
    ACTION_TIME: number
    ACTION_POST_BEHAVIOR: string,
    DUT_DEVICE_ID: number
    VARS: string
  }>(sentence, qPars)
}

export function getDevProductInfo (qPars: { DUT_ID: string }) {
  let sentence = `
    SELECT DISTINCT
      DEVICES.DEVICE_CODE AS DUT_ID,
      DEVICES_CLIENTS.CLIENT_ID,
      DEVICES_UNITS.UNIT_ID,
      MACHINES.BRAND AS MCHN_BRAND,
      ASSETS.MODEL AS MCHN_MODEL
  `
  sentence += `
    FROM
      DUTS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DUTS_DEVICES.DEVICE_ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DUTS_AUTOMATION ON (DUTS_AUTOMATION.DUT_DEVICE_ID = DUTS_DEVICES.ID)
      LEFT JOIN MACHINES ON (MACHINES.ID = DUTS_AUTOMATION.MACHINE_ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.MACHINE_ID = MACHINES.ID)
      LEFT JOIN ASSETS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
  `

  sentence += ` WHERE DEVICES.DEVICE_CODE = :DUT_ID `

  return sqldb.querySingle<{
    DUT_ID: string
    CLIENT_ID: number
    UNIT_ID: number
    MCHN_BRAND: string
    MCHN_MODEL: string
  }>(sentence, qPars)
}

export function getAllDevsByBrandModel (qPars: { MCHN_BRAND?: string, MCHN_MODEL?: string }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DUT_ID,
      MACHINES.BRAND AS MCHN_BRAND,
      ASSETS.MODEL AS MCHN_MODEL
  `
  sentence += `
    FROM
      MACHINES
      INNER JOIN DUTS_AUTOMATION ON (DUTS_AUTOMATION.MACHINE_ID = MACHINES.ID)
      INNER JOIN DUTS_DEVICES ON (DUTS_AUTOMATION.DUT_DEVICE_ID = DUTS_DEVICES.ID)
      INNER JOIN DEVICES ON (DUTS_DEVICES.DEVICE_ID = DEVICES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.MACHINE_ID = MACHINES.ID)
      LEFT JOIN ASSETS ON (ASSETS.ID = EVAPORATORS.ASSET_ID)
  `

  const conditions: string[] = []
  if (qPars.MCHN_BRAND) { conditions.push(`MACHINES.BRAND = :MCHN_BRAND`) }
  if (qPars.MCHN_MODEL) { conditions.push(`ASSETS.MODEL = :MCHN_MODEL`) }
  if (!qPars.MCHN_MODEL) { conditions.push(`ASSETS.MODEL IS NOT NULL`) }
  sentence += ' WHERE ' + conditions.join(' AND ')

  return sqldb.query<{
    DUT_ID: string
    MCHN_BRAND: string
    MCHN_MODEL: string
  }>(sentence, qPars)
}

export function getListBasic () {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DUT_ID,
      CURRENT_AUTOMATIONS_PARAMETERS.MODE AS CTRLOPER,
      DEVICES_CLIENTS.CLIENT_ID,
      DEVICES_UNITS.UNIT_ID
  `
  sentence += `
    FROM
      DUTS_AUTOMATION
      INNER JOIN DUTS_DEVICES ON (DUTS_AUTOMATION.DUT_DEVICE_ID = DUTS_DEVICES.ID)
      INNER JOIN DEVICES ON (DEVICES.ID = DUTS_DEVICES.DEVICE_ID)
      INNER JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      INNER JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      INNER JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID = DUTS_AUTOMATION.MACHINE_ID)
      INNER JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (CURRENT_AUTOMATIONS_PARAMETERS.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)  
  `

  return sqldb.query<{
    DUT_ID: string
    CTRLOPER: string
    CLIENT_ID: number
    UNIT_ID: number
  }>(sentence)
}

export function getListWithProgFU (qPars: { clientIds?: number[], dutIds?: string[] }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DUT_ID,
      DUTS_AUTOMATION.DISAB,
      DEVICES_CLIENTS.CLIENT_ID,
      CURRENT_AUTOMATIONS_PARAMETERS.DESIRED_PROG AS DESIREDPROG,
      CURRENT_AUTOMATIONS_PARAMETERS.LAST_PROG AS LASTPROG,
      CURRENT_AUTOMATIONS_PARAMETERS.FU_NOM
  `
  sentence += `
    FROM
      DUTS_AUTOMATION
      INNER JOIN DUTS_DEVICES ON (DUTS_AUTOMATION.DUT_DEVICE_ID = DUTS_DEVICES.ID)
      INNER JOIN DEVICES ON (DEVICES.ID = DUTS_DEVICES.DEVICE_ID)
      INNER JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      INNER JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID = DUTS_AUTOMATION.MACHINE_ID)
      INNER JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (CURRENT_AUTOMATIONS_PARAMETERS.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)  
  `

  const conditions: string[] = []
  conditions.push(`DUTS_AUTOMATION.DISAB = 0`)
  if (qPars.clientIds) { conditions.push(`DEVICES_CLIENTS.CLIENT_ID IN (:clientIds)`) }
  if (qPars.dutIds) { conditions.push(`DEVICES.DEVICE_CODE IN (:dutIds)`) }
  sentence += ' WHERE ' + conditions.join(' AND ')

  return sqldb.query<{
    DUT_ID: string
    DISAB: number
    CLIENT_ID: number
    DESIREDPROG: string
    LASTPROG: string
    FU_NOM: number
  }>(sentence, qPars)
}

export function getUnitByDevCode (qPars: { DUT_ID: string }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DUT_ID,
      DEVICES_UNITS.UNIT_ID
  `
  sentence += `
    FROM
      DUTS_DEVICES
      INNER JOIN DEVICES ON (DEVICES.ID = DUTS_DEVICES.DEVICE_ID)
      LEFT JOIN DUTS_AUTOMATION ON (DUTS_AUTOMATION.DUT_DEVICE_ID = DUTS_DEVICES.ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
  `

  sentence += ` WHERE DEVICES.DEVICE_CODE = :DUT_ID GROUP BY DEVICES.DEVICE_CODE`

  return sqldb.querySingle<{
    DUT_ID: string
    UNIT_ID: number
  }>(sentence, qPars)
}
