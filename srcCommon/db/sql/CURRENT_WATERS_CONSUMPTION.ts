import * as sqldb from '../connectSql'
import { saveOperationLog, OperationLogData } from '../dbModifLog'
import { dbLogger } from '../../helpers/logger'

export interface IWatersConsumption {
  METER_ID: string
  MONDAY_AVERAGE_CONSUMPTION?: number
  MONDAY_CONSIDERED_DAYS?: number
  TUESDAY_AVERAGE_CONSUMPTION?: number
  TUESDAY_CONSIDERED_DAYS?: number
  WEDNESDAY_AVERAGE_CONSUMPTION?: number
  WEDNESDAY_CONSIDERED_DAYS?: number
  THURSDAY_AVERAGE_CONSUMPTION?: number
  THURSDAY_CONSIDERED_DAYS?: number
  FRIDAY_AVERAGE_CONSUMPTION?: number
  FRIDAY_CONSIDERED_DAYS?: number
  SATURDAY_AVERAGE_CONSUMPTION?: number
  SATURDAY_CONSIDERED_DAYS?: number
  SUNDAY_AVERAGE_CONSUMPTION?: number
  SUNDAY_CONSIDERED_DAYS?: number
  REPORT_DATE?: string
  TIMEZONE_OFFSET?: number
}

/* @IFHELPER:FUNC insert = INSERT
  FROM CURRENT_WATERS_CONSUMPTION
  FIELD ID
*/
export async function w_insert (qPars: IWatersConsumption, operationLogData: OperationLogData) {
  const fields: string[] = []
  if (qPars.MONDAY_AVERAGE_CONSUMPTION !== undefined) { fields.push('MONDAY_AVERAGE_CONSUMPTION') }
  if (qPars.MONDAY_CONSIDERED_DAYS !== undefined) { fields.push('MONDAY_CONSIDERED_DAYS') }

  if (qPars.TUESDAY_AVERAGE_CONSUMPTION !== undefined) { fields.push('TUESDAY_AVERAGE_CONSUMPTION') }
  if (qPars.TUESDAY_CONSIDERED_DAYS !== undefined) { fields.push('TUESDAY_CONSIDERED_DAYS') }

  if (qPars.WEDNESDAY_AVERAGE_CONSUMPTION !== undefined) { fields.push('WEDNESDAY_AVERAGE_CONSUMPTION') }
  if (qPars.WEDNESDAY_CONSIDERED_DAYS !== undefined) { fields.push('WEDNESDAY_CONSIDERED_DAYS') }

  if (qPars.THURSDAY_AVERAGE_CONSUMPTION !== undefined) { fields.push('THURSDAY_AVERAGE_CONSUMPTION') }
  if (qPars.THURSDAY_CONSIDERED_DAYS !== undefined) { fields.push('THURSDAY_CONSIDERED_DAYS') }

  if (qPars.FRIDAY_AVERAGE_CONSUMPTION !== undefined) { fields.push('FRIDAY_AVERAGE_CONSUMPTION') }
  if (qPars.FRIDAY_CONSIDERED_DAYS !== undefined) { fields.push('FRIDAY_CONSIDERED_DAYS') }

  if (qPars.SATURDAY_AVERAGE_CONSUMPTION !== undefined) { fields.push('SATURDAY_AVERAGE_CONSUMPTION') }
  if (qPars.SATURDAY_CONSIDERED_DAYS !== undefined) { fields.push('SATURDAY_CONSIDERED_DAYS') }

  if (qPars.SUNDAY_AVERAGE_CONSUMPTION !== undefined) { fields.push('SUNDAY_AVERAGE_CONSUMPTION') }
  if (qPars.SUNDAY_CONSIDERED_DAYS !== undefined) { fields.push('SUNDAY_CONSIDERED_DAYS') }

  if (qPars.TIMEZONE_OFFSET !== undefined) { fields.push('TIMEZONE_OFFSET') }

  const sentence = `INSERT INTO CURRENT_WATERS_CONSUMPTION (${fields.join(', ')}) VALUES (:${fields.join(', :')})`

  if (operationLogData) {
    await saveOperationLog('CURRENT_WATERS_CONSUMPTION', sentence, qPars, operationLogData);
    dbLogger('CURRENT_WATERS_CONSUMPTION', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars);
}

/* @IFHELPER:FUNC w_delete = DELETE
  PARAM METER_ID: {CURRENT_WATERS_CONSUMPTION.LAAGER_ID || CURRENT_WATERS_CONSUMPTION.DMA_ID}   
  DELETE FROM CURRENT_WATERS_CONSUMPTION  
  WHERE CURRENT_WATERS_CONSUMPTION.LAAGER_ID = :METER_ID OR CURRENT_WATERS_CONSUMPTION.DMA_ID = :METER_ID
*/
export async function w_delete(qPars: { METER_ID: string }, operationLogData: OperationLogData) {

  const join = `
  LEFT JOIN LAAGER ON (CURRENT_WATERS_CONSUMPTION.LAAGER_ID = LAAGER.ID)
  LEFT JOIN DMAS_DEVICES ON (CURRENT_WATERS_CONSUMPTION.DMA_ID = DMAS_DEVICES.ID)
  LEFT JOIN DEVICES ON (DMAS_DEVICES.DEVICE_ID = DEVICES.ID)
  `;  

  const sentence = `DELETE CURRENT_WATERS_CONSUMPTION FROM CURRENT_WATERS_CONSUMPTION ${join} WHERE LAAGER.LAAGER_CODE = :METER_ID OR DEVICES.DEVICE_CODE = :METER_ID`;

  if (operationLogData) {
    await saveOperationLog('CURRENT_WATERS_CONSUMPTION', sentence, qPars, operationLogData);
    dbLogger('CURRENT_WATERS_CONSUMPTION', sentence, qPars, operationLogData);
  }
  return sqldb.execute(sentence, qPars)
}

/* @IFHELPER:FUNC getReport = SELECT LIST
  PARAM METER_ID: {CURRENT_WATERS_CONSUMPTION.LAAGER_ID || CURRENT_WATERS_CONSUMPTION.DMA_ID}

  FROM CURRENT_WATERS_CONSUMPTION

  SELECT UNIT_ID,
  SELECT LAAGER_ID,
  SELECT DMA_ID,
  SELECT MONDAY_AVERAGE_CONSUMPTION,
  SELECT MONDAY_CONSIDERED_DAYS,
  SELECT TUESDAY_AVERAGE_CONSUMPTION,
  SELECT TUESDAY_CONSIDERED_DAYS,
  SELECT WEDNESDAY_AVERAGE_CONSUMPTION,
  SELECT WEDNESDAY_CONSIDERED_DAYS,
  SELECT THURSDAY_AVERAGE_CONSUMPTION,
  SELECT THURSDAY_CONSIDERED_DAYS,
  SELECT FRIDAY_AVERAGE_CONSUMPTION,
  SELECT FRIDAY_CONSIDERED_DAYS,
  SELECT SATURDAY_AVERAGE_CONSUMPTION,
  SELECT SATURDAY_CONSIDERED_DAYS,
  SELECT SUNDAY_AVERAGE_CONSUMPTION,
  SELECT SUNDAY_CONSIDERED_DAYS,
  SELECT REPORT_DATE

  WHERE {CURRENT_WATERS_CONSUMPTION.LAAGER_ID || CURRENT_WATERS_CONSUMPTION.DMA_ID} = {:METER_ID}

*/
export function getReport (qPars: { METER_ID: string, UNIT_ID: number }) {
  let sentence = `
    SELECT
      UNIT_ID,
      LAAGER.LAAGER_CODE AS LAAGER_ID,
      DEVICES.DEVICE_CODE AS DMA_ID,
      MONDAY_AVERAGE_CONSUMPTION,
      MONDAY_CONSIDERED_DAYS,
      TUESDAY_AVERAGE_CONSUMPTION,
      TUESDAY_CONSIDERED_DAYS,
      WEDNESDAY_AVERAGE_CONSUMPTION,
      WEDNESDAY_CONSIDERED_DAYS,
      THURSDAY_AVERAGE_CONSUMPTION,
      THURSDAY_CONSIDERED_DAYS,
      FRIDAY_AVERAGE_CONSUMPTION,
      FRIDAY_CONSIDERED_DAYS,
      SATURDAY_AVERAGE_CONSUMPTION,
      SATURDAY_CONSIDERED_DAYS,
      SUNDAY_AVERAGE_CONSUMPTION,
      SUNDAY_CONSIDERED_DAYS,
      REPORT_DATE

  `
  sentence += `
    FROM
      CURRENT_WATERS_CONSUMPTION
    LEFT JOIN LAAGER ON (CURRENT_WATERS_CONSUMPTION.LAAGER_ID = LAAGER.ID)
    LEFT JOIN DMAS_DEVICES ON (CURRENT_WATERS_CONSUMPTION.DMA_ID = DMAS_DEVICES.ID)
    LEFT JOIN DEVICES ON (DMAS_DEVICES.DEVICE_ID = DEVICES.ID)
    
  `

  sentence += ` WHERE LAAGER.LAAGER_CODE = :METER_ID OR DEVICES.DEVICE_CODE = :METER_ID AND UNIT_ID = :UNIT_ID ORDER BY REPORT_DATE ASC`;

  return sqldb.query<{
    UNIT_ID: number
    LAAGER_ID: string
    DMA_ID: string
    MONDAY_AVERAGE_CONSUMPTION: number
    MONDAY_CONSIDERED_DAYS: number
    TUESDAY_AVERAGE_CONSUMPTION: number
    TUESDAY_CONSIDERED_DAYS: number
    WEDNESDAY_AVERAGE_CONSUMPTION: number
    WEDNESDAY_CONSIDERED_DAYS: number
    THURSDAY_AVERAGE_CONSUMPTION: number
    THURSDAY_CONSIDERED_DAYS: number
    FRIDAY_AVERAGE_CONSUMPTION: number
    FRIDAY_CONSIDERED_DAYS: number
    SATURDAY_AVERAGE_CONSUMPTION: number
    SATURDAY_CONSIDERED_DAYS: number
    SUNDAY_AVERAGE_CONSUMPTION: number
    SUNDAY_CONSIDERED_DAYS: number
    REPORT_DATE: string
  }>(sentence, qPars)
}