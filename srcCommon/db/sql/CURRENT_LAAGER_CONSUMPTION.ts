import * as sqldb from '../connectSql'
import { saveOperationLog, OperationLogData } from '../dbModifLog'
import { dbLogger } from '../../helpers/logger'

export async function w_insert (qPars: {LAAGER_ID?: number, CURRENT_WATERS_CONSUMPTION_ID?: number}, operationLogData: OperationLogData) {  
  const fields: string[] = []  
  if (qPars.LAAGER_ID !== undefined) { fields.push('LAAGER_ID') }
  if (qPars.CURRENT_WATERS_CONSUMPTION_ID !== undefined) { fields.push('CURRENT_WATERS_CONSUMPTION_ID') }

   let sentence = `INSERT INTO CURRENT_LAAGER_CONSUMPTION (${fields.join(', ')}) VALUES (:${fields.join(', :')})`

  if (operationLogData) {
    await saveOperationLog('CURRENT_LAAGER_CONSUMPTION', sentence, qPars, operationLogData);
    dbLogger('CURRENT_LAAGER_CONSUMPTION', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars);
}

/* @IFHELPER:FUNC w_delete = DELETE
  PARAM LAAGER_CODE: {LAAGER.LAAGER_CODE }   
  DELETE FROM CURRENT_LAAGER_CONSUMPTION  
  WHERE LAAGER.LAAGER_CODE = :LAAGER_CODE
*/
export async function w_delete(qPars: { LAAGER_CODE: string }, operationLogData: OperationLogData) {

  const join = "INNER JOIN LAAGER ON (CURRENT_LAAGER_CONSUMPTION.LAAGER_ID = LAAGER.ID)";  

  const sentence = `DELETE CURRENT_LAAGER_CONSUMPTION FROM CURRENT_LAAGER_CONSUMPTION ${join} WHERE LAAGER.LAAGER_CODE = :LAAGER_CODE`;

  if (operationLogData) {
    await saveOperationLog('CURRENT_LAAGER_CONSUMPTION', sentence, qPars, operationLogData);
    dbLogger('CURRENT_LAAGER_CONSUMPTION', sentence, qPars, operationLogData);
  }
  return sqldb.execute(sentence, qPars)
}

export async function w_deleteFromUnit (qPars: { UNIT_ID: number }, operationLogData: OperationLogData) {
  const join = ` 
    INNER JOIN LAAGER ON (CURRENT_LAAGER_CONSUMPTION.LAAGER_ID = LAAGER.ID)
    INNER JOIN WATERS ON (LAAGER.WATER_ID = WATERS.ID)
`;

  const sentence = `DELETE CURRENT_LAAGER_CONSUMPTION FROM CURRENT_LAAGER_CONSUMPTION ${join} WHERE WATERS.UNIT_ID = :UNIT_ID`;

  if (operationLogData) {
    await saveOperationLog('CURRENT_LAAGER_CONSUMPTION', sentence, qPars, operationLogData);
    dbLogger('CURRENT_LAAGER_CONSUMPTION', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

/* @IFHELPER:FUNC getReport = SELECT LIST
  PARAM LAAGER_CODE: { LAAGER.LAAGER_CODE}

  FROM CURRENT_LAAGER_CONSUMPTION

  SELECT WATERS.UNIT_ID,
  SELECT LAAGER.LAAGER_CODE AS LAAGER_ID,
  SELECT MONDAY_AVERAGE_CONSUMPTION,
  SELECT MONDAY_CONSIDERED_DAYS,
  SELECT TUESDAY_AVERAGE_CONSUMPTION,
  SELECT TUESDAY_CONSIDERED_DAYS,
  SELECT WEDNESDAY_AVERAGE_CONSUMPTION,
  SELECT WEDNESDAY_CONSIDERED_DAYS,
  SELECT THURSDAY_AVERAGE_CONSUMPTION,
  SELECT THURSDAY_CONSIDERED_DAYS,
  SELECT FRIDAY_AVERAGE_CONSUMPTION,
  SELECT FRIDAY_CONSIDERED_DAYS,
  SELECT SATURDAY_AVERAGE_CONSUMPTION,
  SELECT SATURDAY_CONSIDERED_DAYS,
  SELECT SUNDAY_AVERAGE_CONSUMPTION,
  SELECT SUNDAY_CONSIDERED_DAYS,
  SELECT REPORT_DATE

  FROM
  CURRENT_LAAGER_CONSUMPTION
  INNER JOIN LAAGER ON (CURRENT_LAAGER_CONSUMPTION.LAAGER_ID = LAAGER.ID)
  INNER JOIN WATERS ON (LAAGER.WATER_ID = WATERS.ID) 

  WHERE {LAAGER.LAAGER_CODE}= {:LAAGER_CODE} AND {WATERS.UNIT_ID} = {:UNIT_ID} ORDER BY REPORT_DATE ASC

*/
export function getReport (qPars: { LAAGER_CODE: string, UNIT_ID: number }) {
  let sentence = `
    SELECT
      WATERS.UNIT_ID,
      LAAGER.LAAGER_CODE AS LAAGER_ID,
      CURRENT_WATERS_CONSUMPTION.MONDAY_AVERAGE_CONSUMPTION,
      CURRENT_WATERS_CONSUMPTION.MONDAY_CONSIDERED_DAYS,
      CURRENT_WATERS_CONSUMPTION.TUESDAY_AVERAGE_CONSUMPTION,
      CURRENT_WATERS_CONSUMPTION.TUESDAY_CONSIDERED_DAYS,
      CURRENT_WATERS_CONSUMPTION.WEDNESDAY_AVERAGE_CONSUMPTION,
      CURRENT_WATERS_CONSUMPTION.WEDNESDAY_CONSIDERED_DAYS,
      CURRENT_WATERS_CONSUMPTION.THURSDAY_AVERAGE_CONSUMPTION,
      CURRENT_WATERS_CONSUMPTION.THURSDAY_CONSIDERED_DAYS,
      CURRENT_WATERS_CONSUMPTION.FRIDAY_AVERAGE_CONSUMPTION,
      CURRENT_WATERS_CONSUMPTION.FRIDAY_CONSIDERED_DAYS,
      CURRENT_WATERS_CONSUMPTION.SATURDAY_AVERAGE_CONSUMPTION,
      CURRENT_WATERS_CONSUMPTION.SATURDAY_CONSIDERED_DAYS,
      CURRENT_WATERS_CONSUMPTION.SUNDAY_AVERAGE_CONSUMPTION,
      CURRENT_WATERS_CONSUMPTION.SUNDAY_CONSIDERED_DAYS,
      CURRENT_WATERS_CONSUMPTION.REPORT_DATE

  `
  sentence += `
    FROM
      CURRENT_LAAGER_CONSUMPTION
      INNER JOIN LAAGER ON (CURRENT_LAAGER_CONSUMPTION.LAAGER_ID = LAAGER.ID)
      INNER JOIN WATERS ON (LAAGER.WATER_ID = WATERS.ID) 
      INNER JOIN CURRENT_WATERS_CONSUMPTION ON (CURRENT_WATERS_CONSUMPTION.ID = CURRENT_LAAGER_CONSUMPTION.CURRENT_WATERS_CONSUMPTION_ID)    
  `

  sentence += ` WHERE LAAGER.LAAGER_CODE = :LAAGER_CODE AND WATERS.UNIT_ID = :UNIT_ID ORDER BY REPORT_DATE ASC`;

  return sqldb.query<{
    UNIT_ID: number
    LAAGER_ID: string
    MONDAY_AVERAGE_CONSUMPTION: number
    MONDAY_CONSIDERED_DAYS: number
    TUESDAY_AVERAGE_CONSUMPTION: number
    TUESDAY_CONSIDERED_DAYS: number
    WEDNESDAY_AVERAGE_CONSUMPTION: number
    WEDNESDAY_CONSIDERED_DAYS: number
    THURSDAY_AVERAGE_CONSUMPTION: number
    THURSDAY_CONSIDERED_DAYS: number
    FRIDAY_AVERAGE_CONSUMPTION: number
    FRIDAY_CONSIDERED_DAYS: number
    SATURDAY_AVERAGE_CONSUMPTION: number
    SATURDAY_CONSIDERED_DAYS: number
    SUNDAY_AVERAGE_CONSUMPTION: number
    SUNDAY_CONSIDERED_DAYS: number
    REPORT_DATE: string
  }>(sentence, qPars)
}