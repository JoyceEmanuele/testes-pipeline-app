import * as sqldb from '../connectSql'
import { saveOperationLog, OperationLogData } from '../dbModifLog';
import { dbLogger } from '../../../srcCommon/helpers/logger'
import { ControlMode } from '../../types';
import { checkTempAmb, generateTemperatureConditions } from './ASSETS';

export async function w_insert(qPars: { NAME: string, APPLICATION: string, FLUID_TYPE: string, INSTALLATION_DATE: string, TYPE: string, BRAND: string, UNIT_ID: number, RATED_POWER: number }, operationLogData: OperationLogData) {

  const fields: string[] = []
  fields.push('NAME')
  fields.push('APPLICATION')
  fields.push('FLUID_TYPE')
  fields.push('INSTALLATION_DATE')
  fields.push('TYPE')
  fields.push('BRAND')
  fields.push('UNIT_ID')
  fields.push('RATED_POWER')

  const sentence = `INSERT INTO MACHINES (${fields.join(', ')}) VALUES (:${fields.join(', :')})`

  if (operationLogData) {
    await saveOperationLog('MACHINES', sentence, qPars, operationLogData);
    dbLogger('MACHINES', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}
//falta as de dev_aut, dut_id
export async function w_update(qPars: {
  MACHINE_ID: number,
  MACHINE_NAME?: string,
  MACHINE_APPLICATION?: string,
  MACHINE_FLUID_TYPE?: string,
  MACHINE_INSTALLATION_DATE?: string,
  MACHINE_TYPE?: string,
  MACHINE_BRAND?: string
  MACHINE_COP?: number
  UNIT_ID?: number
  RATED_POWER?: number

}, operationLogData: OperationLogData) {
  const fields: string[] = []
  if (qPars.MACHINE_NAME !== undefined) { fields.push('NAME = :MACHINE_NAME') }
  if (qPars.MACHINE_APPLICATION !== undefined) { fields.push('APPLICATION = :MACHINE_APPLICATION') }
  if (qPars.MACHINE_FLUID_TYPE !== undefined) { fields.push('FLUID_TYPE = :MACHINE_FLUID_TYPE') }
  if (qPars.MACHINE_INSTALLATION_DATE !== undefined) { fields.push('INSTALLATION_DATE = :MACHINE_INSTALLATION_DATE') }
  if (qPars.MACHINE_TYPE !== undefined) { fields.push('TYPE = :MACHINE_TYPE') }
  if (qPars.MACHINE_BRAND !== undefined) { fields.push('BRAND = :MACHINE_BRAND') }
  if (qPars.MACHINE_COP !== undefined) { fields.push('PERFORMANCE_COEFFICIENT = :MACHINE_COP') }
  if (qPars.UNIT_ID !== undefined) { fields.push('UNIT_ID = :UNIT_ID') }
  if (qPars.RATED_POWER !== undefined) { fields.push('RATED_POWER = :RATED_POWER')}

  if (!fields.length) throw Error('No fields to update').HttpStatus(500).DebugInfo({ qPars })

  const sentence = `UPDATE MACHINES SET ${fields.join(', ')} WHERE ID = :MACHINE_ID`

  if (operationLogData) {
    await saveOperationLog('MACHINES', sentence, qPars, operationLogData);
    dbLogger('MACHINES', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

/* @IFHELPER:FUNC deleteRow = DELETE
  PARAM ID: {MACHINES.ID}
  FROM MACHINES
  WHERE {MACHINES.ID} = {:ID}
*/
export async function w_deleteRow(qPars: { MACHINE_IDS: number[] }, _delChecks: {
  FAULTS_DATAS: true,
  HEALTH_BEFORE_OFFLINE: true,
  ASSETS_HEALTH: true,
  ASSETS_HEALTH_HIST: true,
  AIR_CURTAINS: true,
  CONDENSERS_HEAT_EXCHANGERS: true,
  EVAPORATORS_HEAT_EXCHANGERS: true,
  CONDENSERS: true,
  EVAPORATORS: true,
  DACS_CONDENSERS: true,
  DACS_EVAPORATORS: true,
  ASSOC_MACHINES: true,
  ASSOCIATIONS: true,
  MACHINE_IMAGES: true,
  REFRIGERATES: true,
  ADDITIONAL_MACHINE_PARAMETERS: true,
}, operationLogData: OperationLogData) {
  const sentence = `DELETE FROM MACHINES WHERE MACHINES.ID IN (:MACHINE_IDS)`;

  if (operationLogData) {
    await saveOperationLog('MACHINES', sentence, qPars, operationLogData);
    dbLogger('MACHINES', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

export async function w_deleteFromClient(qPars: { CLIENT_ID: number }, _delChecks: {
  FAULTS_DATAS: true,
  HEALTH_BEFORE_OFFLINE: true,
  ASSETS_HEALTH: true,
  ASSETS_HEALTH_HIST: true,
  AIR_CURTAINS: true,
  CONDENSERS_HEAT_EXCHANGERS: true,
  EVAPORATORS_HEAT_EXCHANGERS: true,
  CONDENSERS: true,
  EVAPORATORS: true,
  DACS_CONDENSERS: true,
  DACS_EVAPORATORS: true,
  ASSOC_MACHINES: true,
  ASSOCIATIONS: true,
  MACHINE_IMAGES: true,
  ADDITIONAL_MACHINE_PARAMETERS: true,
}, operationLogData: OperationLogData) {

  const sentence = `
  DELETE MACHINES 
    FROM 
      MACHINES 
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = MACHINES.UNIT_ID)
    WHERE CLUNITS.CLIENT_ID = :CLIENT_ID`;

  if (operationLogData) {
    await saveOperationLog('MACHINES', sentence, qPars, operationLogData);
    dbLogger('MACHINES', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

export function getListWithDamDut(qPars: { DEV_AUT?: string, DUT_ID?: string, clientIds?: number[], unitIds?: number[] }, admPars: { onlyWithDam?: boolean }) {
  let sentence = `
    SELECT
      MACHINES.ID AS MACHINE_ID,
      MACHINES.NAME AS MACHINE_NAME,
      ${selectDevAutMachine} as DEV_AUT,
      ${selectDutIdMachine} as DUT_ID
  `
  sentence += `
    FROM
      MACHINES
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = MACHINES.UNIT_ID)
  `

  const conditions: string[] = []
  if (qPars.DEV_AUT !== undefined) { conditions.push(`${selectDevAutMachine} = :DEV_AUT`) }
  if (qPars.DUT_ID !== undefined) { conditions.push(`${selectDutIdMachine} = :DUT_ID`) }
  if (qPars.clientIds) { conditions.push(`CLUNITS.CLIENT_ID IN (:clientIds)`) }
  if (qPars.unitIds) { conditions.push(`CLUNITS.UNIT_ID IN (:unitIds)`) }
  if (admPars.onlyWithDam) { conditions.push(`${selectDevAutMachine} IS NOT NULL`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    MACHINE_ID: number
    DEV_AUT: string
    MACHINE_NAME: string
    DUT_ID: string
  }>(sentence, qPars)
}

export function getMachinesList(qPars: {
  MACHINE_IDS?: number[],
  UNIT_ID?: number,
  UNIT_IDS?: number[],
  DUT_ID?: string,
  DEV_AUT?: string,
  CLIENT_IDS?: number[],
  INCLUDE_INSTALLATION_UNIT?: boolean,
  withoutIllumination?: boolean,
}) {
  const conditionsCommon: string[] = []
  let conditionsMachine: string[] = []
  let conditionsIllumination: string[] = []
  if (qPars.MACHINE_IDS) { conditionsMachine.push(`MACHINES.ID IN (:MACHINE_IDS)`) }
  // TODO: Tratando casos de máquinas da devgroups que viraram iluminação automatizada, futuramente retirar isso
  if (qPars.MACHINE_IDS) { conditionsIllumination.push(`ILLUMINATIONS.ID IN (:MACHINE_IDS)`) }
  if (qPars.UNIT_ID != null) { conditionsCommon.push(`CLUNITS.UNIT_ID = :UNIT_ID`) }
  if (qPars.UNIT_IDS != null) { conditionsCommon.push(`CLUNITS.UNIT_ID IN (:UNIT_IDS)`) }
  if (qPars.DUT_ID !== undefined) { conditionsMachine.push(`${selectDutIdMachine} = :DUT_ID`); conditionsIllumination.push(`DEVICES.DEVICE_CODE = :DUT_ID`) }
  if (qPars.DEV_AUT !== undefined) { conditionsMachine.push(`${selectDevAutMachine} = :DEV_AUT`); conditionsIllumination.push(`DEVICES.DEVICE_CODE = :DEV_AUT`); }
  if (qPars.CLIENT_IDS) { conditionsCommon.push(`CLUNITS.CLIENT_ID IN (:CLIENT_IDS)`) }
  if (qPars.INCLUDE_INSTALLATION_UNIT === false) { conditionsCommon.push(`CLUNITS.PRODUCTION = 1`) }
  conditionsCommon.forEach(item => { conditionsMachine.push(item); conditionsIllumination.push(item); });
  let sentence = `
  WITH CTE_MACHINE_ILU_DAM AS (
		SELECT
			MACHINES.ID AS MACHINE_ID,
			null AS ILLUMINATION_ID,
			MACHINES.NAME AS MACHINE_NAME,
			null AS ILLUMINATION_NAME,
			MACHINES.APPLICATION AS APPLICATION,
			MACHINES.BRAND,
      ${selectDevAutMachine} as DEV_AUT,
      ${selectDutIdMachine} as DUT_ID,
		  DATE_FORMAT(MACHINES.INSTALLATION_DATE, '%d/%m/%Y') AS INSTALLATION_DATE,
		  MACHINES.TYPE AS TYPE,
		  MACHINES.FLUID_TYPE,
		  CLUNITS.UNIT_ID,
		  CLUNITS.UNIT_NAME,
		  CITY.NAME AS CITY_NAME,
		  STATEREGION.NAME AS STATE_ID,
      MACHINES.RATED_POWER AS MACHINE_RATED_POWER
		FROM
		  MACHINES
		  INNER JOIN CLUNITS ON (CLUNITS.UNIT_ID = MACHINES.UNIT_ID)
		  LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
		  LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)`;
    if (conditionsMachine.length) { sentence += ' WHERE ' + conditionsMachine.join(' AND ') }
    
    if (!qPars.withoutIllumination) {
      sentence += `
      UNION
      SELECT
        null AS MACHINE_ID,
        ILLUMINATIONS.ID AS ILLUMINATION_ID,
        null AS MACHINE_NAME,
        ILLUMINATIONS.NAME AS ILLUMINATION_NAME,
        'iluminacao' AS APPLICATION,
        '' AS BRAND,
        DEVICES.DEVICE_CODE AS DEV_AUT,
        '' AS DUT_ID,
        '' AS INSTALLATION_DATE,
        '' AS TYPE,
        '' AS FLUID_TYPE,
        CLUNITS.UNIT_ID,
        CLUNITS.UNIT_NAME,
        CITY.NAME AS CITY_NAME,
        STATEREGION.NAME AS STATE_ID,
        NULL AS MACHINE_RATED_POWER
      FROM
        ILLUMINATIONS
        INNER JOIN DAMS_ILLUMINATIONS ON (DAMS_ILLUMINATIONS.ILLUMINATION_ID = ILLUMINATIONS.ID)
        INNER JOIN DAMS_DEVICES ON (DAMS_DEVICES.ID = DAMS_ILLUMINATIONS.DAM_DEVICE_ID)
        INNER JOIN DEVICES ON (DEVICES.ID = DAMS_DEVICES.DEVICE_ID)
        INNER JOIN CLUNITS ON (CLUNITS.UNIT_ID = ILLUMINATIONS.UNIT_ID)
        LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
        LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
      `;
      
      if (conditionsIllumination.length) { sentence += ' WHERE ' + conditionsIllumination.join(' AND ') }
    }

  sentence += `
    )
    SELECT DISTINCT
      CTE_MACHINE_ILU_DAM.MACHINE_ID,
      CTE_MACHINE_ILU_DAM.ILLUMINATION_ID,
      CTE_MACHINE_ILU_DAM.MACHINE_NAME,
      CTE_MACHINE_ILU_DAM.ILLUMINATION_NAME,
      CTE_MACHINE_ILU_DAM.APPLICATION AS MCHN_APPL,
      CTE_MACHINE_ILU_DAM.BRAND,
      CTE_MACHINE_ILU_DAM.DEV_AUT AS DEV_AUT,
      CTE_MACHINE_ILU_DAM.DUT_ID AS DUT_ID,
      CTE_MACHINE_ILU_DAM.INSTALLATION_DATE AS INSTALLATION_DATE,
      CTE_MACHINE_ILU_DAM.TYPE AS GROUP_TYPE,
      CTE_MACHINE_ILU_DAM.FLUID_TYPE,
      CTE_MACHINE_ILU_DAM.UNIT_ID,
      CTE_MACHINE_ILU_DAM.UNIT_NAME,
      CTE_MACHINE_ILU_DAM.CITY_NAME AS CITY_NAME,
      CTE_MACHINE_ILU_DAM.STATE_ID AS STATE_ID,
      CTE_MACHINE_ILU_DAM.MACHINE_RATED_POWER,
      '-' AS MODEL,
      NULL AS FRIGO_CAPACITY,
      NULL AS FRIGO_CAPACITY_UNIT,
      NULL AS RATED_POWER
    FROM
      CTE_MACHINE_ILU_DAM
  `;

  return sqldb.query<{
    MACHINE_ID: number
    ILLUMINATION_ID: number
    MACHINE_NAME: string
    ILLUMINATION_NAME: string
    MCHN_APPL: string
    BRAND: string
    DEV_AUT: string
    DUT_ID: string
    INSTALLATION_DATE: string
    GROUP_TYPE: string
    FLUID_TYPE: string
    UNIT_NAME: string
    UNIT_ID: number
    STATE_ID: string
    CITY_NAME: string
    MODEL: string
    FRIGO_CAPACITY: number
    FRIGO_CAPACITY_UNIT: string 
    RATED_POWER: number
    MACHINE_RATED_POWER: number
  }>(sentence, qPars)
}

export function getMachinesListOverview(qPars: {
  clientIds?: number[];
  stateIds?: number[];
  cityIds?: string[];
  unitIds?: number[];
  INCLUDE_INSTALLATION_UNIT?: boolean;
}) {  
  let sentence = `SELECT
    MACHINES.ID AS ID,
    MACHINES.NAME AS NAME,
    CLUNITS.UNIT_ID,
    CLUNITS.UNIT_NAME,
    CITY.NAME AS CITY_NAME,
    STATEREGION.NAME AS STATE_ID,
    MACHINES.ID AS GROUP_ID
  FROM
    MACHINES
    INNER JOIN CLUNITS ON (CLUNITS.UNIT_ID = MACHINES.UNIT_ID)
    LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
    LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)`;

    const conditions: string[] = []
    if (qPars.clientIds) { conditions.push(`CLUNITS.CLIENT_ID IN (:clientIds)`) }
    if (qPars.unitIds) { conditions.push(`CLUNITS.UNIT_ID IN (:unitIds)`) }
    if (qPars.cityIds) { conditions.push(`CITY.CITY_ID IN (:cityIds)`) }
    if (qPars.stateIds) { conditions.push(`CITY.STATE_ID IN (:stateIds)`) }
    if (qPars.INCLUDE_INSTALLATION_UNIT === false) { conditions.push(`CLUNITS.PRODUCTION = 1`)}
    if(conditions.length > 0 ) {sentence += ' WHERE ' + conditions.join(' AND ')}

  return sqldb.query<{
    MACHINE_ID: number
    MACHINE_NAME: string
    UNIT_ID: number
    UNIT_NAME: string
    CITY_NAME: string
    STATE_ID: string
    GROUP_ID: number 
  }>(sentence, qPars)
}


export function getMachineInfo(qPars: { MACHINE_ID: number, CLIENT_ID?: number }) {
  let sentence = `
    SELECT
      MACHINES.ID AS GROUP_ID,
      MACHINES.NAME AS GROUP_NAME,
      MACHINES.INSTALLATION_DATE,
      MACHINES.APPLICATION,
      CLUNITS.UNIT_ID,
      ${selectDevAutMachine} as DEV_AUT,
      ${selectDutIdMachine} as DUT_ID,
      NULL as MODEL,
      DEVICES.DAT_BEGMON,
      CLUNITS.CLIENT_ID,
      CLUNITS.UNIT_NAME,
      CITY.NAME AS CITY_NAME,
      STATEREGION.NAME AS STATE_ID,
      DEVICES.DAT_BEGMON AS DAM_DAT_BEGMON,
      FLUID.OPT_LABEL AS FLUID_TYPE,
      BRAND.OPT_LABEL AS MACHINE_BRAND,
      MACHINES.RATED_POWER
  `
  sentence += `
    FROM
      MACHINES
      INNER JOIN CLUNITS ON (CLUNITS.UNIT_ID = MACHINES.UNIT_ID)
      LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
      LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
      LEFT JOIN AV_OPTS FLUID ON (FLUID.OPT_ID = MACHINES.FLUID_TYPE)
      LEFT JOIN AV_OPTS BRAND ON (BRAND.OPT_ID = MACHINES.BRAND)
      LEFT JOIN DEVICES ON (DEVICES.DEVICE_CODE = ${selectDevAutMachine})
  `

  const conditions: string[] = []
  conditions.push(`MACHINES.ID = :MACHINE_ID`)
  if (qPars.CLIENT_ID != null) { conditions.push(`CLUNITS.CLIENT_ID = :CLIENT_ID`) }
  sentence += ' WHERE ' + conditions.join(' AND ')

  return sqldb.queryFirst<{
    GROUP_ID: number
    GROUP_NAME: string
    UNIT_ID: number
    DUT_ID: string
    DEV_AUT: string
    INSTALLATION_DATE: string
    MODEL: string // Será retirado já que informação é de ativo
    APPLICATION: string
    CLIENT_ID: number
    UNIT_NAME: string
    CITY_NAME: string
    STATE_ID: string
    DAM_DAT_BEGMON: string
    FLUID_TYPE: string
    MACHINE_BRAND: string
    RATED_POWER: number
  }>(sentence, qPars)
}

export function dacInfoComboOpts(qPars: { CLIENT_ID: number, UNIT_ID?: number }) {
  let sentence = `
    SELECT
      MACHINES.ID AS value,
      MACHINES.NAME AS label,
      MACHINES.UNIT_ID AS unit,
      ${selectDevAutMachine} AS dev_aut
  `
  sentence += `
    FROM
      MACHINES
      INNER JOIN CLUNITS ON (CLUNITS.UNIT_ID = MACHINES.UNIT_ID)
  `

  const conditions: string[] = []
  conditions.push(`CLUNITS.CLIENT_ID = :CLIENT_ID `)
  if (qPars.UNIT_ID != null) { conditions.push(`MACHINES.UNIT_ID = :UNIT_ID`) }
  sentence += ' WHERE ' + conditions.join(' AND ')

  return sqldb.query<{
    value: number
    label: string
    unit: number
    devAut: string
  }>(sentence, qPars)
}

export function getDutMachines(qPars: { DUT_ID: string, withReference?: boolean }) {
  let sentence = `
    SELECT DISTINCT
      MACHINES.ID AS GROUP_ID,
      MACHINES.NAME AS GROUP_NAME,
      ${selectDevAutMachine} AS DEV_AUT
  `
  sentence += `
    FROM
      MACHINES
      LEFT JOIN DUTS_AUTOMATION ON(DUTS_AUTOMATION.MACHINE_ID = MACHINES.ID)
      LEFT JOIN DUTS_REFERENCE ON (DUTS_REFERENCE.MACHINE_ID = MACHINES.ID)`;
  if (!qPars.withReference) {
    sentence += `LEFT JOIN DUTS_DEVICES ON (DUTS_DEVICES.ID = DUTS_AUTOMATION.DUT_DEVICE_ID)`;
  }
  else {
    sentence += `LEFT JOIN DUTS_MONITORING ON (DUTS_MONITORING.ID = DUTS_REFERENCE.DUT_MONITORING_ID)
    LEFT JOIN DUTS_DEVICES ON (DUTS_DEVICES.ID = COALESCE(DUTS_AUTOMATION.DUT_DEVICE_ID, DUTS_MONITORING.DUT_DEVICE_ID))`;
  }
      
  sentence += `LEFT JOIN DEVICES ON (DEVICES.ID = DUTS_DEVICES.DEVICE_ID)`;

  sentence += ` WHERE DEVICES.DEVICE_CODE = :DUT_ID `

  return sqldb.query<{
    GROUP_ID: number
    GROUP_NAME: string
    DEV_AUT: string
  }>(sentence, qPars)
}

export function getDamMachines(qPars: { DEV_AUT: string }) {
  let sentence = `
    SELECT
      MACHINES.ID as GROUP_ID,
      MACHINES.NAME AS GROUP_NAME
  `
  sentence += `
    FROM
      MACHINES
  `

  sentence += ` WHERE ${selectDevAutMachine} = :DEV_AUT `

  return sqldb.query<{
    GROUP_ID: number
    GROUP_NAME: string
  }>(sentence, qPars)
}

export function getBasicInfo(qPars: { MACHINE_ID: number, CLIENT_ID?: number }) {
  let sentence = `
    SELECT
      CLUNITS.CLIENT_ID,
      CLUNITS.UNIT_ID
  `
  sentence += `
    FROM
      MACHINES
      INNER JOIN CLUNITS ON (CLUNITS.UNIT_ID = MACHINES.UNIT_ID)
  `

  const conditions: string[] = []
  conditions.push(`MACHINES.ID = :MACHINE_ID`)
  if (qPars.CLIENT_ID !== undefined) { conditions.push(`CLUNITS.CLIENT_ID = :CLIENT_ID`) }
  sentence += ' WHERE ' + conditions.join(' AND ')

  return sqldb.querySingle<{
    CLIENT_ID: number
    UNIT_ID: number
  }>(sentence, qPars)
}

export const selectDevAutMachine = `
  (SELECT 
    CASE
        WHEN DAMS_AUTOMATIONS.ID IS NOT NULL THEN DEVICES_1.DEVICE_CODE
        WHEN DUTS_AUTOMATION.ID IS NOT NULL THEN DEVICES_2.DEVICE_CODE
        WHEN DACS_AUTOMATIONS.ID IS NOT NULL THEN DEVICES_3.DEVICE_CODE
        WHEN DRIS_AUTOMATIONS.ID IS NOT NULL THEN DEVICES_4.DEVICE_CODE
        ELSE NULL
    END AS DEV_AUT
  FROM
    MACHINES MACHINES2
    LEFT JOIN DAMS_AUTOMATIONS ON (MACHINES2.ID = DAMS_AUTOMATIONS.MACHINE_ID)
    LEFT JOIN DAMS_DEVICES ON (DAMS_DEVICES.ID = DAMS_AUTOMATIONS.DAM_DEVICE_ID)
    LEFT JOIN DEVICES DEVICES_1 ON (DEVICES_1.ID = DAMS_DEVICES.DEVICE_ID)
    LEFT JOIN DUTS_AUTOMATION ON (MACHINES2.ID = DUTS_AUTOMATION.MACHINE_ID)
    LEFT JOIN DUTS_DEVICES ON (DUTS_DEVICES.ID = DUTS_AUTOMATION.DUT_DEVICE_ID)
    LEFT JOIN DEVICES DEVICES_2 ON (DEVICES_2.ID = DUTS_DEVICES.DEVICE_ID)
    LEFT JOIN DACS_AUTOMATIONS ON (MACHINES2.ID = DACS_AUTOMATIONS.MACHINE_ID)
    LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = DACS_AUTOMATIONS.DAC_DEVICE_ID)
    LEFT JOIN DEVICES DEVICES_3 ON (DEVICES_3.ID = DACS_DEVICES.DEVICE_ID)
    LEFT JOIN DRIS_AUTOMATIONS ON (MACHINES2.ID = DRIS_AUTOMATIONS.MACHINE_ID)
    LEFT JOIN DRIS_DEVICES ON (DRIS_DEVICES.ID = DRIS_AUTOMATIONS.DRI_DEVICE_ID)
    LEFT JOIN DEVICES DEVICES_4 ON (DEVICES_4.ID = DRIS_DEVICES.DEVICE_ID)
  WHERE MACHINES2.ID = MACHINES.ID
  )
  `;

export const selectDutIdMachine = `
  (
    SELECT
      DEVICES.DEVICE_CODE AS DUT_ID
    FROM 
      DUTS_REFERENCE
      LEFT JOIN DUTS_MONITORING ON(DUTS_MONITORING.ID = DUTS_REFERENCE.DUT_MONITORING_ID)
      LEFT JOIN DUTS_DEVICES ON (DUTS_DEVICES.ID = DUTS_MONITORING.DUT_DEVICE_ID)
      LEFT JOIN DEVICES ON (DEVICES.ID = DUTS_DEVICES.DEVICE_ID)
    WHERE DUTS_REFERENCE.MACHINE_ID = MACHINES.ID
  )
  `;

export const selectedDutDuoIdMachineFancoil = `
  (
    SELECT 
      DEVICES.DEVICE_CODE AS DUT_ID
    FROM
      DUTS_DUO
      INNER JOIN DUTS_DUO_ASSET_HEAT_EXCHANGERS ON (DUTS_DUO_ASSET_HEAT_EXCHANGERS.DUT_DUO_ID = DUTS_DUO.ID)
      INNER JOIN DUTS_DEVICES ON (DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID)
      INNER JOIN DEVICES ON (DEVICES.ID = DUTS_DEVICES.DEVICE_ID)
      INNER JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DUTS_DUO_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      INNER JOIN  MACHINES ON MACHINES.ID = ASSET_HEAT_EXCHANGERS.MACHINE_ID
      WHERE MACHINES.APPLICATION = 'fancoil' AND MACHINES.ID = MACHINES.ID
  )
`;

export function getMachinesAutInfo2(qPars: {
  CLIENT_IDS?: number[],
  stateIds?: string[],
  cityIds?: string[],
  unitIds?: number[],
  INCLUDE_INSTALLATION_UNIT?: boolean
}, admPars: {
  extraInfo?: boolean
}) {
  let sentence = `
    SELECT
      MACHINES.ID AS MACHINE_ID,
      ${selectDevAutMachine} as DEV_AUT,
      ${selectDutIdMachine} as DUT_ID,
      CASE 
        WHEN DACS_DEVICES.ID IS NOT NULL THEN DEVICES_DAC.DEVICE_CODE
        ELSE NULL
      END AS DAM_AS_DAC,
      DEVICES_DUT.DEVICE_CODE AS DUT_AS_DUTAUT,
      COALESCE(DUTS_AUTOMATION.DISAB, 1) AS DUT_AUT_DISABLED,
      CASE WHEN DAMS_AUTOMATIONS.ID IS NOT NULL OR DACS_AUTOMATIONS.ID IS NOT NULL THEN CURRENT_AUTOMATIONS_PARAMETERS.LAST_PROG ELSE NULL END AS LASTPROG_DAM,
      CASE WHEN DUTS_AUTOMATION.ID IS NOT NULL THEN CURRENT_AUTOMATIONS_PARAMETERS.LAST_PROG ELSE NULL END AS LASTPROG_DUT,
      CASE WHEN DAMS_AUTOMATIONS.ID IS NOT NULL THEN CURRENT_AUTOMATIONS_PARAMETERS.ENABLE_ECO ELSE NULL END AS ENABLE_ECO_DAM,
      CASE WHEN DAMS_AUTOMATIONS.ID IS NOT NULL OR DACS_AUTOMATIONS.ID IS NOT NULL THEN CURRENT_AUTOMATIONS_PARAMETERS.SELF_REFERENCE ELSE NULL END DAM_SELF_REFERENCE,
      CASE WHEN DUTS_AUTOMATION.ID IS NOT NULL THEN CURRENT_AUTOMATIONS_PARAMETERS.MODE ELSE NULL END AS DUT_AUT_CTRLOPER,
      DAMS_DEVICES.CAN_SELF_REFERENCE
  `
  if (admPars.extraInfo) { sentence += ' ,CLUNITS.UNIT_NAME ' }
  sentence += `
    FROM
      MACHINES
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = MACHINES.UNIT_ID)
      LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = CLUNITS.CLIENT_ID)
      LEFT JOIN DAMS_AUTOMATIONS ON (DAMS_AUTOMATIONS.MACHINE_ID = MACHINES.ID)
      LEFT JOIN DAMS_DEVICES ON (DAMS_DEVICES.ID = DAMS_AUTOMATIONS.DAM_DEVICE_ID)
      LEFT JOIN DEVICES DEVICES_DAM ON (DEVICES_DAM.ID = DAMS_DEVICES.DEVICE_ID)
      LEFT JOIN DACS_AUTOMATIONS ON (DACS_AUTOMATIONS.MACHINE_ID = MACHINES.ID)
      LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = DACS_AUTOMATIONS.DAC_DEVICE_ID)
      LEFT JOIN DEVICES DEVICES_DAC ON (DEVICES_DAC.ID = DACS_DEVICES.DEVICE_ID)
      LEFT JOIN DUTS_REFERENCE ON (DUTS_REFERENCE.MACHINE_ID = MACHINES.ID)
      LEFT JOIN DUTS_MONITORING ON (DUTS_MONITORING.ID = DUTS_REFERENCE.DUT_MONITORING_ID)
      LEFT JOIN DUTS_AUTOMATION ON (DUTS_AUTOMATION.DUT_DEVICE_ID = DUTS_MONITORING.DUT_DEVICE_ID)
      LEFT JOIN DUTS_DEVICES ON (DUTS_DEVICES.ID = DUTS_MONITORING.DUT_DEVICE_ID)
      LEFT JOIN DEVICES DEVICES_DUT ON (DEVICES_DUT.ID = DUTS_DEVICES.DEVICE_ID)
      LEFT JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID = MACHINES.ID)
      LEFT JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (CURRENT_AUTOMATIONS_PARAMETERS.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)
  `
  if (qPars.stateIds) {
    sentence += ` 
    INNER JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID) 
    LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
    `
  }

  const conditions: string[] = []
  if (qPars.CLIENT_IDS) { conditions.push(`CLIENTS.CLIENT_ID IN (:CLIENT_IDS)`) }
  if (qPars.stateIds) { conditions.push(`STATEREGION.ID IN (:stateIds)`) }
  if (qPars.cityIds) { conditions.push(`CLUNITS.CITY_ID IN (:cityIds)`) }
  if (qPars.unitIds) { conditions.push(`CLUNITS.UNIT_ID IN (:unitIds)`) }
  if (qPars.INCLUDE_INSTALLATION_UNIT === false) {
    conditions.push(`CLUNITS.PRODUCTION = 1`)
  }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    MACHINE_ID: number
    DUT_ID: string
    DEV_AUT: string
    DAM_AS_DAC: string
    DUT_AS_DUTAUT: string
    DUT_AUT_DISABLED: number
    LASTPROG_DAM: string
    LASTPROG_DUT: string
    ENABLE_ECO_DAM: number
    DAM_SELF_REFERENCE: number
    DUT_AUT_CTRLOPER: ControlMode
    UNIT_NAME?: string
    CAN_SELF_REFERENCE: number
  }>(sentence, qPars)
}

export function getMachinesDamDacAutInfo (qPars: {
  CLIENT_IDS?: number[],
  unitIds?: number[],
}) {
  let sentence = `
    SELECT 
      MACHINES.ID AS MACHINE_ID,
      DEVICES_AUTO.DEVICE_CODE AS DEV_AUT,
      DEVICES_REF.DEVICE_CODE AS DUT_ID,
      CURRENT_AUTOMATIONS_PARAMETERS.SELF_REFERENCE AS DAM_SELF_REFERENCE
    FROM
      MACHINES
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = MACHINES.UNIT_ID)
      LEFT JOIN DAMS_AUTOMATIONS ON (DAMS_AUTOMATIONS.MACHINE_ID = MACHINES.ID)
      LEFT JOIN DACS_AUTOMATIONS ON (DACS_AUTOMATIONS.MACHINE_ID = MACHINES.ID)
      LEFT JOIN DAMS_DEVICES ON (DAMS_DEVICES.ID = DAMS_AUTOMATIONS.DAM_DEVICE_ID)
      LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = DACS_AUTOMATIONS.DAC_DEVICE_ID)
      LEFT JOIN DEVICES DEVICES_AUTO ON (DEVICES_AUTO.ID = COALESCE(DAMS_DEVICES.DEVICE_ID, DACS_DEVICES.DEVICE_ID))
      LEFT JOIN DUTS_REFERENCE ON (DUTS_REFERENCE.MACHINE_ID = MACHINES.ID)
      LEFT JOIN DUTS_MONITORING ON (DUTS_MONITORING.ID = DUTS_REFERENCE.DUT_MONITORING_ID)
      LEFT JOIN DUTS_DEVICES ON (DUTS_DEVICES.ID = DUTS_MONITORING.DUT_DEVICE_ID)
      LEFT JOIN DEVICES DEVICES_REF ON (DEVICES_REF.ID = DUTS_DEVICES.DEVICE_ID)
      LEFT JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID = MACHINES.ID)
      LEFT JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (CURRENT_AUTOMATIONS_PARAMETERS.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)
    `;
    const conditions: string[] = []
    conditions.push(`DAMS_AUTOMATIONS.ID IS NOT NULL OR DACS_AUTOMATIONS.ID IS NOT NULL `);
    if (qPars.CLIENT_IDS) { conditions.push(`CLUNITS.CLIENT_ID IN (:CLIENT_IDS)`) }
    if (qPars.unitIds) { conditions.push(`CLUNITS.UNIT_ID IN (:unitIds)`) }
    if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }


    return sqldb.query<{
      MACHINE_ID: number
      DUT_ID: string
      DEV_AUT: string
      DAM_SELF_REFERENCE: number
      CAN_SELF_REFERENCE: number
  }>(sentence, qPars)
}
export function getAutMachineInfo(qPars: { UNIT_IDS: number[] }) {
  let sentence = `
    SELECT
      MACHINES.ID AS MACHINE_ID,
      MACHINES.NAME AS MACHINE_NAME,
      CLUNITS.UNIT_ID,
      ${selectDevAutMachine} as DEV_AUT,
      ${selectDutIdMachine} as DUT_ID,
      COALESCE(DAMS_DEVICES.DISAB, DACS_AUTOMATIONS.DISAB) AS DAM_DISABLED,
      CASE 
        WHEN DACS_DEVICES.ID IS NOT NULL THEN DEVICES_DAC.DEVICE_CODE
        ELSE NULL
      END AS DAM_AS_DAC,
      DEVICES_DUT.DEVICE_CODE AS DUT_AS_DUTAUT,
      COALESCE(DUTS_AUTOMATION.DISAB, 1) AS DUT_AUT_DISABLED,
      CURRENT_AUTOMATIONS_PARAMETERS.PORT_CFG AS PORTCFG
  `
  sentence += `
  FROM
    MACHINES
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = MACHINES.UNIT_ID)
      LEFT JOIN DAMS_AUTOMATIONS ON (DAMS_AUTOMATIONS.MACHINE_ID = MACHINES.ID)
      LEFT JOIN DAMS_DEVICES ON (DAMS_DEVICES.ID = DAMS_AUTOMATIONS.DAM_DEVICE_ID)
      LEFT JOIN DEVICES DEVICES_DAM ON (DEVICES_DAM.ID = DAMS_DEVICES.DEVICE_ID)
      LEFT JOIN DACS_AUTOMATIONS ON (DACS_AUTOMATIONS.MACHINE_ID = MACHINES.ID)
      LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = DACS_AUTOMATIONS.DAC_DEVICE_ID)
      LEFT JOIN DEVICES DEVICES_DAC ON (DEVICES_DAC.ID = DACS_DEVICES.DEVICE_ID)
      LEFT JOIN DUTS_REFERENCE ON (DUTS_REFERENCE.MACHINE_ID = MACHINES.ID)
      LEFT JOIN DUTS_MONITORING ON (DUTS_MONITORING.ID = DUTS_REFERENCE.DUT_MONITORING_ID)
      LEFT JOIN DUTS_AUTOMATION ON (DUTS_AUTOMATION.DUT_DEVICE_ID = DUTS_MONITORING.DUT_DEVICE_ID)
      LEFT JOIN DUTS_DEVICES ON (DUTS_DEVICES.ID = DUTS_MONITORING.DUT_DEVICE_ID)
      LEFT JOIN DEVICES DEVICES_DUT ON (DEVICES_DUT.ID = DUTS_DEVICES.DEVICE_ID)
      LEFT JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID = DUTS_AUTOMATION.MACHINE_ID)
      LEFT JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (CURRENT_AUTOMATIONS_PARAMETERS.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)
 `

  sentence += ` WHERE CLUNITS.UNIT_ID IN (:UNIT_IDS) `

  return sqldb.query<{
    DEV_AUT: string
    PORTCFG: string
    MACHINE_ID: number
    MACHINE_NAME: string
    UNIT_ID: number
    DUT_ID: string
    DAM_DISABLED: number
    DAM_AS_DAC: string
    DUT_AS_DUTAUT: string
    DUT_AUT_DISABLED: number
  }>(sentence, qPars)
}

export function getMachinesAutInfo(qPars: { CLIENT_IDS?: number[], LAST_CFG_MODIF?: string }) {
  let sentence = `
    SELECT
      MACHINES.ID AS GROUP_ID,
      MACHINES.NAME AS GROUP_NAME,
      CLUNITS.UNIT_ID,
      CLIENTS.CLIENT_ID,
      ${selectDutIdMachine} as DUT_ID,
      ${selectDevAutMachine} as DEV_AUT,
      DAMS_DEVICES.DISAB AS DAM_DISABLED,
      CASE WHEN DACS_DEVICES.DEVICE_ID IS NOT NULL THEN DEVICES_DAC.DEVICE_CODE ELSE NULL END AS DAM_AS_DAC,
      DEVICES_DUT.DEVICE_CODE AS DUT_AS_DUTAUT,
      COALESCE(DUTS_AUTOMATION.DISAB, 1) AS DUT_AUT_DISABLED,
      CLIENTS.NAME AS CLIENT_NAME,
      CLUNITS.UNIT_NAME,
      ROOMTYPES.TUSEMIN,
      ROOMTYPES.TUSEMAX,
      ROOMTYPES.USEPERIOD,
      DEVICES_DUT.LAST_CFG_MODIF,
      CURRENT_AUTOMATIONS_PARAMETERS.SETPOINT,
      MACHINES.APPLICATION
  `
  sentence += `
    FROM
      MACHINES
      LEFT JOIN REFRIGERATES ON (REFRIGERATES.MACHINE_ID = MACHINES.ID)
      LEFT JOIN ENVIRONMENTS ON (ENVIRONMENTS.ID = REFRIGERATES.ENVIRONMENT_ID)
      LEFT JOIN ENVIRONMENTS_ROOM_TYPES ON (ENVIRONMENTS_ROOM_TYPES.ENVIRONMENT_ID = REFRIGERATES.ENVIRONMENT_ID)
      LEFT JOIN ROOMTYPES ON (ROOMTYPES.RTYPE_ID = ENVIRONMENTS_ROOM_TYPES.RTYPE_ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = MACHINES.UNIT_ID)
      LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = CLUNITS.CLIENT_ID)
      LEFT JOIN DAMS_AUTOMATIONS ON (DAMS_AUTOMATIONS.MACHINE_ID = MACHINES.ID)
      LEFT JOIN DAMS_DEVICES ON (DAMS_DEVICES.ID = DAMS_AUTOMATIONS.DAM_DEVICE_ID)
      LEFT JOIN DEVICES DEVICES_DAM ON (DEVICES_DAM.ID = DAMS_DEVICES.DEVICE_ID)
      LEFT JOIN DACS_AUTOMATIONS ON (DACS_AUTOMATIONS.MACHINE_ID = MACHINES.ID)
      LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = DACS_AUTOMATIONS.DAC_DEVICE_ID)
      LEFT JOIN DEVICES DEVICES_DAC ON (DEVICES_DAC.ID = DACS_DEVICES.DEVICE_ID)
      LEFT JOIN DUTS_REFERENCE ON (DUTS_REFERENCE.MACHINE_ID = MACHINES.ID)
      LEFT JOIN DUTS_MONITORING ON (DUTS_MONITORING.ID = DUTS_REFERENCE.DUT_MONITORING_ID)
      LEFT JOIN DUTS_AUTOMATION ON (DUTS_AUTOMATION.DUT_DEVICE_ID = DUTS_MONITORING.DUT_DEVICE_ID)
      LEFT JOIN DUTS_DEVICES ON (DUTS_DEVICES.ID = DUTS_MONITORING.DUT_DEVICE_ID)
      LEFT JOIN DEVICES DEVICES_DUT ON (DEVICES_DUT.ID = DUTS_DEVICES.DEVICE_ID)
      LEFT JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID = DUTS_AUTOMATION.MACHINE_ID)
      LEFT JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (CURRENT_AUTOMATIONS_PARAMETERS.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)
  `

  const conditions: string[] = []
  if (qPars.CLIENT_IDS) { conditions.push(`CLIENTS.CLIENT_ID IN (:CLIENT_IDS)`) }
  if (qPars.LAST_CFG_MODIF) { conditions.push(`DEVICES_DUT.LAST_CFG_MODIF >= :LAST_CFG_MODIF`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    GROUP_ID: number
    GROUP_NAME: string
    UNIT_ID: number
    CLIENT_ID: number
    DUT_ID: string
    DEV_AUT: string
    DAM_DISABLED: number
    DAM_AS_DAC: string
    DUT_AS_DUTAUT: string
    DUT_AUT_DISABLED: number
    CLIENT_NAME: string
    UNIT_NAME: string
    TUSEMIN: number
    TUSEMAX: number
    USEPERIOD: string
    SETPOINT: number
    LAST_CFG_MODIF: string
    APPLICATION: string
  }>(sentence, qPars)
}

export function checkConsistency_AUTOM() {
  let sentence = `
    SELECT
      MACHINES.ID AS MACHINE_ID
  `
  sentence += `
    FROM
      MACHINES
      LEFT JOIN DUTS_AUTOMATION ON (DUTS_AUTOMATION.MACHINE_ID = MACHINES.ID)
      LEFT JOIN DAMS_AUTOMATIONS ON (DAMS_AUTOMATIONS.MACHINE_ID = MACHINES.ID)
      LEFT JOIN DAMS_DEVICES ON (DAMS_DEVICES.ID = DAMS_AUTOMATIONS.DAM_DEVICE_ID)
      LEFT JOIN DACS_AUTOMATIONS ON (DACS_AUTOMATIONS.MACHINE_ID = MACHINES.ID)
  `

  const conditions: string[] = []
  conditions.push(`(DUTS_AUTOMATION.ID IS NOT NULL AND (DUTS_AUTOMATION.DISAB <> 1 OR DUTS_AUTOMATION.DISAB IS NULL))`)
  conditions.push(`((DAMS_DEVICES.ID IS NOT NULL AND (DAMS_DEVICES.DISAB <> 1 OR DAMS_DEVICES.DISAB IS NULL)) OR (DACS_AUTOMATIONS.ID IS NOT NULL AND (DACS_AUTOMATIONS.DISAB <> 1 OR DACS_AUTOMATIONS.DISAB IS NULL)))`)
  sentence += ' WHERE ' + conditions.join(' AND ')

  return sqldb.query<{
    MACHINE_ID: number
  }>(sentence)
}

export function getMachineAutInfo(qPars: { MACHINE_ID: number }) {
  let sentence = `
    SELECT
      MACHINES.ID AS MACHINE_ID,
      MACHINES.NAME AS MACHINE_NAME,
      CLUNITS.CLIENT_ID,
      CLUNITS.UNIT_ID,
      ${selectDevAutMachine} as DEV_AUT,
      ${selectDutIdMachine} as DUT_ID,
      DAMS_DEVICES.DISAB AS DAM_DISABLED,
      CASE WHEN DACS_DEVICES.DEVICE_ID IS NOT NULL THEN DEVICES_DAC.DEVICE_CODE ELSE NULL END AS DAM_AS_DAC,
      DEVICES_DUT.DEVICE_CODE AS DUT_AS_DUTAUT,
      COALESCE(DUTS_AUTOMATION.DISAB, 1) AS DUT_AUT_DISABLED,
      ROOMTYPES.TUSEMIN,
      ROOMTYPES.TUSEMAX
  `
  sentence += `
    FROM
      MACHINES
      LEFT JOIN REFRIGERATES ON (REFRIGERATES.MACHINE_ID = MACHINES.ID)
      LEFT JOIN ENVIRONMENTS ON (ENVIRONMENTS.ID = REFRIGERATES.ENVIRONMENT_ID)
      LEFT JOIN ENVIRONMENTS_ROOM_TYPES ON (ENVIRONMENTS_ROOM_TYPES.ENVIRONMENT_ID = REFRIGERATES.ENVIRONMENT_ID)
      LEFT JOIN ROOMTYPES ON (ROOMTYPES.RTYPE_ID = ENVIRONMENTS_ROOM_TYPES.RTYPE_ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = MACHINES.UNIT_ID)
      LEFT JOIN DAMS_AUTOMATIONS ON (DAMS_AUTOMATIONS.MACHINE_ID = MACHINES.ID)
      LEFT JOIN DAMS_DEVICES ON (DAMS_DEVICES.ID = DAMS_AUTOMATIONS.DAM_DEVICE_ID)
      LEFT JOIN DEVICES DEVICES_DAM ON (DEVICES_DAM.ID = DAMS_DEVICES.DEVICE_ID)
      LEFT JOIN DACS_AUTOMATIONS ON (DACS_AUTOMATIONS.MACHINE_ID = MACHINES.ID)
      LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = DACS_AUTOMATIONS.DAC_DEVICE_ID)
      LEFT JOIN DEVICES DEVICES_DAC ON (DEVICES_DAC.ID = DACS_DEVICES.DEVICE_ID)
      LEFT JOIN DUTS_REFERENCE ON (DUTS_REFERENCE.MACHINE_ID = MACHINES.ID)
      LEFT JOIN DUTS_MONITORING ON (DUTS_MONITORING.ID = DUTS_REFERENCE.DUT_MONITORING_ID)
      LEFT JOIN DUTS_AUTOMATION ON (DUTS_AUTOMATION.DUT_DEVICE_ID = DUTS_MONITORING.DUT_DEVICE_ID)
      LEFT JOIN DUTS_DEVICES ON (DUTS_DEVICES.ID = DUTS_MONITORING.DUT_DEVICE_ID)
      LEFT JOIN DEVICES DEVICES_DUT ON (DEVICES_DUT.ID = DUTS_DEVICES.DEVICE_ID)
      LEFT JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID = DUTS_AUTOMATION.MACHINE_ID)
      LEFT JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (CURRENT_AUTOMATIONS_PARAMETERS.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)

  `

  sentence += ` WHERE MACHINES.ID = :MACHINE_ID `

  return sqldb.queryFirst<{
    MACHINE_ID: number
    MACHINE_NAME: string
    CLIENT_ID: number
    UNIT_ID: number
    DEV_AUT: string
    DUT_ID: string
    DAM_DISABLED: number
    DAM_AS_DAC: string
    DUT_AS_DUTAUT: string
    DUT_AUT_DISABLED: number
    TUSEMIN: number
    TUSEMAX: number
  }>(sentence, qPars)
}

export function getGroupsAutInfo2 (qPars: {
  CLIENT_IDS?: number[],
  stateIds?: string[],
  cityIds?: string[],
  unitIds?: number[],
}, admPars: {
  extraInfo?: boolean
}) {
  let sentence = `
    SELECT
      MACHINES.ID AS GROUP_ID,
      ${selectDevAutMachine} AS DEV_AUT,
      ${selectDutIdMachine} as DUT_ID,
      (CASE WHEN DACS_AUTOMATIONS.ID IS NOT NULL THEN DEVICES.DEVICE_CODE ELSE NULL END) AS DAM_AS_DAC,
      (CASE WHEN DUTS_AUTOMATION.ID IS NOT NULL THEN DEVICES.DEVICE_CODE ELSE NULL END) AS DUT_AS_DUTAUT,
      DACS_AUTOMATIONS.DISAB AS DUT_AUT_DISABLED,
      (CASE WHEN DAMS_AUTOMATIONS.ID IS NOT NULL THEN CURRENT_AUTOMATIONS_PARAMETERS.LAST_PROG ELSE NULL END) AS LASTPROG_DAM,
      (CASE WHEN DUTS_AUTOMATION.ID IS NOT NULL THEN CURRENT_AUTOMATIONS_PARAMETERS.LAST_PROG ELSE NULL END) AS LASTPROG_DUT,
      (CASE WHEN DAMS_AUTOMATIONS.ID IS NOT NULL THEN CURRENT_AUTOMATIONS_PARAMETERS.ENABLE_ECO ELSE NULL END) AS ENABLE_ECO_DAM,
      (CASE WHEN DAMS_AUTOMATIONS.ID IS NOT NULL THEN CURRENT_AUTOMATIONS_PARAMETERS.SELF_REFERENCE ELSE NULL END)AS DAM_SELF_REFERENCE,
      (CASE WHEN DUTS_AUTOMATION.ID IS NOT NULL THEN CURRENT_AUTOMATIONS_PARAMETERS.MODE ELSE NULL END) AS DUT_AUT_CTRLOPER
  `
  if (admPars.extraInfo) { sentence += ' ,CLUNITS.UNIT_NAME ' }
  sentence += `
    FROM
      MACHINES
      LEFT JOIN DAMS_AUTOMATIONS ON (DAMS_AUTOMATIONS.MACHINE_ID = MACHINES.ID)
      LEFT JOIN DAMS_DEVICES ON (DAMS_DEVICES.ID = DAMS_AUTOMATIONS.DAM_DEVICE_ID)
      LEFT JOIN DACS_AUTOMATIONS ON (DACS_AUTOMATIONS.MACHINE_ID = MACHINES.ID)
      LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = DACS_AUTOMATIONS.DAC_DEVICE_ID)
      LEFT JOIN DUTS_AUTOMATION ON (DUTS_AUTOMATION.MACHINE_ID = MACHINES.ID)
      LEFT JOIN DUTS_MONITORING ON (DUTS_AUTOMATION.DUT_DEVICE_ID = DUTS_MONITORING.DUT_DEVICE_ID)
      LEFT JOIN DUTS_DEVICES ON (DUTS_DEVICES.ID = DUTS_AUTOMATION.DUT_DEVICE_ID)
      LEFT JOIN ENVIRONMENTS ON (ENVIRONMENTS.ID = DUTS_MONITORING.ENVIRONMENT_ID)
      LEFT JOIN ENVIRONMENTS_ROOM_TYPES ON (ENVIRONMENTS_ROOM_TYPES.ENVIRONMENT_ID = ENVIRONMENTS.ID)
      LEFT JOIN ROOMTYPES ON (ROOMTYPES.RTYPE_ID = ENVIRONMENTS_ROOM_TYPES.RTYPE_ID)
      LEFT JOIN DEVICES ON (DEVICES.ID = COALESCE(COALESCE(DAMS_DEVICES.DEVICE_ID, DACS_DEVICES.DEVICE_ID),DUTS_DEVICES.DEVICE_ID))
      INNER JOIN DUTS_REFERENCE ON (DUTS_REFERENCE.MACHINE_ID = MACHINES.ID)
      INNER JOIN DUTS_MONITORING DUT_MON_REF ON (DUT_MON_REF.ID = DUTS_REFERENCE.DUT_MONITORING_ID)
      INNER JOIN DUTS_DEVICES DUT_DEVICES_REF ON (DUT_DEVICES_REF.ID = DUT_MON_REF.DUT_DEVICE_ID)
      INNER JOIN DEVICES DEVICES_REF ON (DEVICES_REF.ID = DUT_DEVICES_REF.DEVICE_ID)
      LEFT JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID = MACHINES.ID)
      LEFT JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (CURRENT_AUTOMATIONS_PARAMETERS.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)
      INNER JOIN CLUNITS ON (CLUNITS.UNIT_ID = ENVIRONMENTS.UNIT_ID)
  `
  if (qPars.stateIds) { sentence += ` 
    INNER JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID) 
    LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
    `
    }

  const conditions: string[] = []
  if (qPars.CLIENT_IDS) { conditions.push(`CLUNITS.CLIENT_ID IN (:CLIENT_IDS)`) }
  if (qPars.stateIds) { conditions.push(`STATEREGION.ID IN (:stateIds)`) }
  if (qPars.cityIds) { conditions.push(`CLUNITS.CITY_ID IN (:cityIds)`) }
  if (qPars.unitIds) { conditions.push(`CLUNITS.UNIT_ID IN (:unitIds)`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    GROUP_ID: number
    DUT_ID: string
    DEV_AUT: string
    DAM_AS_DAC: string
    DUT_AS_DUTAUT: string
    DUT_AUT_DISABLED: number
    LASTPROG_DAM: string
    LASTPROG_DUT: string
    ENABLE_ECO_DAM: number
    DAM_SELF_REFERENCE: number
    DUT_AUT_CTRLOPER: ControlMode
    UNIT_NAME?: string
  }>(sentence, qPars)
}

export function getAutDamProg (qPars: {
  GROUP_ID: number
}) {
  let sentence = `
    SELECT
      MACHINES.ID AS GROUP_ID,
      ${selectDevAutMachine} AS DEV_AUT,
      CURRENT_AUTOMATIONS_PARAMETERS.LAST_PROG AS LASTPROG_DAM,
      CURRENT_AUTOMATIONS_PARAMETERS.SELF_REFERENCE AS DAM_SELF_REFERENCE,
      DAMS_DEVICES.DISAB AS DAM_DISABLED
  `
  sentence += `
    FROM
      MACHINES
      LEFT JOIN DAMS_AUTOMATIONS ON (DAMS_AUTOMATIONS.MACHINE_ID = MACHINES.ID)
      LEFT JOIN DAMS_DEVICES ON (DAMS_DEVICES.ID = DAMS_AUTOMATIONS.DAM_DEVICE_ID)
      LEFT JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID = DAMS_AUTOMATIONS.MACHINE_ID)
      LEFT JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (CURRENT_AUTOMATIONS_PARAMETERS.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)
  `

  const conditions: string[] = []
  conditions.push(`MACHINES.ID = :GROUP_ID`)
  sentence += ' WHERE ' + conditions.join(' AND ')

  return sqldb.querySingle<{
    GROUP_ID: number
    DEV_AUT: string
    LASTPROG_DAM: string
    DAM_SELF_REFERENCE: number
    DAM_DISABLED: number
  }>(sentence, qPars)
}

export function getMachineIdByUnitId (qPars: {
  UNIT_ID: number
}) {
  let sentence = `
    SELECT
      MACHINES.ID AS MACHINE_ID
  `
  sentence += `
    FROM
      MACHINES
      INNER JOIN CLUNITS ON (CLUNITS.UNIT_ID = MACHINES.UNIT_ID)`

  sentence += ` WHERE CLUNITS.UNIT_ID = :UNIT_ID `


  return sqldb.query<{
    MACHINE_ID: number

  }>(sentence, qPars)
}

export function getMachineRatedPower(qPars: { MACHINE_ID: number }) {
  let sentence = `
    SELECT
      MACHINES.RATED_POWER
  `
  sentence += `
    FROM
      MACHINES
  `
  sentence += ` WHERE MACHINES.ID = :MACHINE_ID`

  return sqldb.querySingle<{
    RATED_POWER: number
  }>(sentence, qPars)
}

function order(typeOrdered: string) {
  return `CLIENTS.NAME ${typeOrdered}, STATEREGION.NAME ${typeOrdered}, CITY.NAME ${typeOrdered}, CLUNITS.UNIT_NAME ${typeOrdered}, MACHINES.NAME ${typeOrdered}, TYPE.OPT_LABEL ${typeOrdered}`; 
}

function returnOrdered(name: string, typeOrdered: string) {
  switch (name) {
    case 'CLIENT_NAME':
      return `ORDER BY ${order(typeOrdered)}`;
    case 'STATE_NAME':
      return `ORDER BY STATEREGION.NAME ${typeOrdered}, CLIENTS.NAME ${typeOrdered}, CITY.NAME ${typeOrdered}, CLUNITS.UNIT_NAME ${typeOrdered}, MACHINES.NAME ${typeOrdered}, TYPE.OPT_LABEL ${typeOrdered}`;
    case 'CITY_NAME':
      return `ORDER BY CITY.NAME ${typeOrdered}, CLIENTS.NAME ${typeOrdered}, STATEREGION.NAME ${typeOrdered}, CLUNITS.UNIT_NAME ${typeOrdered}, MACHINES.NAME ${typeOrdered}, TYPE.OPT_LABEL ${typeOrdered}`;
    case 'UNIT_NAME':
      return `ORDER BY CLUNITS.UNIT_NAME ${typeOrdered}, CLIENTS.NAME ${typeOrdered}, STATEREGION.NAME ${typeOrdered}, CITY.NAME ${typeOrdered}, MACHINES.NAME ${typeOrdered}, TYPE.OPT_LABEL ${typeOrdered}`;
    case 'MACHINE_NAME':
      return `ORDER BY MACHINES.NAME ${typeOrdered}, CLIENTS.NAME ${typeOrdered}, STATEREGION.NAME ${typeOrdered}, CITY.NAME ${typeOrdered}, CLUNITS.UNIT_NAME ${typeOrdered}, TYPE.OPT_LABEL ${typeOrdered}`;
    case 'tipoMaquina':
      return `ORDER BY MACHINES.TYPE ${typeOrdered}, ${order(typeOrdered)}`;
    case 'STATE':
      return `ORDER BY CURRENT_DEVICE_STATE.STATE ${typeOrdered}, ${order(typeOrdered)}`;
    case 'SETPOINT':
      return `ORDER BY CURRENT_AUTOMATIONS_PARAMETERS.SETPOINT ${typeOrdered}, ${order(typeOrdered)}`;
    case 'TEMPERATURE':
      return `ORDER BY CURRENT_DEVICE_STATE.TEMPERATURE ${typeOrdered}, ${order(typeOrdered)}`;
    case 'TEMPERATURE1':
      return `ORDER BY CURRENT_DEVICE_STATE.TEMPERATURE1 ${typeOrdered}, ${order(typeOrdered)}`;
    case 'DEV_AUT':
      return `ORDER BY DEVICES.DEVICE_CODE ${typeOrdered}, ${order(typeOrdered)}`;
    case 'MODE':
      return `ORDER BY CURRENT_AUTOMATIONS_PARAMETERS.MODE ${typeOrdered}, ${order(typeOrdered)}`;
    case 'ENABLE_ECO':
      return `ORDER BY CURRENT_AUTOMATIONS_PARAMETERS.ENABLE_ECO ${typeOrdered}, ${order(typeOrdered)}`;
    case 'TOTAL_DEV_COUNT':
      return `ORDER BY TOTAL_DEV_COUNT ${typeOrdered}, ${order(typeOrdered)}`;
    case 'conexao':
      return `ORDER BY CURRENT_DEVICE_STATE.STATE_CONN ${typeOrdered}, ${order(typeOrdered)}`;
    case 'MCHN_BRAND':
      return `ORDER BY MACHINES.BRAND ${typeOrdered}, ${order(typeOrdered)}`;
    case 'MODEL':
      return `ORDER BY ASSETS.MODEL ${typeOrdered}, ${order(typeOrdered)}`;
    case 'TOTAL_CAPACITY_CONDENSER':
      return `ORDER BY TOTAL_CAPACITY_CONDENSER ${typeOrdered}, ${order(typeOrdered)}`;
    case 'RATED_POWER':
      return `ORDER BY MACHINES.RATED_POWER ${typeOrdered}, ${order(typeOrdered)}`;
    default:
      return `ORDER BY ${order(typeOrdered)}`;
  }
}

function returnFilterCTEAnalisys(machineIds: number[], nameTable: string) {
  const filterTable = nameTable === 'MACHINES' ? 'MACHINES.ID' : `${nameTable}.MACHINE_ID`;
  const filterCTEs = machineIds?.length ? `WHERE ${filterTable} IN (:machineIds)` : '';
  return filterCTEs;
}

export function getMachinesInfoAnalysis(qPars: {
  clientIds?: number[],
  stateIds?: number[],
  cityIds?: string[],
  unitIds?: number[],
  machineIds?: number[],
  machinesTypes?: string[],
  healthIndex?: number[],
  INCLUDE_INSTALLATION_UNIT?: boolean,
  offset?: number
  ordered?: string
  typeOrdered?: string
  operation_modes?: string[],
  onlyAut?: boolean,
  stateDev?: string[],
  tempAmb?: string[],
}) {
const conditions = [];
let sentence = `
WITH Evap_Count AS (
    SELECT 
        EVAPORATORS.MACHINE_ID, 
        DACS_DEVICES.DEVICE_ID
    FROM EVAPORATORS
    INNER JOIN DACS_EVAPORATORS ON DACS_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID
    INNER JOIN DACS_DEVICES on (DACS_DEVICES.ID = DACS_EVAPORATORS.DAC_DEVICE_ID)
    ${returnFilterCTEAnalisys(qPars.machineIds, 'EVAPORATORS')}
    UNION
    SELECT 
        EVAPORATORS.MACHINE_ID, 
        DUTS_DEVICES.DEVICE_ID AS DEVICE_ID
    FROM EVAPORATORS
    INNER JOIN DUTS_DUO_EVAPORATORS ON DUTS_DUO_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID
    INNER JOIN DUTS_DUO ON (DUTS_DUO.ID = DUTS_DUO_EVAPORATORS.DUT_DUO_ID)
    INNER JOIN DUTS_DEVICES on (DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID)
    ${returnFilterCTEAnalisys(qPars.machineIds, 'EVAPORATORS')}
),
Cond_Count AS (
    SELECT 
        CONDENSERS.MACHINE_ID, 
        DACS_DEVICES.DEVICE_ID
    FROM CONDENSERS
    INNER JOIN DACS_CONDENSERS ON DACS_CONDENSERS.CONDENSER_ID = CONDENSERS.ID
    INNER JOIN DACS_DEVICES on (DACS_DEVICES.ID = DACS_CONDENSERS.DAC_DEVICE_ID)
    ${returnFilterCTEAnalisys(qPars.machineIds, 'CONDENSERS')}
    UNION
    SELECT 
        CONDENSERS.MACHINE_ID, 
        DUTS_DEVICES.DEVICE_ID AS DEVICE_ID
    FROM CONDENSERS
    INNER JOIN DUTS_DUO_CONDENSERS ON DUTS_DUO_CONDENSERS.CONDENSER_ID = CONDENSERS.ID
    INNER JOIN DUTS_DUO ON (DUTS_DUO.ID = DUTS_DUO_CONDENSERS.DUT_DUO_ID)
    INNER JOIN DUTS_DEVICES on (DUTS_DEVICES.ID = DUTS_DUO_CONDENSERS.DUT_DUO_ID)
    ${returnFilterCTEAnalisys(qPars.machineIds, 'CONDENSERS')}
),
Heat_Count AS (
    SELECT 
        ASSET_HEAT_EXCHANGERS.MACHINE_ID, 
        DACS_DEVICES.DEVICE_ID
    FROM ASSET_HEAT_EXCHANGERS
    INNER JOIN DACS_ASSET_HEAT_EXCHANGERS ON DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID
    INNER JOIN DACS_DEVICES on (DACS_DEVICES.ID = DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID)
    ${returnFilterCTEAnalisys(qPars.machineIds, 'ASSET_HEAT_EXCHANGERS')}
    UNION
    SELECT 
        ASSET_HEAT_EXCHANGERS.MACHINE_ID, 
        DUTS_DEVICES.DEVICE_ID
    FROM ASSET_HEAT_EXCHANGERS
        INNER JOIN DUTS_DUO_ASSET_HEAT_EXCHANGERS ON DUTS_DUO_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID
        INNER JOIN DUTS_DUO ON (DUTS_DUO.ID = DUTS_DUO_ASSET_HEAT_EXCHANGERS.DUT_DUO_ID)
      INNER JOIN DUTS_DEVICES on (DUTS_DEVICES.ID = DUTS_DUO_ASSET_HEAT_EXCHANGERS.DUT_DUO_ID)
      ${returnFilterCTEAnalisys(qPars.machineIds, 'ASSET_HEAT_EXCHANGERS')}
    UNION
    SELECT 
        ASSET_HEAT_EXCHANGERS.MACHINE_ID, 
        DRIS_DEVICES.DEVICE_ID
    FROM ASSET_HEAT_EXCHANGERS
    INNER JOIN DRIS_ASSET_HEAT_EXCHANGERS ON DRIS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID
    INNER JOIN DRIS_DEVICES ON (DRIS_ASSET_HEAT_EXCHANGERS.DRI_DEVICE_ID = DRIS_DEVICES.ID)
    ${returnFilterCTEAnalisys(qPars.machineIds, 'ASSET_HEAT_EXCHANGERS')}
),
Chiller_Count as (
    select
        CHILLERS.MACHINE_ID,
        DRIS_DEVICES.DEVICE_ID
    from 
        CHILLERS
        INNER JOIN DRIS_CHILLERS ON (DRIS_CHILLERS.CHILLER_ID = CHILLERS.ID)
        INNER JOIN DRIS_DEVICES ON (DRIS_CHILLERS.DRI_DEVICE_ID = DRIS_DEVICES.ID)
        ${returnFilterCTEAnalisys(qPars.machineIds, 'CHILLERS')}
),
DEVAUT_Count as (
    SELECT 
      MACHINES.ID AS MACHINE_ID,
    CASE
        WHEN DAMS_AUTOMATIONS.ID IS NOT NULL THEN DAMS_DEVICES.DEVICE_ID 
        WHEN DUTS_AUTOMATION.ID IS NOT NULL THEN DUTS_DEVICES.DEVICE_ID 
        WHEN DACS_AUTOMATIONS.ID IS NOT NULL THEN DACS_DEVICES.DEVICE_ID 
        WHEN DRIS_AUTOMATIONS.ID IS NOT NULL THEN DRIS_DEVICES.DEVICE_ID 
        ELSE NULL
    END AS DEVICE_ID
  FROM
    MACHINES
    LEFT JOIN DAMS_AUTOMATIONS ON (MACHINES.ID = DAMS_AUTOMATIONS.MACHINE_ID)
    LEFT JOIN DAMS_DEVICES ON (DAMS_DEVICES.ID = DAMS_AUTOMATIONS.DAM_DEVICE_ID)
    LEFT JOIN DUTS_AUTOMATION ON (MACHINES.ID = DUTS_AUTOMATION.MACHINE_ID)
    LEFT JOIN DUTS_DEVICES ON (DUTS_DEVICES.ID = DUTS_AUTOMATION.DUT_DEVICE_ID)
    LEFT JOIN DACS_AUTOMATIONS ON (MACHINES.ID = DACS_AUTOMATIONS.MACHINE_ID)
    LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = DACS_AUTOMATIONS.DAC_DEVICE_ID)
    LEFT JOIN DRIS_AUTOMATIONS ON (MACHINES.ID = DRIS_AUTOMATIONS.MACHINE_ID)
    LEFT JOIN DRIS_DEVICES ON (DRIS_DEVICES.ID = DRIS_AUTOMATIONS.DRI_DEVICE_ID)
    ${returnFilterCTEAnalisys(qPars.machineIds, 'MACHINES')}
),
All_Devices AS (
    SELECT DISTINCT MACHINE_ID, DEVICE_ID FROM Evap_Count
    UNION
    SELECT DISTINCT MACHINE_ID, DEVICE_ID FROM Cond_Count
    UNION
    SELECT DISTINCT MACHINE_ID, DEVICE_ID FROM Heat_Count
    UNION 
    SELECT DISTINCT MACHINE_ID, DEVICE_ID FROM Chiller_Count
    UNION 
    SELECT DISTINCT MACHINE_ID, DEVICE_ID FROM DEVAUT_Count
)
SELECT DISTINCT
  CLIENTS.CLIENT_ID,
  CLIENTS.NAME AS CLIENT_NAME,
  CLUNITS.UNIT_ID,
  CLUNITS.UNIT_NAME AS UNIT_NAME,
  STATEREGION.ID AS STATE_ID,
  STATEREGION.NAME AS STATE_NAME,
  CITY.CITY_ID AS CITY_ID,
  CITY.NAME AS CITY_NAME,
  MACHINES.NAME AS MACHINE_NAME,
  MACHINES.ID AS MACHINE_ID,
  DEVICES.DEVICE_CODE AS DEV_AUT,
  BRAND.OPT_LABEL AS MCHN_BRAND,
  MACHINES.RATED_POWER,
  TYPE.OPT_LABEL AS MACHINE_TYPE,
  CURRENT_AUTOMATIONS_PARAMETERS.ECO_CFG,
  CURRENT_AUTOMATIONS_PARAMETERS.ENABLE_ECO,
  CURRENT_AUTOMATIONS_PARAMETERS.SETPOINT,
  CURRENT_AUTOMATIONS_PARAMETERS.LAST_PROG,
  CURRENT_AUTOMATIONS_PARAMETERS.MODE AS MODE,
  CURRENT_DEVICE_STATE.STATE_CONN,
  stateTemp.TEMPERATURE,
  stateTemp.TEMPERATURE1,
  ENVIRONMENTS.ENVIRONMENT_NAME,
  ROOMTYPES.TUSEMIN,
  ROOMTYPES.TUSEMAX,
  devRef.DEVICE_CODE AS DUT_REF,
  CURRENT_DEVICE_STATE.STATE AS STATE,
  COALESCE(COND_SUM.TOTAL_COND_CAPACITY, 0) AS TOTAL_CAPACITY_CONDENSER,
  COALESCE(All_Devices_Count.TOTAL_DEV_COUNT, 0) AS TOTAL_DEV_COUNT
`
sentence += `
FROM MACHINES
  LEFT JOIN (
    SELECT 
        MACHINE_ID,
        COUNT(DISTINCT DEVICE_ID) AS TOTAL_DEV_COUNT
    FROM All_Devices
    GROUP BY MACHINE_ID
  ) AS All_Devices_Count ON MACHINES.ID = All_Devices_Count.MACHINE_ID
  LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = MACHINES.UNIT_ID)
  LEFT JOIN CITY ON (CLUNITS.CITY_ID = CITY.CITY_ID)
  LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
  LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = CLUNITS.CLIENT_ID)
  LEFT JOIN ASSET_HEAT_EXCHANGERS ON MACHINES.ID = ASSET_HEAT_EXCHANGERS.MACHINE_ID
  LEFT JOIN CONDENSERS ON MACHINES.ID = CONDENSERS.MACHINE_ID
  LEFT JOIN EVAPORATORS ON MACHINES.ID = EVAPORATORS.MACHINE_ID
  LEFT JOIN REFRIGERATES ON (REFRIGERATES.MACHINE_ID = MACHINES.ID)
  LEFT JOIN ENVIRONMENTS ON (ENVIRONMENTS.ID = REFRIGERATES.ENVIRONMENT_ID)
  LEFT JOIN ENVIRONMENTS_ROOM_TYPES ON (ENVIRONMENTS_ROOM_TYPES.ENVIRONMENT_ID = REFRIGERATES.ENVIRONMENT_ID)
  LEFT JOIN ROOMTYPES ON (ROOMTYPES.RTYPE_ID = ENVIRONMENTS_ROOM_TYPES.RTYPE_ID)
  LEFT JOIN DAMS_AUTOMATIONS ON MACHINES.ID = DAMS_AUTOMATIONS.MACHINE_ID
  LEFT JOIN DAMS_DEVICES ON DAMS_DEVICES.ID = DAMS_AUTOMATIONS.DAM_DEVICE_ID
  LEFT JOIN DUTS_AUTOMATION ON MACHINES.ID = DUTS_AUTOMATION.MACHINE_ID
  LEFT JOIN DUTS_DEVICES ON DUTS_DEVICES.ID = DUTS_AUTOMATION.DUT_DEVICE_ID
  LEFT JOIN DACS_AUTOMATIONS ON MACHINES.ID = DACS_AUTOMATIONS.MACHINE_ID
  LEFT JOIN DACS_DEVICES ON DACS_DEVICES.ID = DACS_AUTOMATIONS.DAC_DEVICE_ID
  LEFT JOIN DRIS_AUTOMATIONS ON MACHINES.ID = DRIS_AUTOMATIONS.MACHINE_ID
  LEFT JOIN CHILLERS ON MACHINES.ID = CHILLERS.MACHINE_ID
  LEFT JOIN CHILLER_CARRIER_MODELS ON CHILLER_CARRIER_MODELS.ID = CHILLERS.CHILLER_CARRIER_MODEL_ID
  LEFT JOIN DRIS_CHILLERS ON CHILLERS.ID = DRIS_CHILLERS.CHILLER_ID
  LEFT JOIN DRIS_DEVICES ON DRIS_DEVICES.ID = COALESCE(DRIS_AUTOMATIONS.DRI_DEVICE_ID, DRIS_CHILLERS.DRI_DEVICE_ID)
  LEFT JOIN DEVICES ON DEVICES.ID = COALESCE(DRIS_DEVICES.DEVICE_ID, DACS_DEVICES.DEVICE_ID, DUTS_DEVICES.DEVICE_ID, DAMS_DEVICES.DEVICE_ID)
  LEFT JOIN ASSETS ON ASSETS.ID = COALESCE(CONDENSERS.ASSET_ID, EVAPORATORS.ASSET_ID, ASSET_HEAT_EXCHANGERS.ASSET_ID)
  LEFT JOIN DUTS_REFERENCE ON DUTS_REFERENCE.MACHINE_ID = MACHINES.ID
  LEFT JOIN DUTS_MONITORING ON DUTS_MONITORING.ID = DUTS_REFERENCE.DUT_MONITORING_ID 
  LEFT JOIN DUTS_DEVICES dutRef ON dutRef.ID = DUTS_MONITORING.DUT_DEVICE_ID
  LEFT JOIN DEVICES devRef ON devRef.ID = dutRef.DEVICE_ID
  LEFT JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID)
  LEFT JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (CURRENT_AUTOMATIONS_PARAMETERS.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)
  LEFT JOIN CURRENT_DEVICE_STATE stateTemp ON (COALESCE(devRef.DEVICE_CODE, DEVICES.DEVICE_CODE) = stateTemp.DEVICE_CODE)
  LEFT JOIN CURRENT_DEVICE_STATE ON (DEVICES.DEVICE_CODE = CURRENT_DEVICE_STATE.DEVICE_CODE)
  LEFT JOIN (
    SELECT 
        MACHINE_ID, 
        SUM(CASE WHEN CAPACITY_UNIT = 'TR' THEN CAPACITY_POWER ELSE 0 END) 
        + SUM(CASE WHEN CAPACITY_UNIT != 'TR' THEN CAPACITY_POWER / 12000 ELSE 0 END) 
        AS TOTAL_COND_CAPACITY
      FROM CONDENSERS
      GROUP BY MACHINE_ID
  ) AS COND_SUM ON MACHINES.ID = COND_SUM.MACHINE_ID
  LEFT JOIN AV_OPTS BRAND ON (BRAND.OPT_ID = MACHINES.BRAND)
  LEFT JOIN AV_OPTS TYPE ON (TYPE.OPT_ID = MACHINES.TYPE)
`

conditions.push('CLUNITS.CLIENT_ID IS NOT NULL');
if (qPars.clientIds?.length) { conditions.push(`(CLUNITS.CLIENT_ID IN (:clientIds))`) }
if (qPars.stateIds?.length) { conditions.push(`STATEREGION.ID IN (:stateIds)`) }
if (qPars.cityIds?.length) { conditions.push(`CLUNITS.CITY_ID IN (:cityIds)`) }
if (qPars.unitIds?.length) { conditions.push(`MACHINES.UNIT_ID IN (:unitIds)`) }
if (qPars.machineIds?.length) { conditions.push(`MACHINES.ID IN (:machineIds)`) }
if (qPars.operation_modes?.length) { 
  if(!qPars.operation_modes.includes('1_CONTROL')) { conditions.push(`CURRENT_AUTOMATIONS_PARAMETERS.MODE IN (:operation_modes)`)}
  else {
    conditions.push(`CURRENT_AUTOMATIONS_PARAMETERS.MODE IN (:operation_modes) OR CURRENT_AUTOMATIONS_PARAMETERS.ENABLE_ECO = 1`)
  }
}
if (qPars.stateDev?.length) { conditions.push(`CURRENT_DEVICE_STATE.STATE IN (:stateDev)`)}
if (qPars.onlyAut) { conditions.push(`DEVICES.DEVICE_CODE IS NOT NULL`)}
if (qPars.machinesTypes?.length) { conditions.push(`MACHINES.TYPE IN (:machinesTypes)`) }
if (qPars.tempAmb?.length) {
  conditions.push(generateTemperatureConditions({ tempAmb: qPars.tempAmb }));
}
if (qPars.INCLUDE_INSTALLATION_UNIT === false) { conditions.push(`CLUNITS.PRODUCTION = 1`) }
if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

sentence += ` ${returnOrdered(qPars.ordered, qPars.typeOrdered)}`;

if (qPars.offset != null) { sentence += ` LIMIT 10 OFFSET :offset ` }

return sqldb.query<{
  CLIENT_ID: number;
  CLIENT_NAME: string;
  UNIT_ID: number;
  UNIT_NAME: string;
  STATE_ID: number;
  STATE_NAME: string;
  CITY_ID: string;
  CITY_NAME: string;
  MACHINE_ID: number;
  MACHINE_NAME: string;
  DEV_AUT: string;
  LAST_PROG: string;
  MACHINE_TYPE: string;
  MCHN_BRAND: string;
  RATED_POWER: number;
  ECO_CFG: string;
  ENABLE_ECO: number
  SETPOINT: number;
  STATE: string;
  TUSEMAX: number;
  TUSEMIN: number;
  MODE: string;
  CAPACITY_PWR: number;
  CAPACITY_UNIT: string;
  MACHINE_KW: number;
  MODEL: string;
  AST_ROLE_NAME: string;
  TOTAL_CAPACITY_CONDENSER: number;
  TOTAL_DEV_COUNT: number;
  TEMPERATURE: number;
  TEMPERATURE1: number;
  STATE_CONN: string;
}>(sentence, qPars)
}

export function getMachinesInfoConnectionAnalysis(qPars: {
  clientIds?: number[],
  stateIds?: number[],
  cityIds?: string[],
  unitIds?: number[],
  machineIds?: number[],
  machinesTypes?: string[],
  healthIndex?: number[],
  INCLUDE_INSTALLATION_UNIT?: boolean,
  offset?: number
  ordered?: string
  typeOrdered?: string
  operation_modes?: string[],
  onlyAut?: boolean,
  stateDev?: string[],
  tempAmb?: string[],
}) {
const conditions = [];
let sentence = `
WITH Evap_Count AS (
    SELECT 
        EVAPORATORS.MACHINE_ID, 
        DACS_DEVICES.DEVICE_ID
    FROM EVAPORATORS
    INNER JOIN DACS_EVAPORATORS ON DACS_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID
    INNER JOIN DACS_DEVICES on (DACS_DEVICES.ID = DACS_EVAPORATORS.DAC_DEVICE_ID)
    UNION
    SELECT 
        EVAPORATORS.MACHINE_ID, 
        DUTS_DEVICES.DEVICE_ID AS DEVICE_ID
    FROM EVAPORATORS
    INNER JOIN DUTS_DUO_EVAPORATORS ON DUTS_DUO_EVAPORATORS.EVAPORATOR_ID = EVAPORATORS.ID
    INNER JOIN DUTS_DUO ON (DUTS_DUO.ID = DUTS_DUO_EVAPORATORS.DUT_DUO_ID)
    INNER JOIN DUTS_DEVICES on (DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID)
),
Cond_Count AS (
    SELECT 
        CONDENSERS.MACHINE_ID, 
        DACS_DEVICES.DEVICE_ID
    FROM CONDENSERS
    INNER JOIN DACS_CONDENSERS ON DACS_CONDENSERS.CONDENSER_ID = CONDENSERS.ID
    INNER JOIN DACS_DEVICES on (DACS_DEVICES.ID = DACS_CONDENSERS.DAC_DEVICE_ID)
    UNION
    SELECT 
        CONDENSERS.MACHINE_ID, 
        DUTS_DEVICES.DEVICE_ID AS DEVICE_ID
    FROM CONDENSERS
    INNER JOIN DUTS_DUO_CONDENSERS ON DUTS_DUO_CONDENSERS.CONDENSER_ID = CONDENSERS.ID
    INNER JOIN DUTS_DUO ON (DUTS_DUO.ID = DUTS_DUO_CONDENSERS.DUT_DUO_ID)
    INNER JOIN DUTS_DEVICES on (DUTS_DEVICES.ID = DUTS_DUO_CONDENSERS.DUT_DUO_ID)
),
Heat_Count AS (
    SELECT 
        ASSET_HEAT_EXCHANGERS.MACHINE_ID, 
        DACS_DEVICES.DEVICE_ID
    FROM ASSET_HEAT_EXCHANGERS
    INNER JOIN DACS_ASSET_HEAT_EXCHANGERS ON DACS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID
    INNER JOIN DACS_DEVICES on (DACS_DEVICES.ID = DACS_ASSET_HEAT_EXCHANGERS.DAC_DEVICE_ID)
    UNION
    SELECT 
        ASSET_HEAT_EXCHANGERS.MACHINE_ID, 
        DUTS_DEVICES.DEVICE_ID
    FROM ASSET_HEAT_EXCHANGERS
        INNER JOIN DUTS_DUO_ASSET_HEAT_EXCHANGERS ON DUTS_DUO_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID
        INNER JOIN DUTS_DUO ON (DUTS_DUO.ID = DUTS_DUO_ASSET_HEAT_EXCHANGERS.DUT_DUO_ID)
      INNER JOIN DUTS_DEVICES on (DUTS_DEVICES.ID = DUTS_DUO_ASSET_HEAT_EXCHANGERS.DUT_DUO_ID)
    UNION
    SELECT 
        ASSET_HEAT_EXCHANGERS.MACHINE_ID, 
        DRIS_DEVICES.DEVICE_ID
    FROM ASSET_HEAT_EXCHANGERS
    INNER JOIN DRIS_ASSET_HEAT_EXCHANGERS ON DRIS_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID = ASSET_HEAT_EXCHANGERS.ID
    INNER JOIN DRIS_DEVICES ON (DRIS_ASSET_HEAT_EXCHANGERS.DRI_DEVICE_ID = DRIS_DEVICES.ID)
),
Chiller_Count as (
    select
        CHILLERS.MACHINE_ID,
        DRIS_DEVICES.DEVICE_ID
    from 
        CHILLERS
        INNER JOIN DRIS_CHILLERS ON (DRIS_CHILLERS.CHILLER_ID = CHILLERS.ID)
        INNER JOIN DRIS_DEVICES ON (DRIS_CHILLERS.DRI_DEVICE_ID = DRIS_DEVICES.ID)
),
DEVAUT_Count as (
    SELECT 
      MACHINES.ID AS MACHINE_ID,
    CASE
        WHEN DAMS_AUTOMATIONS.ID IS NOT NULL THEN DAMS_DEVICES.DEVICE_ID 
        WHEN DUTS_AUTOMATION.ID IS NOT NULL THEN DUTS_DEVICES.DEVICE_ID 
        WHEN DACS_AUTOMATIONS.ID IS NOT NULL THEN DACS_DEVICES.DEVICE_ID 
        WHEN DRIS_AUTOMATIONS.ID IS NOT NULL THEN DRIS_DEVICES.DEVICE_ID 
        ELSE NULL
    END AS DEVICE_ID
  FROM
    MACHINES
    LEFT JOIN DAMS_AUTOMATIONS ON (MACHINES.ID = DAMS_AUTOMATIONS.MACHINE_ID)
    LEFT JOIN DAMS_DEVICES ON (DAMS_DEVICES.ID = DAMS_AUTOMATIONS.DAM_DEVICE_ID)
    LEFT JOIN DUTS_AUTOMATION ON (MACHINES.ID = DUTS_AUTOMATION.MACHINE_ID)
    LEFT JOIN DUTS_DEVICES ON (DUTS_DEVICES.ID = DUTS_AUTOMATION.DUT_DEVICE_ID)
    LEFT JOIN DACS_AUTOMATIONS ON (MACHINES.ID = DACS_AUTOMATIONS.MACHINE_ID)
    LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = DACS_AUTOMATIONS.DAC_DEVICE_ID)
    LEFT JOIN DRIS_AUTOMATIONS ON (MACHINES.ID = DRIS_AUTOMATIONS.MACHINE_ID)
    LEFT JOIN DRIS_DEVICES ON (DRIS_DEVICES.ID = DRIS_AUTOMATIONS.DRI_DEVICE_ID)
),
All_Devices AS (
    SELECT DISTINCT MACHINE_ID, DEVICE_ID FROM Evap_Count
    UNION
    SELECT DISTINCT MACHINE_ID, DEVICE_ID FROM Cond_Count
    UNION
    SELECT DISTINCT MACHINE_ID, DEVICE_ID FROM Heat_Count
    UNION 
    SELECT DISTINCT MACHINE_ID, DEVICE_ID FROM Chiller_Count
    UNION 
    SELECT DISTINCT MACHINE_ID, DEVICE_ID FROM DEVAUT_Count
)
SELECT DISTINCT
  SUM(CASE WHEN CURRENT_DEVICE_STATE.STATE_CONN IN ('ONLINE') THEN 1 ELSE 0 END) AS TOTAL_ONLINE,
  SUM(CASE WHEN (CURRENT_DEVICE_STATE.STATE_CONN IN ('OFFLINE') OR CURRENT_DEVICE_STATE.STATE_CONN IS NULL) THEN 1 ELSE 0 END) AS TOTAL_OFFLINE,
  SUM(CASE WHEN CURRENT_DEVICE_STATE.STATE_CONN IN ('LATE') THEN 1 ELSE 0 END) AS TOTAL_LATE
  
`
sentence += `
FROM MACHINES
 LEFT JOIN (
    SELECT 
        MACHINE_ID,
        DEVICE_ID,
        CURRENT_DEVICE_STATE.STATE_CONN,
        CURRENT_DEVICE_STATE.STATE
    FROM All_Devices
    LEFT JOIN DEVICES ON DEVICES.ID = DEVICE_ID	
 	LEFT JOIN CURRENT_DEVICE_STATE ON (DEVICES.DEVICE_CODE = CURRENT_DEVICE_STATE.DEVICE_CODE)
    ) AS All_Devices_Count ON MACHINES.ID = All_Devices_Count.MACHINE_ID
    LEFT JOIN (
    SELECT 
        MACHINE_ID,
        DEVICE_ID,
        CURRENT_DEVICE_STATE.STATE_CONN,
        CURRENT_DEVICE_STATE.STATE
    FROM DEVAUT_Count
    LEFT JOIN DEVICES ON DEVICES.ID = DEVAUT_Count.DEVICE_ID	
 	LEFT JOIN CURRENT_DEVICE_STATE ON (DEVICES.DEVICE_CODE = CURRENT_DEVICE_STATE.DEVICE_CODE)
    ) AS Dev_aut_devices ON MACHINES.ID = Dev_aut_devices.MACHINE_ID
 	LEFT JOIN DEVICES ON DEVICES.ID = Dev_aut_devices.DEVICE_ID	
   	LEFT JOIN CURRENT_DEVICE_STATE ON (DEVICES.DEVICE_CODE = CURRENT_DEVICE_STATE.DEVICE_CODE)
    LEFT JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID)
    LEFT JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (CURRENT_AUTOMATIONS_PARAMETERS.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)
    LEFT JOIN CLUNITS ON CLUNITS.UNIT_ID = MACHINES.UNIT_ID
    LEFT JOIN CITY ON CLUNITS.CITY_ID = CITY.CITY_ID
    LEFT JOIN STATEREGION ON CITY.STATE_ID = STATEREGION.ID
`
sentence += checkTempAmb({ tempAmb: qPars.tempAmb });
conditions.push('DEVICES.DEVICE_CODE IS NOT NULL');
if (qPars.clientIds?.length) { conditions.push(`(CLUNITS.CLIENT_ID IN (:clientIds))`) }
if (qPars.stateIds?.length) { conditions.push(`STATEREGION.ID IN (:stateIds)`) }
if (qPars.cityIds?.length) { conditions.push(`CLUNITS.CITY_ID IN (:cityIds)`) }
if (qPars.unitIds?.length) { conditions.push(`MACHINES.UNIT_ID IN (:unitIds)`) }
if (qPars.machineIds?.length) { conditions.push(`MACHINES.ID IN (:machineIds)`) }
if (qPars.operation_modes?.length) { conditions.push(`CURRENT_AUTOMATIONS_PARAMETERS.MODE IN (:operation_modes)`)}
if (qPars.stateDev?.length) { conditions.push(`CURRENT_DEVICE_STATE.STATE IN (:stateDev)`)}
if (qPars.onlyAut) { conditions.push(`DEVICES.DEVICE_CODE IS NOT NULL`)}
if (qPars.machinesTypes?.length) { conditions.push(`MACHINES.TYPE IN (:machinesTypes)`) }
if (qPars.tempAmb?.length) {
  conditions.push(generateTemperatureConditions({ tempAmb: qPars.tempAmb }));
}
if (qPars.INCLUDE_INSTALLATION_UNIT === false) { conditions.push(`CLUNITS.PRODUCTION = 1`) }
if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }
return sqldb.querySingle<{
  TOTAL_ONLINE: number,
  TOTAL_OFFLINE: number,
  TOTAL_LATE: number,
}>(sentence, qPars)
}

export function getMachinesTotalRatedPower(qPars: {
  clientIds?: number[],
  stateIds?: number[],
  cityIds?: string[],
  unitIds?: number[],
  machineIds?: number[],
  machinesTypes?: string[],
  healthIndex?: number[],
  INCLUDE_INSTALLATION_UNIT?: boolean,
  offset?: number
  ordered?: string
  typeOrdered?: string
  operation_modes?: string[],
  onlyAut?: boolean,
  stateDev?: string[],
  tempAmb?: string[],
}) {
const conditions = [];
let sentence = `
WITH Dev_Aut as (
    SELECT 
      MACHINES.ID AS MACHINE_ID,
    CASE
        WHEN DAMS_AUTOMATIONS.ID IS NOT NULL THEN DAMS_DEVICES.DEVICE_ID 
        WHEN DUTS_AUTOMATION.ID IS NOT NULL THEN DUTS_DEVICES.DEVICE_ID 
        WHEN DACS_AUTOMATIONS.ID IS NOT NULL THEN DACS_DEVICES.DEVICE_ID 
        WHEN DRIS_AUTOMATIONS.ID IS NOT NULL THEN DRIS_DEVICES.DEVICE_ID 
        ELSE NULL
    END AS DEVICE_ID
  FROM
    MACHINES
    LEFT JOIN DAMS_AUTOMATIONS ON (MACHINES.ID = DAMS_AUTOMATIONS.MACHINE_ID)
    LEFT JOIN DAMS_DEVICES ON (DAMS_DEVICES.ID = DAMS_AUTOMATIONS.DAM_DEVICE_ID)
    LEFT JOIN DUTS_AUTOMATION ON (MACHINES.ID = DUTS_AUTOMATION.MACHINE_ID)
    LEFT JOIN DUTS_DEVICES ON (DUTS_DEVICES.ID = DUTS_AUTOMATION.DUT_DEVICE_ID)
    LEFT JOIN DACS_AUTOMATIONS ON (MACHINES.ID = DACS_AUTOMATIONS.MACHINE_ID)
    LEFT JOIN DACS_DEVICES ON (DACS_DEVICES.ID = DACS_AUTOMATIONS.DAC_DEVICE_ID)
    LEFT JOIN DRIS_AUTOMATIONS ON (MACHINES.ID = DRIS_AUTOMATIONS.MACHINE_ID)
    LEFT JOIN DRIS_DEVICES ON (DRIS_DEVICES.ID = DRIS_AUTOMATIONS.DRI_DEVICE_ID)
)
SELECT DISTINCT
  SUM(MACHINES.RATED_POWER) AS TOTAL_MACHINE_KW
`
sentence += `
FROM MACHINES
  LEFT JOIN (
    SELECT 
        MACHINE_ID,
        DEVICE_ID,
        CURRENT_DEVICE_STATE.STATE_CONN,
        CURRENT_DEVICE_STATE.STATE
    FROM Dev_Aut
    LEFT JOIN DEVICES ON DEVICES.ID = Dev_Aut.DEVICE_ID	
    LEFT JOIN CURRENT_DEVICE_STATE ON (DEVICES.DEVICE_CODE = CURRENT_DEVICE_STATE.DEVICE_CODE)
  ) AS Dev_aut_devices ON MACHINES.ID = Dev_aut_devices.MACHINE_ID
 	LEFT JOIN DEVICES ON DEVICES.ID = Dev_aut_devices.DEVICE_ID	
  LEFT JOIN CURRENT_DEVICE_STATE ON (DEVICES.DEVICE_CODE = CURRENT_DEVICE_STATE.DEVICE_CODE)
  LEFT JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID)
  LEFT JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (CURRENT_AUTOMATIONS_PARAMETERS.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)
  LEFT JOIN CLUNITS ON CLUNITS.UNIT_ID = MACHINES.UNIT_ID
  LEFT JOIN CITY ON CLUNITS.CITY_ID = CITY.CITY_ID
  LEFT JOIN STATEREGION ON CITY.STATE_ID = STATEREGION.ID
`

sentence += checkTempAmb({ tempAmb: qPars.tempAmb });
if (qPars.clientIds?.length) { conditions.push(`(CLUNITS.CLIENT_ID IN (:clientIds))`) }
if (qPars.stateIds?.length) { conditions.push(`STATEREGION.ID IN (:stateIds)`) }
if (qPars.cityIds?.length) { conditions.push(`CLUNITS.CITY_ID IN (:cityIds)`) }
if (qPars.unitIds?.length) { conditions.push(`MACHINES.UNIT_ID IN (:unitIds)`) }
if (qPars.machineIds?.length) { conditions.push(`MACHINES.ID IN (:machineIds)`) }
if (qPars.operation_modes?.length) { conditions.push(`CURRENT_AUTOMATIONS_PARAMETERS.MODE IN (:operation_modes)`)}
if (qPars.stateDev?.length) { conditions.push(`CURRENT_DEVICE_STATE.STATE IN (:stateDev)`)}
if (qPars.onlyAut) { conditions.push(`DEVICES.DEVICE_CODE IS NOT NULL`)}
if (qPars.machinesTypes?.length) { conditions.push(`MACHINES.TYPE IN (:machinesTypes)`) }
if (qPars.tempAmb?.length) {
  conditions.push(generateTemperatureConditions({ tempAmb: qPars.tempAmb }));
}
if (qPars.INCLUDE_INSTALLATION_UNIT === false) { conditions.push(`CLUNITS.PRODUCTION = 1`) }
if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }
return sqldb.querySingle<{
  TOTAL_MACHINE_KW: number
}>(sentence, qPars)
}

export function getTotalMachinesInfo() {
let sentence = `
  SELECT DISTINCT
    COUNT(*) as TOTAL_MACHINES
  FROM MACHINES
`
return sqldb.querySingle<{
  TOTAL_MACHINES: number
}>(sentence)
}

export function getAllMachinesInfo(qPars: {
  clientIds?: number[],
  stateIds?: number[],
  cityIds?: string[],
  unitIds?: number[],
}, admPars: {
  addUnownedDevs?: boolean
}) {
  const conditions = [];
  let sentence = `
  SELECT MACHINES.NAME AS MACHINE_NAME, MACHINES.ID AS MACHINE_ID
  FROM MACHINES
  LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = MACHINES.UNIT_ID)
  LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
  LEFT JOIN STATEREGION ON (CITY.STATE_ID = STATEREGION.ID)
  `
  if (qPars.clientIds?.length && admPars.addUnownedDevs) { conditions.push(`(CLUNITS.CLIENT_ID IN (:clientIds) OR CLUNITS.CLIENT_ID IS NULL)`) }
  if (qPars.clientIds?.length && !admPars.addUnownedDevs) { conditions.push(`(CLUNITS.CLIENT_ID IN (:clientIds))`) }
  if (qPars.stateIds?.length) { conditions.push(`CITY.STATE_ID IN (:stateIds)`) }
  if (qPars.cityIds?.length) { conditions.push(`CLUNITS.CITY_ID IN (:cityIds)`) }
  if (qPars.unitIds?.length) { conditions.push(`CLUNITS.UNIT_ID IN (:unitIds)`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }
  return sqldb.query<{
    MACHINE_ID: number
    MACHINE_NAME: string
  }>(sentence, qPars);
  }
