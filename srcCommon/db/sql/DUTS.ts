import * as sqldb from '../connectSql'
import { saveOperationLog, OperationLogData } from '../dbModifLog'
import { dbLogger } from '../../../srcCommon/helpers/logger'
import { ControlMode } from '../../types'

export async function w_update (qPars: {
  DEV_ID: string,
  RTYPE_ID?: number,
  ROOM_NAME?: string,
  ROOM_ID?: number,
  PLACEMENT?: 'AMB'|'INS'|'DUO',
  VARS?: string,
  TEMPERATURE_OFFSET?: number
  SENSOR_AUTOM?: number
}, operationLogData: OperationLogData) {
  const fields: string[] = []
  if (qPars.RTYPE_ID !== undefined) { fields.push('RTYPE_ID = :RTYPE_ID') }
  if (qPars.ROOM_NAME !== undefined) { fields.push('ROOM_NAME = :ROOM_NAME') }
  if (qPars.ROOM_ID !== undefined) { fields.push('ROOM_ID = :ROOM_ID') }
  if (qPars.PLACEMENT !== undefined) { fields.push('PLACEMENT = :PLACEMENT') }
  if (qPars.VARS !== undefined) { fields.push('VARS = :VARS') }
  if (qPars.TEMPERATURE_OFFSET !== undefined) { fields.push('TEMPERATURE_OFFSET = :TEMPERATURE_OFFSET') }
  if (qPars.SENSOR_AUTOM !== undefined) { fields.push('SENSOR_AUTOM = :SENSOR_AUTOM') }
  if (!fields.length) throw Error('No fields to update').HttpStatus(500).DebugInfo({ qPars })

  const sentence = `UPDATE DUTS SET ${fields.join(', ')} WHERE DEV_ID = :DEV_ID`

  if (operationLogData) {
    await saveOperationLog('DUTS', sentence, qPars, operationLogData);
    dbLogger('DUTS', sentence, qPars, operationLogData);
  }

  return sqldb.execute(sentence, qPars)
}

export function getFreshDevInfo (qPars: { devId: string }) {
  let sentence = `
    SELECT
      DEVICES_CLIENTS.CLIENT_ID,
      DEVICES_UNITS.UNIT_ID,
      ROOMTYPES.RTYPE_ID,
      DUTS_DEVICES.VARS,
      (CASE WHEN CURRENT_AUTOMATIONS_PARAMETERS.ID IS NOT NULL THEN DEVICES.DEVICE_CODE ELSE NULL END) AS IS_DUT_AUT,
      CURRENT_AUTOMATIONS_PARAMETERS.DESIRED_PROG AS DESIREDPROG,
      CURRENT_AUTOMATIONS_PARAMETERS.LAST_PROG AS LASTPROG,
      DUTS_AUTOMATION.DISAB,
      ROOMTYPES.USEPERIOD,
      ROOMTYPES.TUSEMIN,
      ROOMTYPES.TUSEMAX
  `
  sentence += `
    FROM
      DUTS_DEVICES
      INNER JOIN DEVICES ON (DUTS_DEVICES.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DUTS_MONITORING ON (DUTS_DEVICES.ID = DUTS_MONITORING.DUT_DEVICE_ID)
      LEFT JOIN DUTS_AUTOMATION ON (DUTS_AUTOMATION.DUT_DEVICE_ID = DUTS_DEVICES.ID)
      LEFT JOIN ENVIRONMENTS ON (DUTS_MONITORING.ENVIRONMENT_ID = ENVIRONMENTS.ID)
      LEFT JOIN ENVIRONMENTS_ROOM_TYPES ON (ENVIRONMENTS_ROOM_TYPES.ENVIRONMENT_ID = ENVIRONMENTS.ID)
      LEFT JOIN ROOMTYPES ON (ENVIRONMENTS_ROOM_TYPES.RTYPE_ID = ROOMTYPES.RTYPE_ID)
      LEFT JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID = DUTS_AUTOMATION.MACHINE_ID)
      LEFT JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (CURRENT_AUTOMATIONS_PARAMETERS.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)
  `

  sentence += ` WHERE DEVICES.DEVICE_CODE = :devId `

  return sqldb.queryFirst<{
    CLIENT_ID: number
    UNIT_ID: number
    RTYPE_ID: number
    VARS: string
    IS_DUT_AUT: string
    DESIREDPROG: string
    LASTPROG: string
    DISAB: boolean
    USEPERIOD: string
    TUSEMIN: number
    TUSEMAX: number
  }>(sentence, qPars)
}

export function getDevExtraInfo (qPars: { DEV_ID: string, CLIENT_ID?: number }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DEV_ID,
      DEVICES.BT_ID,
      DEVICES.DAT_BEGMON,
      ENVIRONMENTS.ID AS ENVIRONMENT_ID,
      ENVIRONMENTS.ENVIRONMENT_NAME AS ROOM_NAME,
      DUTS_DEVICES.ID AS DUT_DEVICE_ID,
      DUTS_DEVICES.PLACEMENT,
      DUTS_DEVICES.VARS,
      DUTS_DEVICES.TEMPERATURE_OFFSET,
      DEVICES_UNITS.UNIT_ID,
      DEVICES_CLIENTS.CLIENT_ID,
      CLUNITS.CITY_ID,
      STATEREGION.NAME AS STATE_ID,
      CITY.NAME AS CITY_NAME,
      CLUNITS.UNIT_NAME,
      CLUNITS.LAT,
      CLUNITS.LON,
      ROOMTYPES.TUSEMIN,
      ROOMTYPES.TUSEMAX,
      ROOMTYPES.USEPERIOD,
      ROOMTYPES.RTYPE_ID,
      ROOMTYPES.RTYPE_NAME,
      DUTS_DUO.ID AS DUT_DUO_ID,
      DUTS_DUO.SENSOR_AUTOM,
      ENVIRONMENTS_ROOM_TYPES.ID AS ENVIRONMENT_ROOM_TYPE_ID,
      ROOMS.ROOM_ID,
      DUTS_REFERENCE.ID AS DUT_REFERENCE_ID,
      DUTS_REFERENCE.MACHINE_ID AS MACHINE_REFERENCE,
      MACHINES.APPLICATION AS MACHINE_APPLICATION
  `
  sentence += `
    FROM
      DUTS_DEVICES
      INNER JOIN DEVICES ON (DUTS_DEVICES.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
      LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
      LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
      LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
      LEFT JOIN DUTS_MONITORING ON (DUTS_DEVICES.ID = DUTS_MONITORING.DUT_DEVICE_ID)
      LEFT JOIN DUTS_REFERENCE ON (DUTS_REFERENCE.DUT_MONITORING_ID = DUTS_MONITORING.ID)
      LEFT JOIN MACHINES ON (MACHINES.ID=DUTS_REFERENCE.MACHINE_ID)
      LEFT JOIN DUTS_DUO ON (DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID)
      LEFT JOIN ENVIRONMENTS ON (DUTS_MONITORING.ENVIRONMENT_ID = ENVIRONMENTS.ID)
      LEFT JOIN ENVIRONMENTS_ROOM_TYPES ON (ENVIRONMENTS_ROOM_TYPES.ENVIRONMENT_ID = ENVIRONMENTS.ID)
      LEFT JOIN ROOMTYPES ON (ENVIRONMENTS_ROOM_TYPES.RTYPE_ID = ROOMTYPES.RTYPE_ID)
      LEFT JOIN DUTS_DEVICES_ROOMS ON (DUTS_DEVICES_ROOMS.DUT_DEVICE_ID = DUTS_DEVICES.ID)
      LEFT JOIN ROOMS ON (DUTS_DEVICES_ROOMS.ROOM_ID = ROOMS.ROOM_ID)
  `

  const conditions: string[] = []
  conditions.push(`DEVICES.DEVICE_CODE = :DEV_ID`)
  if (qPars.CLIENT_ID != null) { conditions.push(`DEVICES_CLIENTS.CLIENT_ID = :CLIENT_ID`) }
  sentence += ' WHERE ' + conditions.join(' AND ') + ' GROUP BY DEVICES.DEVICE_CODE';

  return sqldb.querySingle<{
    DEV_ID: string
    BT_ID: string
    DAT_BEGMON: string
    ENVIRONMENT_ID: number
    ROOM_NAME: string
    DUT_DEVICE_ID: number
    PLACEMENT: 'AMB'|'INS'|'DUO'
    VARS: string
    TEMPERATURE_OFFSET: number
    UNIT_ID: number
    CLIENT_ID: number
    CITY_ID: string
    STATE_ID: string
    CITY_NAME: string
    UNIT_NAME: string
    LAT: string
    LON: string
    TUSEMIN: number
    TUSEMAX: number
    USEPERIOD: string
    RTYPE_ID: number
    RTYPE_NAME: string
    DUT_DUO_ID: number
    SENSOR_AUTOM: number
    ENVIRONMENT_ROOM_TYPE_ID: number
    ROOM_ID: number
    DUT_REFERENCE_ID: number
    MACHINE_REFERENCE: number
    MACHINE_APPLICATION: string
  }>(sentence, qPars)
}

export function getDevInfoToUnified (qPars: { DEV_ID: string }) {
  let sentence = `
    SELECT
      ENVIRONMENTS.ENVIRONMENT_NAME AS ROOM_NAME,
      ENVIRONMENTS.ID AS ENVIRONMENT_ID,
      DUTS_DEVICES.PLACEMENT,
      ROOMTYPES.RTYPE_NAME,
      DUTS_DUO.SENSOR_AUTOM
  `
  sentence += `
    FROM
      DUTS_DEVICES
      INNER JOIN DEVICES ON (DUTS_DEVICES.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DUTS_MONITORING ON (DUTS_DEVICES.ID = DUTS_MONITORING.DUT_DEVICE_ID)
      LEFT JOIN DUTS_DUO ON (DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID)
      LEFT JOIN ENVIRONMENTS ON (DUTS_MONITORING.ENVIRONMENT_ID = ENVIRONMENTS.ID)
      LEFT JOIN ENVIRONMENTS_ROOM_TYPES ON (ENVIRONMENTS_ROOM_TYPES.ENVIRONMENT_ID = ENVIRONMENTS.ID)
      LEFT JOIN ROOMTYPES ON (ENVIRONMENTS_ROOM_TYPES.RTYPE_ID = ROOMTYPES.RTYPE_ID)
  `

  const conditions: string[] = []
  conditions.push(`DEVICES.DEVICE_CODE = :DEV_ID`)
  sentence += ' WHERE ' + conditions.join(' AND ') + ' GROUP BY DEVICES.DEVICE_CODE';

  return sqldb.querySingle<{
    ROOM_NAME: string
    ENVIRONMENT_ID: number
    PLACEMENT: 'AMB'|'INS'|'DUO'
    RTYPE_NAME: string
    SENSOR_AUTOM: number
  }>(sentence, qPars)
}

export function getDutDetails (qPars: { DEV_ID: string }) {
  let sentence = `
    SELECT
      CLUNITS.UNIT_NAME,
      DEVICES.DEVICE_CODE AS DEV_ID,
      ROOMTYPES.RTYPE_ID,
      DEVICES_CLIENTS.CLIENT_ID,
      DEVICES_UNITS.UNIT_ID,
      ENVIRONMENTS.ENVIRONMENT_NAME AS ROOM_NAME,
      DUTS_DEVICES.VARS,
      CLIENTS.NAME AS CLIENT_NAME,
      ROOMTYPES.TUSEMIN,
      ROOMTYPES.TUSEMAX,
      ROOMTYPES.USEPERIOD
  `
  sentence += `
    FROM
      DUTS_DEVICES
      INNER JOIN DEVICES ON (DUTS_DEVICES.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
      LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
      LEFT JOIN DUTS_MONITORING ON (DUTS_DEVICES.ID = DUTS_MONITORING.DUT_DEVICE_ID)
      LEFT JOIN ENVIRONMENTS ON (DUTS_MONITORING.ENVIRONMENT_ID = ENVIRONMENTS.ID)
      LEFT JOIN ENVIRONMENTS_ROOM_TYPES ON (ENVIRONMENTS_ROOM_TYPES.ENVIRONMENT_ID = ENVIRONMENTS.ID)
      LEFT JOIN ROOMTYPES ON (ENVIRONMENTS_ROOM_TYPES.RTYPE_ID = ROOMTYPES.RTYPE_ID)
  `

  sentence += ` WHERE DEVICES.DEVICE_CODE = :DEV_ID `

  return sqldb.querySingle<{
    UNIT_NAME: string
    DEV_ID: string
    RTYPE_ID: number
    CLIENT_ID: number
    UNIT_ID: number
    ROOM_NAME: string
    VARS: string
    CLIENT_NAME: string
    TUSEMIN: number
    TUSEMAX: number
    USEPERIOD: string
  }>(sentence, qPars)
}

export function getBasicInfo (qPars: { devId: string, clientId?: number }) {
  let sentence = `
    SELECT
      DEVICES_CLIENTS.CLIENT_ID,
      DEVICES.ID AS DEVICE_ID,
      DEVICES_UNITS.UNIT_ID,
      DUTS_DEVICES.TEMPERATURE_OFFSET,
      DUTS_DUO.SENSOR_AUTOM,
      DUTS_DEVICES.VARS
  `
  sentence += `
    FROM
      DUTS_DEVICES
      INNER JOIN DEVICES ON (DUTS_DEVICES.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DUTS_MONITORING ON (DUTS_DEVICES.ID = DUTS_MONITORING.DUT_DEVICE_ID)
      LEFT JOIN DUTS_DUO ON (DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID)
      LEFT JOIN ENVIRONMENTS ON (DUTS_MONITORING.ENVIRONMENT_ID = ENVIRONMENTS.ID)
  `

  const conditions: string[] = []
  conditions.push(`DEVICES.DEVICE_CODE = :devId`)
  if (qPars.clientId !== undefined) { conditions.push(`DEVICES_CLIENTS.CLIENT_ID = :clientId`) }
  sentence += ' WHERE ' + conditions.join(' AND ')

  return sqldb.querySingle<{
    CLIENT_ID: number
    DEVICE_ID: number
    UNIT_ID: number
    TEMPERATURE_OFFSET: number
    SENSOR_AUTOM: number
    VARS: string
  }>(sentence, qPars)
}

export function refreshSelectedDevsInfo (qPars: { DEV_ID?: string, UNIT_IDS?: number[], CLIENT_IDS?: number[] }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DEV_ID,
      COALESCE(DUTS_DEVICES.TEMPERATURE_OFFSET, 0) AS TEMPERATURE_OFFSET,
      DEVICES_UNITS.UNIT_ID,
      DEVICES_CLIENTS.CLIENT_ID
  `
  sentence += `
    FROM
      DUTS_DEVICES
      INNER JOIN DEVICES ON (DUTS_DEVICES.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DUTS_MONITORING ON (DUTS_DEVICES.ID = DUTS_MONITORING.DUT_DEVICE_ID)
      LEFT JOIN ENVIRONMENTS ON (DUTS_MONITORING.ENVIRONMENT_ID = ENVIRONMENTS.ID)
  `

  const conditions: string[] = []
  if (qPars.DEV_ID) { conditions.push(`DEVICES.DEVICE_CODE = :DEV_ID`) }
  if (qPars.UNIT_IDS) { conditions.push(`DEVICES_UNITS.UNIT_ID IN (:UNIT_IDS)`) }
  if (qPars.CLIENT_IDS) { conditions.push(`DEVICES_CLIENTS.CLIENT_ID IN (:CLIENT_IDS)`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    DEV_ID: string
    TEMPERATURE_OFFSET: number
    UNIT_ID: number
    CLIENT_ID: number
  }>(sentence, qPars)
}

export function selectedDevsInfoToIr (qPars: { DEV_ID: string, UNIT_IDS?: number[], CLIENT_IDS?: number[] }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DEV_ID,
      COALESCE(DUTS_DEVICES.TEMPERATURE_OFFSET, 0) AS TEMPERATURE_OFFSET,
      DEVICES_UNITS.UNIT_ID,
      DEVICES_CLIENTS.CLIENT_ID
  `
  sentence += `
    FROM
      DUTS_DEVICES
      INNER JOIN DEVICES ON (DUTS_DEVICES.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DUTS_MONITORING ON (DUTS_DEVICES.ID = DUTS_MONITORING.DUT_DEVICE_ID)
      LEFT JOIN ENVIRONMENTS ON (DUTS_MONITORING.ENVIRONMENT_ID = ENVIRONMENTS.ID)
  `
  sentence += `
    WHERE
      DEVICES.DEVICE_CODE = :DEV_ID
  `
  const conditions: string[] = []
  if (qPars.UNIT_IDS) { conditions.push(`DEVICES_UNITS.UNIT_ID IN (:UNIT_IDS)`) }
  if (qPars.CLIENT_IDS) { conditions.push(`DEVICES_CLIENTS.CLIENT_ID IN (:CLIENT_IDS)`) }
  if (conditions.length) { sentence += ' AND (' + conditions.join(' OR ') + ' ) ' }

  return sqldb.query<{
    DEV_ID: string
    TEMPERATURE_OFFSET: number
    UNIT_ID: number
    CLIENT_ID: number
  }>(sentence, qPars)
}

export function buildDevsListSentence (qPars: {
  INCLUDE_INSTALLATION_UNIT?: boolean,
  clientIds?: number[],
  stateIds?: string[],
  cityIds?: string[],
  unitIds?: number[],
  rtypeId?: number,
  SKIP?: number,
  LIMIT?: number
  excludeClient?: number,
  needMultSchedules?: string, 
  controlModel?: string[]
}, admPars: {
  onlyPossibleAutomation?: boolean,
  onlyWithAutomation?: boolean
}) {
  let sentence = `
    SELECT
      DISTINCT DEVICES.DEVICE_CODE AS DEV_ID,
      DEVICES.BT_ID AS bt_id,
      CLUNITS.CITY_ID,
      CITY.NAME AS CITY_NAME,
      STATEREGION.NAME AS STATE_ID,
      STATEREGION.FULL_NAME AS STATE_NAME,
      COUNTRY.NAME AS COUNTRY_NAME,
      ENVIRONMENTS.ID AS ENVIRONMENT_ID,
      ENVIRONMENTS_ROOM_TYPES.ID AS ENVIRONMENTS_ROOM_TYPES_ID,
      ENVIRONMENTS.ENVIRONMENT_NAME AS ROOM_NAME,
      COALESCE(ENVIRONMENTS.IS_VISIBLE, 1) AS ISVISIBLE,
      DUTS_DEVICES.PLACEMENT,
      DUTS_DEVICES.VARS,
      COALESCE(DUTS_DEVICES.TEMPERATURE_OFFSET, 0) AS TEMPERATURE_OFFSET,
      DEVICES_UNITS.UNIT_ID,
      CLUNITS.UNIT_NAME,
      CLUNITS.LAT,
      CLUNITS.LON,
      CLIENTS.NAME AS CLIENT_NAME,
      DEVICES_CLIENTS.CLIENT_ID,
      ROOMTYPES.RTYPE_ID,
      ROOMTYPES.RTYPE_NAME,
      ROOMTYPES.CO2MAX,
      ROOMTYPES.TUSEMAX,
      ROOMTYPES.TUSEMIN,
      ROOMTYPES.HUMIMAX,
      ROOMTYPES.HUMIMIN,
      ROOMTYPES.USEPERIOD AS RTYPE_SCHED,
      (CASE WHEN DUTS_AUTOMATION.ID IS NOT NULL THEN DEVICES.DEVICE_CODE ELSE NULL END) AS AUTOM_HW,
      DUTS_AUTOMATION.DISAB AS AUTOM_DISAB,
      MACHINES.BRAND AS MCHN_BRAND,
      ASSETS.MODEL AS MCHN_MODEL,
      DEVFWVERS.CURRFW_VERS,
      TIME_ZONES.ID AS TIMEZONE_ID,
      TIME_ZONES.AREA AS TIMEZONE_AREA,
      TIME_ZONES.TIME_ZONE_OFFSET AS TIMEZONE_OFFSET,
      DUT_AUT_PARAMS.MODE AS DUTAUT_CTRLOPER,
      DUT_AUT_PARAMS.PORT_CFG AS PORTCFG
  `
  sentence += `
    FROM
      DUTS_DEVICES
      INNER JOIN DEVICES ON (DUTS_DEVICES.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
      LEFT JOIN TIME_ZONES ON (TIME_ZONES.ID = CLUNITS.TIMEZONE_ID)
      LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
      LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
      LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
      LEFT JOIN COUNTRY ON (COUNTRY.ID = STATEREGION.COUNTRY_ID)
      LEFT JOIN DUTS_MONITORING ON (DUTS_DEVICES.ID = DUTS_MONITORING.DUT_DEVICE_ID)
      LEFT JOIN ENVIRONMENTS ON (DUTS_MONITORING.ENVIRONMENT_ID = ENVIRONMENTS.ID)
      LEFT JOIN ENVIRONMENTS_ROOM_TYPES ON (ENVIRONMENTS_ROOM_TYPES.ENVIRONMENT_ID = ENVIRONMENTS.ID)
      LEFT JOIN DUTS_AUTOMATION ON (DUTS_DEVICES.ID = DUTS_AUTOMATION.DUT_DEVICE_ID)
      LEFT JOIN MACHINES ON (DUTS_AUTOMATION.MACHINE_ID = MACHINES.ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.MACHINE_ID = MACHINES.ID)
      LEFT JOIN ASSETS ON (EVAPORATORS.ASSET_ID = ASSETS.ID)
      LEFT JOIN ROOMTYPES ON (ENVIRONMENTS_ROOM_TYPES.RTYPE_ID = ROOMTYPES.RTYPE_ID)
      LEFT JOIN DEVFWVERS ON (DEVFWVERS.DEV_ID = DEVICES.DEVICE_CODE)
      LEFT JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS DUT_AUT ON (
        DUT_AUT.MACHINE_ID = DUTS_AUTOMATION.MACHINE_ID
      )
      LEFT JOIN CURRENT_AUTOMATIONS_PARAMETERS DUT_AUT_PARAMS ON (DUT_AUT_PARAMS.ID = DUT_AUT.CURRENT_AUTOMATION_PARAMETERS_ID)
  `
  if (qPars.needMultSchedules != null || qPars.controlModel != null) { 
    sentence += `
      LEFT JOIN MACHINES_AUTOMATIONS_PERIODS ON (DUTS_AUTOMATION.MACHINE_ID = MACHINES_AUTOMATIONS_PERIODS.MACHINE_ID)
      LEFT JOIN AUTOMATIONS_PERIODS ON (AUTOMATIONS_PERIODS.ID = MACHINES_AUTOMATIONS_PERIODS.AUTOMATION_PERIOD_ID)
      LEFT JOIN SCHEDULES ON (AUTOMATIONS_PERIODS.ID = SCHEDULES.AUTOMATION_PERIOD_ID)
  `
  }

  if (qPars.controlModel != null) { 
    sentence += `
      LEFT JOIN AUTOMATIONS_PERIODS_PARAMETERS ON (AUTOMATIONS_PERIODS_PARAMETERS.AUTOMATION_PERIOD_ID = AUTOMATIONS_PERIODS.ID)
      LEFT JOIN AUTOMATIONS_PARAMETERS ON (AUTOMATIONS_PARAMETERS.ID = AUTOMATIONS_PERIODS_PARAMETERS.AUTOMATION_PARAMETERS_ID)
  `
  }

  const conditions: string[] = []
  if (qPars.excludeClient) { conditions.push(`DEVICES_CLIENTS.CLIENT_ID <> :excludeClient`) }
  if (qPars.clientIds) { conditions.push(`DEVICES_CLIENTS.CLIENT_ID IN (:clientIds)`) }
  if (qPars.stateIds) { conditions.push(`STATEREGION.ID IN (:stateIds)`) }
  if (qPars.cityIds) { conditions.push(`CLUNITS.CITY_ID IN (:cityIds)`) }
  if (qPars.unitIds) { conditions.push(`DEVICES_UNITS.UNIT_ID IN (:unitIds)`) }
  if (qPars.needMultSchedules != null) {
    if (qPars.needMultSchedules === '1') conditions.push(`SCHEDULES.NEED_MULT_SCHEDULES = '1'`)
    else conditions.push(`(SCHEDULES.NEED_MULT_SCHEDULES IS NULL OR SCHEDULES.NEED_MULT_SCHEDULES <> '1')`)
  }
  if (qPars.controlModel != null) {
    if (qPars.controlModel.includes('0_NO_CONTROL')) conditions.push(`(AUTOMATIONS_PARAMETERS.MODE IS NULL OR AUTOMATIONS_PARAMETERS.MODE IN (:controlModel))`)
    else conditions.push(`AUTOMATIONS_PARAMETERS.MODE IN (:controlModel)`) 
  }
  if (qPars.rtypeId != null) { conditions.push(`ENVIRONMENTS_ROOM_TYPES.RTYPE_ID = :rtypeId`) }
  if (admPars.onlyWithAutomation) { conditions.push(`(DUTS_AUTOMATION.DISAB = 0) AND DUTS_AUTOMATION.ID IS NOT NULL`) }
  if (qPars.INCLUDE_INSTALLATION_UNIT === false) { conditions.push(`CLUNITS.PRODUCTION = 1`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  sentence += ` GROUP BY DEVICES.DEVICE_CODE ORDER BY DEVICES.DEVICE_CODE ASC `;
  if (qPars.SKIP != null && qPars.LIMIT != null) { sentence += ` LIMIT :SKIP,:LIMIT ` }

  return sqldb.query<{
    DEV_ID: string
    bt_id: string
    CITY_ID: string
    CITY_NAME: string
    STATE_ID: string
    STATE_NAME: string
    COUNTRY_NAME: string
    ENVIRONMENT_ID: number
    ENVIRONMENTS_ROOM_TYPES_ID: number
    ROOM_NAME: string
    ISVISIBLE: number
    PLACEMENT: 'AMB'|'INS'|'DUO'
    VARS: string
    TEMPERATURE_OFFSET: number
    UNIT_ID: number
    UNIT_NAME: string
    LAT: string
    LON: string
    CLIENT_NAME: string
    CLIENT_ID: number
    RTYPE_ID: number
    RTYPE_NAME: string
    CO2MAX: number
    RTYPE_SCHED: string
    AUTOM_HW: string
    AUTOM_DISAB: number
    MCHN_BRAND: string
    MCHN_MODEL: string
    CURRFW_VERS: string
    HUMIMAX: number
    HUMIMIN: number
    TUSEMAX: number
    TUSEMIN: number
    TIMEZONE_ID: number
    TIMEZONE_AREA: string
    TIMEZONE_OFFSET: number
    DUTAUT_CTRLOPER: ControlMode
    PORTCFG: 'IR'|'RELAY'|null
  }>(sentence, qPars)
}

export function getListBasic (qPars: {
  RTYPE_ID?: number,
  clientIds?: number[],
  unitIds?: number[],
  withOffset?: boolean,
}, admPars: {
  includeTempLimits?: boolean
}) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE AS DEV_ID,
      DEVICES_CLIENTS.CLIENT_ID,
      DEVICES_UNITS.UNIT_ID,
      ENVIRONMENTS.ENVIRONMENT_NAME AS ROOM_NAME,
      DUTS_DEVICES.PLACEMENT,
      ROOMTYPES.RTYPE_ID,
      DUTS_DEVICES.VARS,
      DUTS_AUTOMATION.DISAB,
      CURRENT_AUTOMATIONS_PARAMETERS.PORT_CFG AS PORTCFG,
      COALESCE(DUTS_DEVICES.TEMPERATURE_OFFSET, 0) AS TEMPERATURE_OFFSET
  `
  if (admPars.includeTempLimits) { sentence += ' ,ROOMTYPES.TUSEMAX ' }
  if (admPars.includeTempLimits) { sentence += ' ,ROOMTYPES.TUSEMIN ' }
  if (admPars.includeTempLimits) { sentence += ' ,ROOMTYPES.CO2MAX ' }
  if (admPars.includeTempLimits) { sentence += ' ,ROOMTYPES.USEPERIOD '}

  sentence += `
    FROM
      DUTS_DEVICES
      INNER JOIN DEVICES ON (DUTS_DEVICES.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
      LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
      LEFT JOIN DUTS_MONITORING ON (DUTS_DEVICES.ID = DUTS_MONITORING.DUT_DEVICE_ID)
      LEFT JOIN DUTS_AUTOMATION ON (DUTS_DEVICES.ID = DUTS_AUTOMATION.DUT_DEVICE_ID)
      LEFT JOIN ENVIRONMENTS ON (DUTS_MONITORING.ENVIRONMENT_ID = ENVIRONMENTS.ID)
      LEFT JOIN ENVIRONMENTS_ROOM_TYPES ON (ENVIRONMENTS_ROOM_TYPES.ENVIRONMENT_ID = ENVIRONMENTS.ID)
      LEFT JOIN ROOMTYPES ON (ENVIRONMENTS_ROOM_TYPES.RTYPE_ID = ROOMTYPES.RTYPE_ID)
      LEFT JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID = DUTS_AUTOMATION.MACHINE_ID)
      LEFT JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (CURRENT_AUTOMATIONS_PARAMETERS.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)
  `

  const conditions: string[] = []
  if (qPars.RTYPE_ID !== undefined) { conditions.push(`ENVIRONMENTS_ROOM_TYPES.RTYPE_ID = :RTYPE_ID`) }
  if (qPars.clientIds) { conditions.push(`DEVICES_CLIENTS.CLIENT_ID IN (:clientIds)`) }
  if (qPars.unitIds) { conditions.push(`DEVICES_UNITS.UNIT_ID IN (:unitIds)`) }
  if (qPars.withOffset) { conditions.push(`DUTS_DEVICES.TEMPERATURE_OFFSET IS NOT NULL AND DUTS_DEVICES.TEMPERATURE_OFFSET <> 0`) }
  if (conditions.length) { sentence += ' WHERE ' + conditions.join(' AND ') }

  return sqldb.query<{
    DISAB: number
    PORTCFG: string
    DEV_ID: string
    CLIENT_ID: number
    UNIT_ID: number
    ROOM_NAME: string
    PLACEMENT: 'AMB'|'INS'|'DUO'
    RTYPE_ID: number
    VARS: string
    TEMPERATURE_OFFSET: number
    TUSEMAX?: number
    TUSEMIN?: number
    CO2MAX?: number
    USEPERIOD: string
  }>(sentence, qPars)
}

export function getListInRoom (qPars: { ROOM_ID: number }) {
  let sentence = `
    SELECT DISTINCT
      DEVICES.DEVICE_CODE AS DUT_ID,
      CURRENT_AUTOMATIONS_PARAMETERS.LAST_PROG AS LASTPROG,
      DUTS_AUTOMATION.DISAB
  `
  sentence += `
    FROM
      DEVICES
      INNER JOIN DUTS_DEVICES ON (DUTS_DEVICES.DEVICE_ID = DEVICES.ID)
      INNER JOIN DUTS_AUTOMATION ON (DUTS_DEVICES.ID = DUTS_AUTOMATION.DUT_DEVICE_ID)
      INNER JOIN DUTS_DEVICES_ROOMS ON (DUTS_DEVICES_ROOMS.DUT_DEVICE_ID = DUTS_DEVICES.ID)
      INNER JOIN ROOMS ON (DUTS_DEVICES_ROOMS.ROOM_ID = ROOMS.ROOM_ID)
      INNER JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID = DUTS_AUTOMATION.MACHINE_ID)
      INNER JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (CURRENT_AUTOMATIONS_PARAMETERS.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)
  `

  sentence += ` WHERE DUTS_DEVICES_ROOMS.ROOM_ID = :ROOM_ID `

  return sqldb.query<{
    DUT_ID: string
    LASTPROG: string
    DISAB: number
  }>(sentence, qPars)
}

export function getListDutsBasicGroundPlant (qPars: { UNIT_ID: number }) {
  let sentence = `
  SELECT
  DEVICES.DEVICE_CODE AS DEV_ID,
  DEVICES.ID AS DUT_ID,
  ENVIRONMENTS.ENVIRONMENT_NAME AS ROOM_NAME,
  ENVIRONMENTS.ID AS ENVIRONMENT_ID,
  ROOMTYPES.CO2MAX,
  ROOMTYPES.TUSEMAX,
  ROOMTYPES.TUSEMIN,
  ROOMTYPES.HUMIMAX,
  ROOMTYPES.HUMIMIN
`
sentence += `
FROM
  DUTS_DEVICES
  INNER JOIN DEVICES ON (DUTS_DEVICES.DEVICE_ID = DEVICES.ID)
  LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
  LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
  LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
  LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
  LEFT JOIN DUTS_MONITORING ON (DUTS_DEVICES.ID = DUTS_MONITORING.DUT_DEVICE_ID)
  LEFT JOIN ENVIRONMENTS ON (DUTS_MONITORING.ENVIRONMENT_ID = ENVIRONMENTS.ID)
  LEFT JOIN ENVIRONMENTS_ROOM_TYPES ON (ENVIRONMENTS_ROOM_TYPES.ENVIRONMENT_ID = ENVIRONMENTS.ID)
  LEFT JOIN ROOMTYPES ON (ENVIRONMENTS_ROOM_TYPES.RTYPE_ID = ROOMTYPES.RTYPE_ID)
`
sentence += ' WHERE CLUNITS.UNIT_ID = :UNIT_ID AND ENVIRONMENTS.ID IS NOT NULL';

sentence += ` GROUP BY DEVICES.DEVICE_CODE ORDER BY DEVICES.DEVICE_CODE ASC `;

return sqldb.query<{
DEV_ID: string
DUT_ID: number
ROOM_NAME: string
HUMIMAX: number
HUMIMIN: number
TUSEMAX: number
TUSEMIN: number
CO2MAX: number
ENVIRONMENT_ID: number
}>(sentence, qPars)
}

export function getListInfoExport () {
  let sentence = `
    SELECT DISTINCT
      DEVICES.DEVICE_CODE AS DEV_ID,
      DEVICES_CLIENTS.CLIENT_ID,
      DEVICES_UNITS.UNIT_ID,
      CLUNITS.UNIT_NAME,
      DUTS_AUTOMATION.DISAB AS AUT_DISABLED,
      CURRENT_AUTOMATIONS_PARAMETERS.SETPOINT AS TSETPOINT,
      CURRENT_AUTOMATIONS_PARAMETERS.MODE AS CTRLOPER,
      CURRENT_AUTOMATIONS_PARAMETERS.LTC AS LTCRIT,
      CURRENT_AUTOMATIONS_PARAMETERS.PORT_CFG AS PORTCFG,
      CURRENT_AUTOMATIONS_PARAMETERS.LTI AS LTINF,
      CLIENTS.NAME AS CLIENT_NAME,
      STATEREGION.NAME AS STATE_ID,
      CITY.NAME AS CITY_NAME,
      ROOMTYPES.TUSEMIN,
      ROOMTYPES.TUSEMAX,
      ENVIRONMENTS.ENVIRONMENT_NAME AS ROOM_NAME
  `
  sentence += `
    FROM
      DUTS_DEVICES
      INNER JOIN DEVICES ON (DUTS_DEVICES.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
      LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
      LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
      LEFT JOIN STATEREGION ON (STATEREGION.ID = CITY.STATE_ID)
      LEFT JOIN DUTS_MONITORING ON (DUTS_DEVICES.ID = DUTS_MONITORING.DUT_DEVICE_ID)
      LEFT JOIN DUTS_DUO ON (DUTS_DEVICES.ID = DUTS_DUO.DUT_DEVICE_ID)
      LEFT JOIN ENVIRONMENTS ON (DUTS_MONITORING.ENVIRONMENT_ID = ENVIRONMENTS.ID)
      LEFT JOIN ENVIRONMENTS_ROOM_TYPES ON (ENVIRONMENTS_ROOM_TYPES.ENVIRONMENT_ID = ENVIRONMENTS.ID)
      LEFT JOIN ROOMTYPES ON (ENVIRONMENTS_ROOM_TYPES.RTYPE_ID = ROOMTYPES.RTYPE_ID)
      LEFT JOIN DUTS_AUTOMATION ON (DUTS_DEVICES.ID = DUTS_AUTOMATION.DUT_DEVICE_ID)
      INNER JOIN MACHINES_CURRENT_AUTOMATIONS_PARAMETERS ON (MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.MACHINE_ID = DUTS_AUTOMATION.MACHINE_ID)
      INNER JOIN CURRENT_AUTOMATIONS_PARAMETERS ON (CURRENT_AUTOMATIONS_PARAMETERS.ID = MACHINES_CURRENT_AUTOMATIONS_PARAMETERS.CURRENT_AUTOMATION_PARAMETERS_ID)
  `

  return sqldb.query<{
    DEV_ID: string
    CLIENT_ID: number
    UNIT_ID: number
    UNIT_NAME: string
    AUT_DISABLED: number
    TSETPOINT: number
    CTRLOPER: string
    TUSEMIN: number
    TUSEMAX: number
    LTCRIT: number
    PORTCFG: string
    LTINF: number
    CLIENT_NAME: string
    STATE_ID: string
    CITY_NAME: string
    ROOM_NAME: string
  }>(sentence)
}

export function getListExportMeanTp (qPars: { clientIds: number[], dayStartYMD: string }) {
  let sentence = `
    SELECT
      cache_cond_tel.devId,
      cache_cond_tel.YMD,
      cache_cond_tel.meantp,
      CLUNITS.UNIT_NAME
    `
  sentence += `
    FROM
      DUTS_DEVICES
      INNER JOIN DEVICES ON (DUTS_DEVICES.DEVICE_ID = DEVICES.ID)
      INNER JOIN cache_cond_tel ON (cache_cond_tel.devId = DEVICES.DEVICE_CODE  AND YMD >= :dayStartYMD AND (meantp IS NOT NULL) AND meantp <> '{}')     
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
  `

  return sqldb.query<{
    devId: string
    YMD: string
    meantp: string
    UNIT_NAME: string
  }>(sentence, qPars)
}

export function buildRoomsDevsList (qPars: {
  clientIds?: number[],
  unitIds?: number[], 
  stateIds?: number[],
  cityIds?: string[],
  excludeClient?: number,
  SKIP?: number,
  LIMIT?: number,
  INCLUDE_INSTALLATION_UNIT?: boolean,
}) {
  let sentence = `
    SELECT
      r.DEV_ID,
      r.ROOM_NAME,
      r.RTYPE_ID,
      r.PLACEMENT,
      r.TYPE,
      CLIENTS.CLIENT_ID,
      CLUNITS.UNIT_ID,
      CLUNITS.UNIT_NAME,
      r.ISVISIBLE,
      ROOMTYPES.TUSEMAX,
      ROOMTYPES.TUSEMIN,
      ROOMTYPES.USEPERIOD AS RTYPE_SCHED,
      COUNT(r.DEV_ID) OVER() as totalItems,
      TIME_ZONES.ID as TIMEZONE_ID,
      TIME_ZONES.AREA as TIMEZONE_AREA,
      TIME_ZONES.TIME_ZONE_OFFSET as TIMEZONE_OFFSET
  `
  sentence += `
    FROM
      (
        SELECT
          DEVICES.DEVICE_CODE AS DEV_ID,
          ENVIRONMENTS.ENVIRONMENT_NAME AS ROOM_NAME,
          ENVIRONMENTS_ROOM_TYPES.RTYPE_ID,
          COALESCE(ENVIRONMENTS.IS_VISIBLE, 1) AS ISVISIBLE,
          DUTS_DEVICES.PLACEMENT,
          'DUT' AS TYPE,
          DEVICES.ID AS DEVICE_ID
        FROM
          DUTS_DEVICES
          INNER JOIN DEVICES ON (DUTS_DEVICES.DEVICE_ID = DEVICES.ID)
          LEFT JOIN DUTS_MONITORING ON (DUTS_DEVICES.ID = DUTS_MONITORING.DUT_DEVICE_ID)
          LEFT JOIN ENVIRONMENTS ON (DUTS_MONITORING.ENVIRONMENT_ID = ENVIRONMENTS.ID)
          LEFT JOIN ENVIRONMENTS_ROOM_TYPES ON (ENVIRONMENTS_ROOM_TYPES.ENVIRONMENT_ID = ENVIRONMENTS.ID)
          LEFT JOIN ROOMTYPES ON (ENVIRONMENTS_ROOM_TYPES.RTYPE_ID = ROOMTYPES.RTYPE_ID)
        UNION
        SELECT
          VAV_ID,
          ROOM_NAME,
          RTYPE_ID,
          ISVISIBLE,
          'AMB' AS PLACEMENT,
          'DRI' AS TYPE,
          DEVICES.ID AS DEVICE_ID
        FROM
          VAVS v
          INNER JOIN DEVICES ON (DEVICES.DEVICE_CODE = v.VAV_ID)
      ) as r
      LEFT JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = r.DEVICE_ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = r.DEVICE_ID)
      LEFT JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
      LEFT JOIN TIME_ZONES ON (TIME_ZONES.ID = CLUNITS.TIMEZONE_ID)
      LEFT JOIN CLIENTS ON (CLIENTS.CLIENT_ID = DEVICES_CLIENTS.CLIENT_ID)
      LEFT JOIN CITY ON (CITY.CITY_ID = CLUNITS.CITY_ID)
      LEFT JOIN ROOMTYPES ON (r.RTYPE_ID = ROOMTYPES.RTYPE_ID)
  `

  const conditions: string[] = []
  if (qPars.excludeClient) { conditions.push(`CLIENTS.CLIENT_ID <> :excludeClient`) }
  if (qPars.clientIds) { conditions.push(`CLIENTS.CLIENT_ID IN (:clientIds)`) }
  if (qPars.unitIds) { conditions.push(`DEVICES_UNITS.UNIT_ID IN (:unitIds)`) }
  if (qPars.cityIds) { conditions.push(`CITY.CITY_ID IN (:cityIds)`) }
  if (qPars.stateIds) { conditions.push(`CITY.STATE_ID IN (:stateIds)`) }
  if (qPars.INCLUDE_INSTALLATION_UNIT === false) { conditions.push(`CLUNITS.PRODUCTION = 1`)}
  conditions.push(`CLIENTS.PERMS_C NOT LIKE '%[F]%' AND CLIENTS.CLIENT_ID IS NOT NULL`)
  sentence += ' WHERE ' + conditions.join(' AND ')

  sentence += ` ORDER BY r.DEV_ID ASC `
  if (qPars.SKIP != null && qPars.LIMIT != null) { sentence += ` LIMIT :SKIP,:LIMIT ` }

  return sqldb.query<{
    DEV_ID: string,
    CLIENT_ID: number,
    UNIT_ID: number,
    UNIT_NAME: string,
    ISVISIBLE: number,
    ROOM_NAME: string,
    RTYPE_ID: number,
    PLACEMENT: 'AMB'|'DUO'
    TYPE: 'DUT'|'DRI'
    TUSEMIN: number
    TUSEMAX: number
    RTYPE_SCHED: string
    totalItems: number
    TIMEZONE_ID: number
    TIMEZONE_AREA: string
    TIMEZONE_OFFSET: number
  }>(sentence, qPars)
}

export function setVisibilityofDuts(qPars: { isVisible: number, dutId: string }) {
  const sentence = `
  UPDATE DUTS_MONITORING
    INNER JOIN DUTS_DEVICES ON (DUTS_MONITORING.DUT_DEVICE_ID = DUTS_DEVICES.ID)
    INNER JOIN DEVICES ON (DUTS_DEVICES.DEVICE_ID = DEVICES.ID)
    INNER JOIN ENVIRONMENTS ON (ENVIRONMENTS.ID = DUTS_MONITORING.ENVIRONMENT_ID)
  SET IS_VISIBLE = :isVisible
  WHERE DEVICE_CODE = :dutId;`
  return sqldb.execute(sentence, qPars)
}

export function getDutsMonitoringByUnit(qPars: { UNIT_ID: number }) {
  let sentence = `
    SELECT
    	DEVICES.DEVICE_CODE,
      ENVIRONMENTS_ROOM_TYPES.RTYPE_ID,
      CLUNITS.UNIT_ID,
      CLUNITS.HUMIDITY_OFFSET
  `
  sentence += `
    FROM
      DUTS_DEVICES
      INNER JOIN DEVICES ON (DUTS_DEVICES.DEVICE_ID = DEVICES.ID)
      INNER JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      INNER JOIN CLUNITS ON (CLUNITS.UNIT_ID = DEVICES_UNITS.UNIT_ID)
      INNER JOIN DUTS_MONITORING ON (DUTS_DEVICES.ID = DUTS_MONITORING.DUT_DEVICE_ID)
      LEFT JOIN ENVIRONMENTS_ROOM_TYPES ON (ENVIRONMENTS_ROOM_TYPES.ENVIRONMENT_ID = DUTS_MONITORING.ENVIRONMENT_ID)
  `

  sentence += ' WHERE CLUNITS.UNIT_ID = :UNIT_ID'

  return sqldb.query<{
    DEVICE_CODE: string
    RTYPE_ID: number
    UNIT_ID: number
    HUMIDITY_OFFSET: number
  }>(sentence, qPars)
}

export function getDutsDuoMonitoringEvaporatorByDevice(qPars: { DEVICE_CODE: string }) {
  let sentence = `
    SELECT
    	DEVICES.DEVICE_CODE
  `
  sentence += `
    FROM
      DUTS_DEVICES
      INNER JOIN DEVICES ON (DUTS_DEVICES.DEVICE_ID = DEVICES.ID)
      INNER JOIN DUTS_DUO ON (DUTS_DUO.DUT_DEVICE_ID = DUTS_DEVICES.ID)
      INNER JOIN DUTS_DUO_EVAPORATORS ON (DUTS_DUO_EVAPORATORS.DUT_DUO_ID = DUTS_DUO.DUT_DEVICE_ID)
  `

  sentence += ' WHERE DEVICES.DEVICE_CODE = :DEVICE_CODE'

  return sqldb.querySingle<{
    DEVICE_CODE: string
  }>(sentence, qPars)
}

export function getDutsDuoByUnit(qPars: { UNIT_ID: number , GROUP_BY_DEVICE?: boolean }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE,
      ASSETS.ID AS ASSET_ID,
      ASSETS.NAME AS ASSET_NAME,
      MACHINES.ID AS MACHINE_ID,
      ENVIRONMENTS_ROOM_TYPES.RTYPE_ID,
      MACHINES.NAME AS MACHINE_NAME,
      DEVICES_UNITS.UNIT_ID,
      COALESCE(CONDENSERS.MACHINE_KW, MACHINES.RATED_POWER) AS MACHINE_KW,
      DUTS_DEVICES.TEMPERATURE_OFFSET
  `
  sentence += `
    FROM DUTS_DEVICES
      INNER JOIN DEVICES ON (DUTS_DEVICES.DEVICE_ID = DEVICES.ID)
      INNER JOIN DUTS_DUO ON (DUTS_DUO.DUT_DEVICE_ID = DUTS_DEVICES.ID)
      INNER JOIN DUTS_AUTOMATION ON (DUTS_AUTOMATION.DUT_DEVICE_ID = DUTS_DEVICES.ID)
      INNER JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      INNER JOIN MACHINES ON (MACHINES.ID = DUTS_AUTOMATION.MACHINE_ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.MACHINE_ID = MACHINES.ID)
      LEFT JOIN ASSETS ON (ASSETS.ID = CONDENSERS.ASSET_ID)
      LEFT JOIN DACS_CONDENSERS ON (DACS_CONDENSERS.CONDENSER_ID = CONDENSERS.ID)
      LEFT JOIN DUTS_MONITORING ON (DUTS_DEVICES.ID = DUTS_MONITORING.DUT_DEVICE_ID)
      LEFT JOIN ENVIRONMENTS_ROOM_TYPES ON (ENVIRONMENTS_ROOM_TYPES.ENVIRONMENT_ID = DUTS_MONITORING.ENVIRONMENT_ID)
    `
  sentence += ` WHERE DEVICES_UNITS.UNIT_ID = :UNIT_ID AND DACS_CONDENSERS.CONDENSER_ID IS NULL`

  if(qPars.GROUP_BY_DEVICE) sentence += ` GROUP BY DEVICES.DEVICE_CODE`
  return sqldb.query<{
    DEVICE_CODE: string
    ASSET_ID: number
    ASSET_NAME: string
    MACHINE_ID: number
    RTYPE_ID: number
    MACHINE_NAME: string
    UNIT_ID: number
    MACHINE_KW: number
    TEMPERATURE_OFFSET: number
  }>(sentence, qPars);
}

export function getDutsDuoToL1AutomationByUnit(qPars: { UNIT_ID: number , GROUP_BY_DEVICE?: boolean }) {
  let sentence = `
    SELECT
      DEVICES.DEVICE_CODE,
      ASSETS.ID AS ASSET_ID,
      ASSETS.NAME AS ASSET_NAME,
      MACHINES.ID AS MACHINE_ID,
      ENVIRONMENTS_ROOM_TYPES.RTYPE_ID,
      MACHINES.NAME AS MACHINE_NAME,
      DEVICES_UNITS.UNIT_ID,
      COALESCE(CONDENSERS.MACHINE_KW, MACHINES.RATED_POWER) AS MACHINE_KW,
      DUTS_DEVICES.TEMPERATURE_OFFSET
  `
  sentence += `
    FROM DUTS_DEVICES
      INNER JOIN DEVICES ON (DUTS_DEVICES.DEVICE_ID = DEVICES.ID)
      INNER JOIN DUTS_DUO ON (DUTS_DUO.DUT_DEVICE_ID = DUTS_DEVICES.ID)
      INNER JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DUTS_AUTOMATION ON (DUTS_AUTOMATION.DUT_DEVICE_ID = DUTS_DEVICES.ID)
      LEFT JOIN DUTS_DUO_EVAPORATORS ON (DUTS_DUO_EVAPORATORS.DUT_DUO_ID = DUTS_DUO.ID)
      LEFT JOIN DUTS_DUO_CONDENSERS ON (DUTS_DUO_CONDENSERS.DUT_DUO_ID = DUTS_DUO.ID)
      LEFT JOIN DUTS_DUO_ASSET_HEAT_EXCHANGERS ON (DUTS_DUO_ASSET_HEAT_EXCHANGERS.DUT_DUO_ID = DUTS_DUO.ID)
      LEFT JOIN CONDENSERS ON (CONDENSERS.ID = DUTS_DUO_CONDENSERS.CONDENSER_ID)
      LEFT JOIN EVAPORATORS ON (EVAPORATORS.ID = DUTS_DUO_EVAPORATORS.EVAPORATOR_ID)
      LEFT JOIN ASSET_HEAT_EXCHANGERS ON (ASSET_HEAT_EXCHANGERS.ID = DUTS_DUO_ASSET_HEAT_EXCHANGERS.ASSET_HEAT_EXCHANGER_ID)
      LEFT JOIN ASSETS ON (ASSETS.ID = COALESCE(CONDENSERS.ASSET_ID, EVAPORATORS.ASSET_ID, ASSET_HEAT_EXCHANGERS.ASSET_ID))
      INNER JOIN MACHINES ON (MACHINES.ID = COALESCE(CONDENSERS.MACHINE_ID, EVAPORATORS.MACHINE_ID, ASSET_HEAT_EXCHANGERS.MACHINE_ID, DUTS_AUTOMATION.MACHINE_ID))
      LEFT JOIN DUTS_MONITORING ON (DUTS_DEVICES.ID = DUTS_MONITORING.DUT_DEVICE_ID)
      LEFT JOIN ENVIRONMENTS_ROOM_TYPES ON (ENVIRONMENTS_ROOM_TYPES.ENVIRONMENT_ID = DUTS_MONITORING.ENVIRONMENT_ID)
    `
  sentence += ` WHERE DEVICES_UNITS.UNIT_ID = :UNIT_ID`

  if(qPars.GROUP_BY_DEVICE) sentence += ` GROUP BY DEVICES.DEVICE_CODE`
  return sqldb.query<{
    DEVICE_CODE: string
    ASSET_ID: number
    ASSET_NAME: string
    MACHINE_ID: number
    RTYPE_ID: number
    MACHINE_NAME: string
    UNIT_ID: number
    MACHINE_KW: number
    TEMPERATURE_OFFSET: number
  }>(sentence, qPars);
}

export function getAllDutsByUnit(qPars: { UNIT_ID: number }) {
  let sentence = `
  SELECT
    DEVICES.DEVICE_CODE,
    DUTS_DEVICES.TEMPERATURE_OFFSET
  `
  sentence += `
    FROM DUTS_DEVICES
      INNER JOIN DEVICES ON (DUTS_DEVICES.DEVICE_ID = DEVICES.ID)
      INNER JOIN DEVICES_UNITS ON (DEVICES_UNITS.DEVICE_ID = DEVICES.ID)
    `
  sentence += ` WHERE DEVICES_UNITS.UNIT_ID = :UNIT_ID`;

  return sqldb.query<{
    DEVICE_CODE: string
    TEMPERATURE_OFFSET: number
  }>(sentence, qPars);
}

export function getClientDuts (qPars: { devIds: string[] }) {
  let sentence = `
    SELECT
      DEVICES_CLIENTS.CLIENT_ID
  `
  sentence += `
    FROM
      DUTS_DEVICES
      INNER JOIN DEVICES ON (DUTS_DEVICES.DEVICE_ID = DEVICES.ID)
      LEFT JOIN DEVICES_CLIENTS ON (DEVICES_CLIENTS.DEVICE_ID = DEVICES.ID)
  `

  sentence += ' WHERE DEVICES.DEVICE_CODE in (:devIds)'
  sentence += ' GROUP BY DEVICES_CLIENTS.CLIENT_ID'

  return sqldb.query<{
    CLIENT_ID: number
  }>(sentence, qPars)
}


export function getInfoToEcoLocal (qPars: { devId: string }) {
  let sentence = `
    SELECT
      DEVICES.ID AS DEVICE_ID,
      DEVICES.DEVICE_CODE AS DEVICE_CODE,
      DUTS_DEVICES.TEMPERATURE_OFFSET,
      DEVFWVERS.CURRFW_VERS AS CURRFW_VERS
  `
  sentence += `
    FROM
      DUTS_DEVICES
      INNER JOIN DEVICES ON (DUTS_DEVICES.DEVICE_ID = DEVICES.ID)
      INNER JOIN DEVFWVERS ON (DEVFWVERS.DEV_ID = DEVICES.DEVICE_CODE)
  `

  const conditions: string[] = []
  conditions.push(`DEVICES.DEVICE_CODE = :devId`)
  sentence += ' WHERE ' + conditions.join(' AND ')

  return sqldb.querySingle<{
    DEVICE_ID: number
    DEVICE_CODE: string
    TEMPERATURE_OFFSET: number
    CURRFW_VERS: string
  }>(sentence, qPars)
}
